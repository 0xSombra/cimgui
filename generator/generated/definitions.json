{"igGetFrameHeight":[{"funcname":"GetFrameHeight","args":"()","ret":"float","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // ~ FontSize + style.FramePadding.y * 2","defaults":[],"signature":"()","cimguiname":"igGetFrameHeight"}],"igCreateContext":[{"funcname":"CreateContext","args":"(ImFontAtlas* shared_font_atlas)","ret":"ImGuiContext*","call_args":"(shared_font_atlas)","argsoriginal":"(ImFontAtlas* shared_font_atlas=((void *)0))","stname":"ImGui","comment":"","defaults":{"shared_font_atlas":"((void *)0)"},"signature":"(ImFontAtlas*)","cimguiname":"igCreateContext"}],"igTextUnformatted":[{"funcname":"TextUnformatted","args":"(const char* text,const char* text_end)","ret":"void","call_args":"(text,text_end)","argsoriginal":"(const char* text,const char* text_end=((void *)0))","stname":"ImGui","comment":" // raw text without formatting. Roughly equivalent to Text(\"%s\", text) but: A) doesn't require null terminated string if 'text_end' is specified, B) it's faster, no memory copy is done, no buffer size limits, recommended for long chunks of text.","defaults":{"text_end":"((void *)0)"},"signature":"(const char*,const char*)","cimguiname":"igTextUnformatted"}],"igPopFont":[{"funcname":"PopFont","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":"","defaults":[],"signature":"()","cimguiname":"igPopFont"}],"igCombo":[{"funcname":"Combo","args":"(const char* label,int* current_item,const char* const items[],int items_count,int popup_max_height_in_items)","ret":"bool","call_args":"(label,current_item,items,items_count,popup_max_height_in_items)","argsoriginal":"(const char* label,int* current_item,const char* const items[],int items_count,int popup_max_height_in_items=-1)","stname":"ImGui","comment":"","ov_cimguiname":"igCombo","defaults":{"popup_max_height_in_items":"-1"},"signature":"(const char*,int*,const char* const[],int,int)","cimguiname":"igCombo"},{"funcname":"Combo","args":"(const char* label,int* current_item,const char* items_separated_by_zeros,int popup_max_height_in_items)","ret":"bool","call_args":"(label,current_item,items_separated_by_zeros,popup_max_height_in_items)","argsoriginal":"(const char* label,int* current_item,const char* items_separated_by_zeros,int popup_max_height_in_items=-1)","stname":"ImGui","comment":" // Separate items with \\0 within a string, end item-list with \\0\\0. e.g. \"One\\0Two\\0Three\\0\"","ov_cimguiname":"igComboStr","defaults":{"popup_max_height_in_items":"-1"},"signature":"(const char*,int*,const char*,int)","cimguiname":"igCombo"},{"funcname":"Combo","args":"(const char* label,int* current_item,bool(*items_getter)(void* data,int idx,const char** out_text),void* data,int items_count,int popup_max_height_in_items)","ret":"bool","call_args":"(label,current_item,items_getter,data,items_count,popup_max_height_in_items)","argsoriginal":"(const char* label,int* current_item,bool(*items_getter)(void* data,int idx,const char** out_text),void* data,int items_count,int popup_max_height_in_items=-1)","stname":"ImGui","comment":"","ov_cimguiname":"igComboFnPtr","defaults":{"popup_max_height_in_items":"-1"},"signature":"(const char*,int*,bool(*)(void*,int,const char**),void*,int,int)","cimguiname":"igCombo"}],"igCaptureKeyboardFromApp":[{"funcname":"CaptureKeyboardFromApp","args":"(bool capture)","ret":"void","call_args":"(capture)","argsoriginal":"(bool capture=true)","stname":"ImGui","comment":" // manually override io.WantCaptureKeyboard flag next frame (said flag is entirely left for your application to handle). e.g. force capture keyboard when your widget is being hovered.","defaults":{"capture":"true"},"signature":"(bool)","cimguiname":"igCaptureKeyboardFromApp"}],"igIsWindowFocused":[{"funcname":"IsWindowFocused","args":"(ImGuiFocusedFlags flags)","ret":"bool","call_args":"(flags)","argsoriginal":"(ImGuiFocusedFlags flags=0)","stname":"ImGui","comment":" // is current window focused? or its root/child, depending on flags. see flags for options.","defaults":{"flags":"0"},"signature":"(ImGuiFocusedFlags)","cimguiname":"igIsWindowFocused"}],"igRender":[{"funcname":"Render","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // ends the ImGui frame, finalize the draw data. (Obsolete: optionally call io.RenderDrawListsFn if set. Nowadays, prefer calling your render function yourself.)","defaults":[],"signature":"()","cimguiname":"igRender"}],"ImDrawList_ChannelsSetCurrent":[{"funcname":"ChannelsSetCurrent","args":"(int channel_index)","ret":"void","call_args":"(channel_index)","argsoriginal":"(int channel_index)","stname":"ImDrawList","comment":"","defaults":[],"signature":"(int)","cimguiname":"ImDrawList_ChannelsSetCurrent"}],"igDragFloat4":[{"funcname":"DragFloat4","args":"(const char* label,float v[4],float v_speed,float v_min,float v_max,const char* format,float power)","ret":"bool","call_args":"(label,v,v_speed,v_min,v_max,format,power)","argsoriginal":"(const char* label,float v[4],float v_speed=1.0f,float v_min=0.0f,float v_max=0.0f,const char* format=\"%.3f\",float power=1.0f)","stname":"ImGui","comment":"","defaults":{"v_speed":"1.0f","v_min":"0.0f","power":"1.0f","v_max":"0.0f","format":"\"%.3f\""},"signature":"(const char*,float[4],float,float,float,const char*,float)","cimguiname":"igDragFloat4"}],"ImDrawList_ChannelsSplit":[{"funcname":"ChannelsSplit","args":"(int channels_count)","ret":"void","call_args":"(channels_count)","argsoriginal":"(int channels_count)","stname":"ImDrawList","comment":"","defaults":[],"signature":"(int)","cimguiname":"ImDrawList_ChannelsSplit"}],"igIsMousePosValid":[{"funcname":"IsMousePosValid","args":"(const ImVec2* mouse_pos)","ret":"bool","call_args":"(mouse_pos)","argsoriginal":"(const ImVec2* mouse_pos=((void *)0))","stname":"ImGui","comment":" //","defaults":{"mouse_pos":"((void *)0)"},"signature":"(const ImVec2*)","cimguiname":"igIsMousePosValid"}],"igGetCursorScreenPos":[{"funcname":"GetCursorScreenPos","args":"()","ret":"ImVec2","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // cursor position in absolute screen coordinates [0..io.DisplaySize] (useful to work with ImDrawList API)","defaults":[],"signature":"()","cimguiname":"igGetCursorScreenPos"}],"igDebugCheckVersionAndDataLayout":[{"funcname":"DebugCheckVersionAndDataLayout","args":"(const char* version_str,size_t sz_io,size_t sz_style,size_t sz_vec2,size_t sz_vec4,size_t sz_drawvert)","ret":"bool","call_args":"(version_str,sz_io,sz_style,sz_vec2,sz_vec4,sz_drawvert)","argsoriginal":"(const char* version_str,size_t sz_io,size_t sz_style,size_t sz_vec2,size_t sz_vec4,size_t sz_drawvert)","stname":"ImGui","comment":"","defaults":[],"signature":"(const char*,size_t,size_t,size_t,size_t,size_t)","cimguiname":"igDebugCheckVersionAndDataLayout"}],"igSetScrollHere":[{"funcname":"SetScrollHere","args":"(float center_y_ratio)","ret":"void","call_args":"(center_y_ratio)","argsoriginal":"(float center_y_ratio=0.5f)","stname":"ImGui","comment":" // adjust scrolling amount to make current cursor position visible. center_y_ratio=0.0: top, 0.5: center, 1.0: bottom. When using to make a \"default/current item\" visible, consider using SetItemDefaultFocus() instead.","defaults":{"center_y_ratio":"0.5f"},"signature":"(float)","cimguiname":"igSetScrollHere"}],"igSetScrollY":[{"funcname":"SetScrollY","args":"(float scroll_y)","ret":"void","call_args":"(scroll_y)","argsoriginal":"(float scroll_y)","stname":"ImGui","comment":" // set scrolling amount [0..GetScrollMaxY()]","defaults":[],"signature":"(float)","cimguiname":"igSetScrollY"}],"igSetColorEditOptions":[{"funcname":"SetColorEditOptions","args":"(ImGuiColorEditFlags flags)","ret":"void","call_args":"(flags)","argsoriginal":"(ImGuiColorEditFlags flags)","stname":"ImGui","comment":" // initialize current options (generally on application startup) if you want to select a default format, picker type, etc. User will be able to change many settings, unless you pass the _NoOptions flag to your calls.","defaults":[],"signature":"(ImGuiColorEditFlags)","cimguiname":"igSetColorEditOptions"}],"igSetScrollFromPosY":[{"funcname":"SetScrollFromPosY","args":"(float pos_y,float center_y_ratio)","ret":"void","call_args":"(pos_y,center_y_ratio)","argsoriginal":"(float pos_y,float center_y_ratio=0.5f)","stname":"ImGui","comment":" // adjust scrolling amount to make given position valid. use GetCursorPos() or GetCursorStartPos()+offset to get valid positions.","defaults":{"center_y_ratio":"0.5f"},"signature":"(float,float)","cimguiname":"igSetScrollFromPosY"}],"igGetStyleColorVec4":[{"funcname":"GetStyleColorVec4","args":"(ImGuiCol idx)","ret":"const ImVec4*","call_args":"(idx)","argsoriginal":"(ImGuiCol idx)","stname":"ImGui","comment":" // retrieve style color as stored in ImGuiStyle structure. use to feed back into PushStyleColor(), otherwise use GetColorU32() to get style color with style alpha baked in.","retref":"&","defaults":[],"signature":"(ImGuiCol)","cimguiname":"igGetStyleColorVec4"}],"igIsMouseHoveringRect":[{"funcname":"IsMouseHoveringRect","args":"(const ImVec2 r_min,const ImVec2 r_max,bool clip)","ret":"bool","call_args":"(r_min,r_max,clip)","argsoriginal":"(const ImVec2& r_min,const ImVec2& r_max,bool clip=true)","stname":"ImGui","comment":" // is mouse hovering given bounding rect (in screen space). clipped by current clipping settings. disregarding of consideration of focus/window ordering/blocked by a popup.","defaults":{"clip":"true"},"signature":"(const ImVec2,const ImVec2,bool)","cimguiname":"igIsMouseHoveringRect"}],"ImVec4_ImVec4":[{"funcname":"ImVec4","args":"()","call_args":"()","argsoriginal":"()","stname":"ImVec4","comment":"","ov_cimguiname":"ImVec4_ImVec4","defaults":[],"signature":"()","cimguiname":"ImVec4_ImVec4"},{"funcname":"ImVec4","args":"(float _x,float _y,float _z,float _w)","call_args":"(_x,_y,_z,_w)","argsoriginal":"(float _x,float _y,float _z,float _w)","stname":"ImVec4","comment":"","ov_cimguiname":"ImVec4_ImVec4Float","defaults":[],"signature":"(float,float,float,float)","cimguiname":"ImVec4_ImVec4"}],"ImColor_SetHSV":[{"funcname":"SetHSV","args":"(float h,float s,float v,float a)","ret":"inline void","call_args":"(h,s,v,a)","argsoriginal":"(float h,float s,float v,float a=1.0f)","stname":"ImColor","comment":"","defaults":{"a":"1.0f"},"signature":"(float,float,float,float)","cimguiname":"ImColor_SetHSV"}],"igDragFloat3":[{"funcname":"DragFloat3","args":"(const char* label,float v[3],float v_speed,float v_min,float v_max,const char* format,float power)","ret":"bool","call_args":"(label,v,v_speed,v_min,v_max,format,power)","argsoriginal":"(const char* label,float v[3],float v_speed=1.0f,float v_min=0.0f,float v_max=0.0f,const char* format=\"%.3f\",float power=1.0f)","stname":"ImGui","comment":"","defaults":{"v_speed":"1.0f","v_min":"0.0f","power":"1.0f","v_max":"0.0f","format":"\"%.3f\""},"signature":"(const char*,float[3],float,float,float,const char*,float)","cimguiname":"igDragFloat3"}],"ImDrawList_AddPolyline":[{"funcname":"AddPolyline","args":"(const ImVec2* points,const int num_points,ImU32 col,bool closed,float thickness)","ret":"void","call_args":"(points,num_points,col,closed,thickness)","argsoriginal":"(const ImVec2* points,const int num_points,ImU32 col,bool closed,float thickness)","stname":"ImDrawList","comment":"","defaults":[],"signature":"(const ImVec2*,const int,ImU32,bool,float)","cimguiname":"ImDrawList_AddPolyline"}],"igValue":[{"funcname":"Value","args":"(const char* prefix,bool b)","ret":"void","call_args":"(prefix,b)","argsoriginal":"(const char* prefix,bool b)","stname":"ImGui","comment":"","ov_cimguiname":"igValueBool","defaults":[],"signature":"(const char*,bool)","cimguiname":"igValue"},{"funcname":"Value","args":"(const char* prefix,int v)","ret":"void","call_args":"(prefix,v)","argsoriginal":"(const char* prefix,int v)","stname":"ImGui","comment":"","ov_cimguiname":"igValueInt","defaults":[],"signature":"(const char*,int)","cimguiname":"igValue"},{"funcname":"Value","args":"(const char* prefix,unsigned int v)","ret":"void","call_args":"(prefix,v)","argsoriginal":"(const char* prefix,unsigned int v)","stname":"ImGui","comment":"","ov_cimguiname":"igValueUint","defaults":[],"signature":"(const char*,unsigned int)","cimguiname":"igValue"},{"funcname":"Value","args":"(const char* prefix,float v,const char* float_format)","ret":"void","call_args":"(prefix,v,float_format)","argsoriginal":"(const char* prefix,float v,const char* float_format=((void *)0))","stname":"ImGui","comment":"","ov_cimguiname":"igValueFloat","defaults":{"float_format":"((void *)0)"},"signature":"(const char*,float,const char*)","cimguiname":"igValue"}],"ImGuiTextFilter_Build":[{"funcname":"Build","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImGuiTextFilter","comment":"","defaults":[],"signature":"()","cimguiname":"ImGuiTextFilter_Build"}],"igGetItemRectMax":[{"funcname":"GetItemRectMax","args":"()","ret":"ImVec2","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // \"","defaults":[],"signature":"()","cimguiname":"igGetItemRectMax"}],"igIsItemDeactivated":[{"funcname":"IsItemDeactivated","args":"()","ret":"bool","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // was the last item just made inactive (item was previously active). Useful for Undo/Redo patterns with widgets that requires continuous editing.","defaults":[],"signature":"()","cimguiname":"igIsItemDeactivated"}],"igPushStyleVar":[{"funcname":"PushStyleVar","args":"(ImGuiStyleVar idx,float val)","ret":"void","call_args":"(idx,val)","argsoriginal":"(ImGuiStyleVar idx,float val)","stname":"ImGui","comment":"","ov_cimguiname":"igPushStyleVarFloat","defaults":[],"signature":"(ImGuiStyleVar,float)","cimguiname":"igPushStyleVar"},{"funcname":"PushStyleVar","args":"(ImGuiStyleVar idx,const ImVec2 val)","ret":"void","call_args":"(idx,val)","argsoriginal":"(ImGuiStyleVar idx,const ImVec2& val)","stname":"ImGui","comment":"","ov_cimguiname":"igPushStyleVarVec2","defaults":[],"signature":"(ImGuiStyleVar,const ImVec2)","cimguiname":"igPushStyleVar"}],"igSaveIniSettingsToMemory":[{"funcname":"SaveIniSettingsToMemory","args":"(size_t* out_ini_size)","ret":"const char*","call_args":"(out_ini_size)","argsoriginal":"(size_t* out_ini_size=((void *)0))","stname":"ImGui","comment":" // return a zero-terminated string with the .ini data which you can save by your own mean. call when io.WantSaveIniSettings is set, then save data by your own mean and clear io.WantSaveIniSettings.","defaults":{"out_ini_size":"((void *)0)"},"signature":"(size_t*)","cimguiname":"igSaveIniSettingsToMemory"}],"igDragIntRange2":[{"funcname":"DragIntRange2","args":"(const char* label,int* v_current_min,int* v_current_max,float v_speed,int v_min,int v_max,const char* format,const char* format_max)","ret":"bool","call_args":"(label,v_current_min,v_current_max,v_speed,v_min,v_max,format,format_max)","argsoriginal":"(const char* label,int* v_current_min,int* v_current_max,float v_speed=1.0f,int v_min=0,int v_max=0,const char* format=\"%d\",const char* format_max=((void *)0))","stname":"ImGui","comment":"","defaults":{"v_speed":"1.0f","v_min":"0","format_max":"((void *)0)","v_max":"0","format":"\"%d\""},"signature":"(const char*,int*,int*,float,int,int,const char*,const char*)","cimguiname":"igDragIntRange2"}],"igUnindent":[{"funcname":"Unindent","args":"(float indent_w)","ret":"void","call_args":"(indent_w)","argsoriginal":"(float indent_w=0.0f)","stname":"ImGui","comment":" // move content position back to the left, by style.IndentSpacing or indent_w if != 0","defaults":{"indent_w":"0.0f"},"signature":"(float)","cimguiname":"igUnindent"}],"ImFontAtlas_AddFontFromMemoryCompressedBase85TTF":[{"funcname":"AddFontFromMemoryCompressedBase85TTF","args":"(const char* compressed_font_data_base85,float size_pixels,const ImFontConfig* font_cfg,const ImWchar* glyph_ranges)","ret":"ImFont*","call_args":"(compressed_font_data_base85,size_pixels,font_cfg,glyph_ranges)","argsoriginal":"(const char* compressed_font_data_base85,float size_pixels,const ImFontConfig* font_cfg=((void *)0),const ImWchar* glyph_ranges=((void *)0))","stname":"ImFontAtlas","comment":" // 'compressed_font_data_base85' still owned by caller. Compress with binary_to_compressed_c.cpp with -base85 parameter.","defaults":{"glyph_ranges":"((void *)0)","font_cfg":"((void *)0)"},"signature":"(const char*,float,const ImFontConfig*,const ImWchar*)","cimguiname":"ImFontAtlas_AddFontFromMemoryCompressedBase85TTF"}],"igPopAllowKeyboardFocus":[{"funcname":"PopAllowKeyboardFocus","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":"","defaults":[],"signature":"()","cimguiname":"igPopAllowKeyboardFocus"}],"igLoadIniSettingsFromDisk":[{"funcname":"LoadIniSettingsFromDisk","args":"(const char* ini_filename)","ret":"void","call_args":"(ini_filename)","argsoriginal":"(const char* ini_filename)","stname":"ImGui","comment":" // call after CreateContext() and before the first call to NewFrame(). NewFrame() automatically calls LoadIniSettingsFromDisk(io.IniFilename).","defaults":[],"signature":"(const char*)","cimguiname":"igLoadIniSettingsFromDisk"}],"igGetCursorStartPos":[{"funcname":"GetCursorStartPos","args":"()","ret":"ImVec2","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // initial cursor position","defaults":[],"signature":"()","cimguiname":"igGetCursorStartPos"}],"igSetCursorScreenPos":[{"funcname":"SetCursorScreenPos","args":"(const ImVec2 screen_pos)","ret":"void","call_args":"(screen_pos)","argsoriginal":"(const ImVec2& screen_pos)","stname":"ImGui","comment":" // cursor position in absolute screen coordinates [0..io.DisplaySize]","defaults":[],"signature":"(const ImVec2)","cimguiname":"igSetCursorScreenPos"}],"ImFont_AddRemapChar":[{"funcname":"AddRemapChar","args":"(ImWchar dst,ImWchar src,bool overwrite_dst)","ret":"void","call_args":"(dst,src,overwrite_dst)","argsoriginal":"(ImWchar dst,ImWchar src,bool overwrite_dst=true)","stname":"ImFont","comment":" // Makes 'dst' character/glyph points to 'src' character/glyph. Currently needs to be called AFTER fonts have been built.","defaults":{"overwrite_dst":"true"},"signature":"(ImWchar,ImWchar,bool)","cimguiname":"ImFont_AddRemapChar"}],"igInputInt4":[{"funcname":"InputInt4","args":"(const char* label,int v[4],ImGuiInputTextFlags extra_flags)","ret":"bool","call_args":"(label,v,extra_flags)","argsoriginal":"(const char* label,int v[4],ImGuiInputTextFlags extra_flags=0)","stname":"ImGui","comment":"","defaults":{"extra_flags":"0"},"signature":"(const char*,int[4],ImGuiInputTextFlags)","cimguiname":"igInputInt4"}],"ImFont_AddGlyph":[{"funcname":"AddGlyph","args":"(ImWchar c,float x0,float y0,float x1,float y1,float u0,float v0,float u1,float v1,float advance_x)","ret":"void","call_args":"(c,x0,y0,x1,y1,u0,v0,u1,v1,advance_x)","argsoriginal":"(ImWchar c,float x0,float y0,float x1,float y1,float u0,float v0,float u1,float v1,float advance_x)","stname":"ImFont","comment":"","defaults":[],"signature":"(ImWchar,float,float,float,float,float,float,float,float,float)","cimguiname":"ImFont_AddGlyph"}],"ImFont_GrowIndex":[{"funcname":"GrowIndex","args":"(int new_size)","ret":"void","call_args":"(new_size)","argsoriginal":"(int new_size)","stname":"ImFont","comment":"","defaults":[],"signature":"(int)","cimguiname":"ImFont_GrowIndex"}],"igIsRectVisible":[{"funcname":"IsRectVisible","args":"(const ImVec2 size)","ret":"bool","call_args":"(size)","argsoriginal":"(const ImVec2& size)","stname":"ImGui","comment":" // test if rectangle (of given size, starting from cursor position) is visible / not clipped.","ov_cimguiname":"igIsRectVisible","defaults":[],"signature":"(const ImVec2)","cimguiname":"igIsRectVisible"},{"funcname":"IsRectVisible","args":"(const ImVec2 rect_min,const ImVec2 rect_max)","ret":"bool","call_args":"(rect_min,rect_max)","argsoriginal":"(const ImVec2& rect_min,const ImVec2& rect_max)","stname":"ImGui","comment":" // test if rectangle (in screen space) is visible / not clipped. to perform coarse clipping on user's side.","ov_cimguiname":"igIsRectVisibleVec2","defaults":[],"signature":"(const ImVec2,const ImVec2)","cimguiname":"igIsRectVisible"}],"ImFont_RenderText":[{"funcname":"RenderText","args":"(ImDrawList* draw_list,float size,ImVec2 pos,ImU32 col,const ImVec4 clip_rect,const char* text_begin,const char* text_end,float wrap_width,bool cpu_fine_clip)","ret":"void","call_args":"(draw_list,size,pos,col,clip_rect,text_begin,text_end,wrap_width,cpu_fine_clip)","argsoriginal":"(ImDrawList* draw_list,float size,ImVec2 pos,ImU32 col,const ImVec4& clip_rect,const char* text_begin,const char* text_end,float wrap_width=0.0f,bool cpu_fine_clip=false)","stname":"ImFont","comment":"","defaults":{"wrap_width":"0.0f","cpu_fine_clip":"false"},"signature":"(ImDrawList*,float,ImVec2,ImU32,const ImVec4,const char*,const char*,float,bool)","cimguiname":"ImFont_RenderText"}],"ImFontAtlas_Build":[{"funcname":"Build","args":"()","ret":"bool","call_args":"()","argsoriginal":"()","stname":"ImFontAtlas","comment":" // Build pixels data. This is called automatically for you by the GetTexData*** functions.","defaults":[],"signature":"()","cimguiname":"ImFontAtlas_Build"}],"igSliderFloat4":[{"funcname":"SliderFloat4","args":"(const char* label,float v[4],float v_min,float v_max,const char* format,float power)","ret":"bool","call_args":"(label,v,v_min,v_max,format,power)","argsoriginal":"(const char* label,float v[4],float v_min,float v_max,const char* format=\"%.3f\",float power=1.0f)","stname":"ImGui","comment":"","defaults":{"power":"1.0f","format":"\"%.3f\""},"signature":"(const char*,float[4],float,float,const char*,float)","cimguiname":"igSliderFloat4"}],"ImFont_FindGlyph":[{"funcname":"FindGlyph","args":"(ImWchar c)","ret":"const ImFontGlyph*","call_args":"(c)","argsoriginal":"(ImWchar c)","stname":"ImFont","comment":"","defaults":[],"signature":"(ImWchar)","cimguiname":"ImFont_FindGlyph"}],"igLogFinish":[{"funcname":"LogFinish","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // stop logging (close file, etc.)","defaults":[],"signature":"()","cimguiname":"igLogFinish"}],"igIsKeyPressed":[{"funcname":"IsKeyPressed","args":"(int user_key_index,bool repeat)","ret":"bool","call_args":"(user_key_index,repeat)","argsoriginal":"(int user_key_index,bool repeat=true)","stname":"ImGui","comment":" // was key pressed (went from !Down to Down). if repeat=true, uses io.KeyRepeatDelay / KeyRepeatRate","defaults":{"repeat":"true"},"signature":"(int,bool)","cimguiname":"igIsKeyPressed"}],"igGetColumnOffset":[{"funcname":"GetColumnOffset","args":"(int column_index)","ret":"float","call_args":"(column_index)","argsoriginal":"(int column_index=-1)","stname":"ImGui","comment":" // get position of column line (in pixels, from the left side of the contents region). pass -1 to use current column, otherwise 0..GetColumnsCount() inclusive. column 0 is typically 0.0f","defaults":{"column_index":"-1"},"signature":"(int)","cimguiname":"igGetColumnOffset"}],"ImDrawList_PopClipRect":[{"funcname":"PopClipRect","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImDrawList","comment":"","defaults":[],"signature":"()","cimguiname":"ImDrawList_PopClipRect"}],"ImFont_CalcWordWrapPositionA":[{"funcname":"CalcWordWrapPositionA","args":"(float scale,const char* text,const char* text_end,float wrap_width)","ret":"const char*","call_args":"(scale,text,text_end,wrap_width)","argsoriginal":"(float scale,const char* text,const char* text_end,float wrap_width)","stname":"ImFont","comment":"","defaults":[],"signature":"(float,const char*,const char*,float)","cimguiname":"ImFont_CalcWordWrapPositionA"}],"igSetNextWindowCollapsed":[{"funcname":"SetNextWindowCollapsed","args":"(bool collapsed,ImGuiCond cond)","ret":"void","call_args":"(collapsed,cond)","argsoriginal":"(bool collapsed,ImGuiCond cond=0)","stname":"ImGui","comment":" // set next window collapsed state. call before Begin()","defaults":{"cond":"0"},"signature":"(bool,ImGuiCond)","cimguiname":"igSetNextWindowCollapsed"}],"igGetCurrentContext":[{"funcname":"GetCurrentContext","args":"()","ret":"ImGuiContext*","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":"","defaults":[],"signature":"()","cimguiname":"igGetCurrentContext"}],"igSmallButton":[{"funcname":"SmallButton","args":"(const char* label)","ret":"bool","call_args":"(label)","argsoriginal":"(const char* label)","stname":"ImGui","comment":" // button with FramePadding=(0,0) to easily embed within text","defaults":[],"signature":"(const char*)","cimguiname":"igSmallButton"}],"igOpenPopupOnItemClick":[{"funcname":"OpenPopupOnItemClick","args":"(const char* str_id,int mouse_button)","ret":"bool","call_args":"(str_id,mouse_button)","argsoriginal":"(const char* str_id=((void *)0),int mouse_button=1)","stname":"ImGui","comment":" // helper to open popup when clicked on last item. return true when just opened.","defaults":{"mouse_button":"1","str_id":"((void *)0)"},"signature":"(const char*,int)","cimguiname":"igOpenPopupOnItemClick"}],"igIsAnyMouseDown":[{"funcname":"IsAnyMouseDown","args":"()","ret":"bool","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // is any mouse button held","defaults":[],"signature":"()","cimguiname":"igIsAnyMouseDown"}],"ImFont_CalcTextSizeA":[{"funcname":"CalcTextSizeA","args":"(float size,float max_width,float wrap_width,const char* text_begin,const char* text_end,const char** remaining)","ret":"ImVec2","call_args":"(size,max_width,wrap_width,text_begin,text_end,remaining)","argsoriginal":"(float size,float max_width,float wrap_width,const char* text_begin,const char* text_end=((void *)0),const char** remaining=((void *)0))","stname":"ImFont","comment":" // utf8","defaults":{"text_end":"((void *)0)","remaining":"((void *)0)"},"signature":"(float,float,float,const char*,const char*,const char**)","cimguiname":"ImFont_CalcTextSizeA"}],"GlyphRangesBuilder_SetBit":[{"funcname":"SetBit","args":"(int n)","ret":"void","call_args":"(n)","argsoriginal":"(int n)","stname":"GlyphRangesBuilder","comment":" // Set bit 'c' in the array","defaults":[],"signature":"(int)","cimguiname":"GlyphRangesBuilder_SetBit"}],"ImFont_IsLoaded":[{"funcname":"IsLoaded","args":"()","ret":"bool","call_args":"()","argsoriginal":"()","stname":"ImFont","comment":"","defaults":[],"signature":"()","cimguiname":"ImFont_IsLoaded"}],"ImFont_GetCharAdvance":[{"funcname":"GetCharAdvance","args":"(ImWchar c)","ret":"float","call_args":"(c)","argsoriginal":"(ImWchar c)","stname":"ImFont","comment":"","defaults":[],"signature":"(ImWchar)","cimguiname":"ImFont_GetCharAdvance"}],"ImFont_SetFallbackChar":[{"funcname":"SetFallbackChar","args":"(ImWchar c)","ret":"void","call_args":"(c)","argsoriginal":"(ImWchar c)","stname":"ImFont","comment":"","defaults":[],"signature":"(ImWchar)","cimguiname":"ImFont_SetFallbackChar"}],"igImageButton":[{"funcname":"ImageButton","args":"(ImTextureID user_texture_id,const ImVec2 size,const ImVec2 uv0,const ImVec2 uv1,int frame_padding,const ImVec4 bg_col,const ImVec4 tint_col)","ret":"bool","call_args":"(user_texture_id,size,uv0,uv1,frame_padding,bg_col,tint_col)","argsoriginal":"(ImTextureID user_texture_id,const ImVec2& size,const ImVec2& uv0=ImVec2(0,0),const ImVec2& uv1=ImVec2(1,1),int frame_padding=-1,const ImVec4& bg_col=ImVec4(0,0,0,0),const ImVec4& tint_col=ImVec4(1,1,1,1))","stname":"ImGui","comment":" // <0 frame_padding uses default frame padding settings. 0 for no padding","defaults":{"uv1":"ImVec2(1,1)","bg_col":"ImVec4(0,0,0,0)","uv0":"ImVec2(0,0)","frame_padding":"-1","tint_col":"ImVec4(1,1,1,1)"},"signature":"(ImTextureID,const ImVec2,const ImVec2,const ImVec2,int,const ImVec4,const ImVec4)","cimguiname":"igImageButton"}],"ImFont_FindGlyphNoFallback":[{"funcname":"FindGlyphNoFallback","args":"(ImWchar c)","ret":"const ImFontGlyph*","call_args":"(c)","argsoriginal":"(ImWchar c)","stname":"ImFont","comment":"","defaults":[],"signature":"(ImWchar)","cimguiname":"ImFont_FindGlyphNoFallback"}],"igEndFrame":[{"funcname":"EndFrame","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // ends the ImGui frame. automatically called by Render(), you likely don't need to call that yourself directly. If you don't need to render data (skipping rendering) you may call EndFrame() but you'll have wasted CPU already! If you don't need to render, better to not create any imgui windows and not call NewFrame() at all!","defaults":[],"signature":"()","cimguiname":"igEndFrame"}],"igSliderFloat2":[{"funcname":"SliderFloat2","args":"(const char* label,float v[2],float v_min,float v_max,const char* format,float power)","ret":"bool","call_args":"(label,v,v_min,v_max,format,power)","argsoriginal":"(const char* label,float v[2],float v_min,float v_max,const char* format=\"%.3f\",float power=1.0f)","stname":"ImGui","comment":"","defaults":{"power":"1.0f","format":"\"%.3f\""},"signature":"(const char*,float[2],float,float,const char*,float)","cimguiname":"igSliderFloat2"}],"ImFont_RenderChar":[{"funcname":"RenderChar","args":"(ImDrawList* draw_list,float size,ImVec2 pos,ImU32 col,unsigned short c)","ret":"void","call_args":"(draw_list,size,pos,col,c)","argsoriginal":"(ImDrawList* draw_list,float size,ImVec2 pos,ImU32 col,unsigned short c)","stname":"ImFont","comment":"","defaults":[],"signature":"(ImDrawList*,float,ImVec2,ImU32,unsigned short)","cimguiname":"ImFont_RenderChar"}],"igRadioButton":[{"funcname":"RadioButton","args":"(const char* label,bool active)","ret":"bool","call_args":"(label,active)","argsoriginal":"(const char* label,bool active)","stname":"ImGui","comment":"","ov_cimguiname":"igRadioButtonBool","defaults":[],"signature":"(const char*,bool)","cimguiname":"igRadioButton"},{"funcname":"RadioButton","args":"(const char* label,int* v,int v_button)","ret":"bool","call_args":"(label,v,v_button)","argsoriginal":"(const char* label,int* v,int v_button)","stname":"ImGui","comment":"","ov_cimguiname":"igRadioButtonIntPtr","defaults":[],"signature":"(const char*,int*,int)","cimguiname":"igRadioButton"}],"ImDrawList_PushClipRect":[{"funcname":"PushClipRect","args":"(ImVec2 clip_rect_min,ImVec2 clip_rect_max,bool intersect_with_current_clip_rect)","ret":"void","call_args":"(clip_rect_min,clip_rect_max,intersect_with_current_clip_rect)","argsoriginal":"(ImVec2 clip_rect_min,ImVec2 clip_rect_max,bool intersect_with_current_clip_rect=false)","stname":"ImDrawList","comment":" // Render-level scissoring. This is passed down to your render function but not used for CPU-side coarse clipping. Prefer using higher-level ImGui::PushClipRect() to affect logic (hit-testing and widget culling)","defaults":{"intersect_with_current_clip_rect":"false"},"signature":"(ImVec2,ImVec2,bool)","cimguiname":"ImDrawList_PushClipRect"}],"ImGuiTextEditCallbackData_DeleteChars":[{"funcname":"DeleteChars","args":"(int pos,int bytes_count)","ret":"void","call_args":"(pos,bytes_count)","argsoriginal":"(int pos,int bytes_count)","stname":"ImGuiTextEditCallbackData","comment":"","defaults":[],"signature":"(int,int)","cimguiname":"ImGuiTextEditCallbackData_DeleteChars"}],"igInputScalarN":[{"funcname":"InputScalarN","args":"(const char* label,ImGuiDataType data_type,void* v,int components,const void* step,const void* step_fast,const char* format,ImGuiInputTextFlags extra_flags)","ret":"bool","call_args":"(label,data_type,v,components,step,step_fast,format,extra_flags)","argsoriginal":"(const char* label,ImGuiDataType data_type,void* v,int components,const void* step=((void *)0),const void* step_fast=((void *)0),const char* format=((void *)0),ImGuiInputTextFlags extra_flags=0)","stname":"ImGui","comment":"","defaults":{"step":"((void *)0)","format":"((void *)0)","step_fast":"((void *)0)","extra_flags":"0"},"signature":"(const char*,ImGuiDataType,void*,int,const void*,const void*,const char*,ImGuiInputTextFlags)","cimguiname":"igInputScalarN"}],"igGetWindowDrawList":[{"funcname":"GetWindowDrawList","args":"()","ret":"ImDrawList*","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // get draw list associated to the window, to append your own drawing primitives","defaults":[],"signature":"()","cimguiname":"igGetWindowDrawList"}],"ImFontAtlas_~ImFontAtlas":[{"funcname":"~ImFontAtlas","args":"()","call_args":"()","argsoriginal":"()","stname":"ImFontAtlas","comment":"","defaults":[],"signature":"()","cimguiname":"ImFontAtlas_~ImFontAtlas"}],"ImDrawList_PathBezierCurveTo":[{"funcname":"PathBezierCurveTo","args":"(const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,int num_segments)","ret":"void","call_args":"(p1,p2,p3,num_segments)","argsoriginal":"(const ImVec2& p1,const ImVec2& p2,const ImVec2& p3,int num_segments=0)","stname":"ImDrawList","comment":"","defaults":{"num_segments":"0"},"signature":"(const ImVec2,const ImVec2,const ImVec2,int)","cimguiname":"ImDrawList_PathBezierCurveTo"}],"ImGuiPayload_Clear":[{"funcname":"Clear","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImGuiPayload","comment":"","defaults":[],"signature":"()","cimguiname":"ImGuiPayload_Clear"}],"igInputInt2":[{"funcname":"InputInt2","args":"(const char* label,int v[2],ImGuiInputTextFlags extra_flags)","ret":"bool","call_args":"(label,v,extra_flags)","argsoriginal":"(const char* label,int v[2],ImGuiInputTextFlags extra_flags=0)","stname":"ImGui","comment":"","defaults":{"extra_flags":"0"},"signature":"(const char*,int[2],ImGuiInputTextFlags)","cimguiname":"igInputInt2"}],"igIsItemFocused":[{"funcname":"IsItemFocused","args":"()","ret":"bool","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // is the last item focused for keyboard/gamepad navigation?","defaults":[],"signature":"()","cimguiname":"igIsItemFocused"}],"igSaveIniSettingsToDisk":[{"funcname":"SaveIniSettingsToDisk","args":"(const char* ini_filename)","ret":"void","call_args":"(ini_filename)","argsoriginal":"(const char* ini_filename)","stname":"ImGui","comment":"","defaults":[],"signature":"(const char*)","cimguiname":"igSaveIniSettingsToDisk"}],"igSliderInt2":[{"funcname":"SliderInt2","args":"(const char* label,int v[2],int v_min,int v_max,const char* format)","ret":"bool","call_args":"(label,v,v_min,v_max,format)","argsoriginal":"(const char* label,int v[2],int v_min,int v_max,const char* format=\"%d\")","stname":"ImGui","comment":"","defaults":{"format":"\"%d\""},"signature":"(const char*,int[2],int,int,const char*)","cimguiname":"igSliderInt2"}],"ImFont_~ImFont":[{"funcname":"~ImFont","args":"()","call_args":"()","argsoriginal":"()","stname":"ImFont","comment":"","defaults":[],"signature":"()","cimguiname":"ImFont_~ImFont"}],"igSetWindowSize":[{"funcname":"SetWindowSize","args":"(const ImVec2 size,ImGuiCond cond)","ret":"void","call_args":"(size,cond)","argsoriginal":"(const ImVec2& size,ImGuiCond cond=0)","stname":"ImGui","comment":" // (not recommended) set current window size - call within Begin()/End(). set to ImVec2(0,0) to force an auto-fit. prefer using SetNextWindowSize(), as this may incur tearing and minor side-effects.","ov_cimguiname":"igSetWindowSizeVec2","defaults":{"cond":"0"},"signature":"(const ImVec2,ImGuiCond)","cimguiname":"igSetWindowSize"},{"funcname":"SetWindowSize","args":"(const char* name,const ImVec2 size,ImGuiCond cond)","ret":"void","call_args":"(name,size,cond)","argsoriginal":"(const char* name,const ImVec2& size,ImGuiCond cond=0)","stname":"ImGui","comment":" // set named window size. set axis to 0.0f to force an auto-fit on this axis.","ov_cimguiname":"igSetWindowSizeStr","defaults":{"cond":"0"},"signature":"(const char*,const ImVec2,ImGuiCond)","cimguiname":"igSetWindowSize"}],"igInputFloat":[{"funcname":"InputFloat","args":"(const char* label,float* v,float step,float step_fast,const char* format,ImGuiInputTextFlags extra_flags)","ret":"bool","call_args":"(label,v,step,step_fast,format,extra_flags)","argsoriginal":"(const char* label,float* v,float step=0.0f,float step_fast=0.0f,const char* format=\"%.3f\",ImGuiInputTextFlags extra_flags=0)","stname":"ImGui","comment":"","defaults":{"step":"0.0f","format":"\"%.3f\"","step_fast":"0.0f","extra_flags":"0"},"signature":"(const char*,float*,float,float,const char*,ImGuiInputTextFlags)","cimguiname":"igInputFloat"}],"ImFont_ImFont":[{"funcname":"ImFont","args":"()","call_args":"()","argsoriginal":"()","stname":"ImFont","comment":"","defaults":[],"signature":"()","cimguiname":"ImFont_ImFont"}],"ImGuiTextEditCallbackData_InsertChars":[{"funcname":"InsertChars","args":"(int pos,const char* text,const char* text_end)","ret":"void","call_args":"(pos,text,text_end)","argsoriginal":"(int pos,const char* text,const char* text_end=((void *)0))","stname":"ImGuiTextEditCallbackData","comment":"","defaults":{"text_end":"((void *)0)"},"signature":"(int,const char*,const char*)","cimguiname":"ImGuiTextEditCallbackData_InsertChars"}],"igColorConvertRGBtoHSV":[{"funcname":"ColorConvertRGBtoHSV","args":"(float r,float g,float b,float out_h,float out_s,float out_v)","ret":"void","call_args":"(r,g,b,out_h,out_s,out_v)","argsoriginal":"(float r,float g,float b,float& out_h,float& out_s,float& out_v)","stname":"ImGui","comment":"","defaults":[],"signature":"(float,float,float,float,float,float)","cimguiname":"igColorConvertRGBtoHSV"}],"igBeginMenuBar":[{"funcname":"BeginMenuBar","args":"()","ret":"bool","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // append to menu-bar of current window (requires ImGuiWindowFlags_MenuBar flag set on parent window).","defaults":[],"signature":"()","cimguiname":"igBeginMenuBar"}],"igTextColoredV":[{"funcname":"TextColoredV","args":"(const ImVec4 col,const char* fmt,va_list args)","ret":"void","call_args":"(col,fmt,args)","argsoriginal":"(const ImVec4& col,const char* fmt,va_list args)","stname":"ImGui","comment":"","defaults":[],"signature":"(const ImVec4,const char*,va_list)","cimguiname":"igTextColoredV"}],"igIsPopupOpen":[{"funcname":"IsPopupOpen","args":"(const char* str_id)","ret":"bool","call_args":"(str_id)","argsoriginal":"(const char* str_id)","stname":"ImGui","comment":" // return true if the popup is open","defaults":[],"signature":"(const char*)","cimguiname":"igIsPopupOpen"}],"igIsItemVisible":[{"funcname":"IsItemVisible","args":"()","ret":"bool","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // is the last item visible? (items may be out of sight because of clipping/scrolling)","defaults":[],"signature":"()","cimguiname":"igIsItemVisible"}],"ImFontAtlas_CalcCustomRectUV":[{"funcname":"CalcCustomRectUV","args":"(const CustomRect* rect,ImVec2* out_uv_min,ImVec2* out_uv_max)","ret":"void","call_args":"(rect,out_uv_min,out_uv_max)","argsoriginal":"(const CustomRect* rect,ImVec2* out_uv_min,ImVec2* out_uv_max)","stname":"ImFontAtlas","comment":"","defaults":[],"signature":"(const CustomRect*,ImVec2*,ImVec2*)","cimguiname":"ImFontAtlas_CalcCustomRectUV"}],"igTextWrappedV":[{"funcname":"TextWrappedV","args":"(const char* fmt,va_list args)","ret":"void","call_args":"(fmt,args)","argsoriginal":"(const char* fmt,va_list args)","stname":"ImGui","comment":"","defaults":[],"signature":"(const char*,va_list)","cimguiname":"igTextWrappedV"}],"ImFontAtlas_GetCustomRectByIndex":[{"funcname":"GetCustomRectByIndex","args":"(int index)","ret":"const CustomRect*","call_args":"(index)","argsoriginal":"(int index)","stname":"ImFontAtlas","comment":"","defaults":[],"signature":"(int)","cimguiname":"ImFontAtlas_GetCustomRectByIndex"}],"GlyphRangesBuilder_AddText":[{"funcname":"AddText","args":"(const char* text,const char* text_end)","ret":"void","call_args":"(text,text_end)","argsoriginal":"(const char* text,const char* text_end=((void *)0))","stname":"GlyphRangesBuilder","comment":" // Add string (each character of the UTF-8 string are added)","defaults":{"text_end":"((void *)0)"},"signature":"(const char*,const char*)","cimguiname":"GlyphRangesBuilder_AddText"}],"TextRange_is_blank":[{"funcname":"is_blank","args":"(char c)","ret":"bool","call_args":"(c)","argsoriginal":"(char c)","stname":"TextRange","comment":"","defaults":[],"signature":"(char)","cimguiname":"TextRange_is_blank"}],"igSetScrollX":[{"funcname":"SetScrollX","args":"(float scroll_x)","ret":"void","call_args":"(scroll_x)","argsoriginal":"(float scroll_x)","stname":"ImGui","comment":" // set scrolling amount [0..GetScrollMaxX()]","defaults":[],"signature":"(float)","cimguiname":"igSetScrollX"}],"ImFontAtlas_AddCustomRectRegular":[{"funcname":"AddCustomRectRegular","args":"(unsigned int id,int width,int height)","ret":"int","call_args":"(id,width,height)","argsoriginal":"(unsigned int id,int width,int height)","stname":"ImFontAtlas","comment":" // Id needs to be >= 0x10000. Id >= 0x80000000 are reserved for ImGui and ImDrawList","defaults":[],"signature":"(unsigned int,int,int)","cimguiname":"ImFontAtlas_AddCustomRectRegular"}],"igSetWindowCollapsed":[{"funcname":"SetWindowCollapsed","args":"(bool collapsed,ImGuiCond cond)","ret":"void","call_args":"(collapsed,cond)","argsoriginal":"(bool collapsed,ImGuiCond cond=0)","stname":"ImGui","comment":" // (not recommended) set current window collapsed state. prefer using SetNextWindowCollapsed().","ov_cimguiname":"igSetWindowCollapsedBool","defaults":{"cond":"0"},"signature":"(bool,ImGuiCond)","cimguiname":"igSetWindowCollapsed"},{"funcname":"SetWindowCollapsed","args":"(const char* name,bool collapsed,ImGuiCond cond)","ret":"void","call_args":"(name,collapsed,cond)","argsoriginal":"(const char* name,bool collapsed,ImGuiCond cond=0)","stname":"ImGui","comment":" // set named window collapsed state","ov_cimguiname":"igSetWindowCollapsedStr","defaults":{"cond":"0"},"signature":"(const char*,bool,ImGuiCond)","cimguiname":"igSetWindowCollapsed"}],"igGetMouseDragDelta":[{"funcname":"GetMouseDragDelta","args":"(int button,float lock_threshold)","ret":"ImVec2","call_args":"(button,lock_threshold)","argsoriginal":"(int button=0,float lock_threshold=-1.0f)","stname":"ImGui","comment":" // dragging amount since clicking. if lock_threshold < -1.0f uses io.MouseDraggingThreshold","defaults":{"lock_threshold":"-1.0f","button":"0"},"signature":"(int,float)","cimguiname":"igGetMouseDragDelta"}],"igAcceptDragDropPayload":[{"funcname":"AcceptDragDropPayload","args":"(const char* type,ImGuiDragDropFlags flags)","ret":"const ImGuiPayload*","call_args":"(type,flags)","argsoriginal":"(const char* type,ImGuiDragDropFlags flags=0)","stname":"ImGui","comment":" // accept contents of a given type. If ImGuiDragDropFlags_AcceptBeforeDelivery is set you can peek into the payload before the mouse button is released.","defaults":{"flags":"0"},"signature":"(const char*,ImGuiDragDropFlags)","cimguiname":"igAcceptDragDropPayload"}],"igBeginDragDropSource":[{"funcname":"BeginDragDropSource","args":"(ImGuiDragDropFlags flags)","ret":"bool","call_args":"(flags)","argsoriginal":"(ImGuiDragDropFlags flags=0)","stname":"ImGui","comment":" // call when the current item is active. If this return true, you can call SetDragDropPayload() + EndDragDropSource()","defaults":{"flags":"0"},"signature":"(ImGuiDragDropFlags)","cimguiname":"igBeginDragDropSource"}],"CustomRect_IsPacked":[{"funcname":"IsPacked","args":"()","ret":"bool","call_args":"()","argsoriginal":"()","stname":"CustomRect","comment":"","defaults":[],"signature":"()","cimguiname":"CustomRect_IsPacked"}],"igPlotLines":[{"funcname":"PlotLines","args":"(const char* label,const float* values,int values_count,int values_offset,const char* overlay_text,float scale_min,float scale_max,ImVec2 graph_size,int stride)","ret":"void","call_args":"(label,values,values_count,values_offset,overlay_text,scale_min,scale_max,graph_size,stride)","argsoriginal":"(const char* label,const float* values,int values_count,int values_offset=0,const char* overlay_text=((void *)0),float scale_min=3.40282346638528859812e+38F,float scale_max=3.40282346638528859812e+38F,ImVec2 graph_size=ImVec2(0,0),int stride=sizeof(float))","stname":"ImGui","comment":"","ov_cimguiname":"igPlotLines","defaults":{"overlay_text":"((void *)0)","stride":"sizeof(float)","values_offset":"0","graph_size":"ImVec2(0,0)"},"signature":"(const char*,const float*,int,int,const char*,float,float,ImVec2,int)","cimguiname":"igPlotLines"},{"funcname":"PlotLines","args":"(const char* label,float(*values_getter)(void* data,int idx),void* data,int values_count,int values_offset,const char* overlay_text,float scale_min,float scale_max,ImVec2 graph_size)","ret":"void","call_args":"(label,values_getter,data,values_count,values_offset,overlay_text,scale_min,scale_max,graph_size)","argsoriginal":"(const char* label,float(*values_getter)(void* data,int idx),void* data,int values_count,int values_offset=0,const char* overlay_text=((void *)0),float scale_min=3.40282346638528859812e+38F,float scale_max=3.40282346638528859812e+38F,ImVec2 graph_size=ImVec2(0,0))","stname":"ImGui","comment":"","ov_cimguiname":"igPlotLinesFnPtr","defaults":{"overlay_text":"((void *)0)","values_offset":"0","graph_size":"ImVec2(0,0)"},"signature":"(const char*,float(*)(void*,int),void*,int,int,const char*,float,float,ImVec2)","cimguiname":"igPlotLines"}],"ImFontAtlas_IsBuilt":[{"funcname":"IsBuilt","args":"()","ret":"bool","call_args":"()","argsoriginal":"()","stname":"ImFontAtlas","comment":"","defaults":[],"signature":"()","cimguiname":"ImFontAtlas_IsBuilt"}],"ImVec2_ImVec2":[{"funcname":"ImVec2","args":"()","call_args":"()","argsoriginal":"()","stname":"ImVec2","comment":"","ov_cimguiname":"ImVec2_ImVec2","defaults":[],"signature":"()","cimguiname":"ImVec2_ImVec2"},{"funcname":"ImVec2","args":"(float _x,float _y)","call_args":"(_x,_y)","argsoriginal":"(float _x,float _y)","stname":"ImVec2","comment":"","ov_cimguiname":"ImVec2_ImVec2Float","defaults":[],"signature":"(float,float)","cimguiname":"ImVec2_ImVec2"}],"ImGuiPayload_IsDataType":[{"funcname":"IsDataType","args":"(const char* type)","ret":"bool","call_args":"(type)","argsoriginal":"(const char* type)","stname":"ImGuiPayload","comment":"","defaults":[],"signature":"(const char*)","cimguiname":"ImGuiPayload_IsDataType"}],"ImDrawList_Clear":[{"funcname":"Clear","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImDrawList","comment":"","defaults":[],"signature":"()","cimguiname":"ImDrawList_Clear"}],"GlyphRangesBuilder_AddRanges":[{"funcname":"AddRanges","args":"(const ImWchar* ranges)","ret":"void","call_args":"(ranges)","argsoriginal":"(const ImWchar* ranges)","stname":"GlyphRangesBuilder","comment":" // Add ranges, e.g. builder.AddRanges(ImFontAtlas::GetGlyphRangesDefault()) to force add all of ASCII/Latin+Ext","defaults":[],"signature":"(const ImWchar*)","cimguiname":"GlyphRangesBuilder_AddRanges"}],"igGetMousePos":[{"funcname":"GetMousePos","args":"()","ret":"ImVec2","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // shortcut to ImGui::GetIO().MousePos provided by user, to be consistent with other calls","defaults":[],"signature":"()","cimguiname":"igGetMousePos"}],"ImFont_GetDebugName":[{"funcname":"GetDebugName","args":"()","ret":"const char*","call_args":"()","argsoriginal":"()","stname":"ImFont","comment":"","defaults":[],"signature":"()","cimguiname":"ImFont_GetDebugName"}],"igListBoxFooter":[{"funcname":"ListBoxFooter","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // terminate the scrolling region. only call ListBoxFooter() if ListBoxHeader() returned true!","defaults":[],"signature":"()","cimguiname":"igListBoxFooter"}],"igPopClipRect":[{"funcname":"PopClipRect","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":"","defaults":[],"signature":"()","cimguiname":"igPopClipRect"}],"ImDrawList_AddBezierCurve":[{"funcname":"AddBezierCurve","args":"(const ImVec2 pos0,const ImVec2 cp0,const ImVec2 cp1,const ImVec2 pos1,ImU32 col,float thickness,int num_segments)","ret":"void","call_args":"(pos0,cp0,cp1,pos1,col,thickness,num_segments)","argsoriginal":"(const ImVec2& pos0,const ImVec2& cp0,const ImVec2& cp1,const ImVec2& pos1,ImU32 col,float thickness,int num_segments=0)","stname":"ImDrawList","comment":"","defaults":{"num_segments":"0"},"signature":"(const ImVec2,const ImVec2,const ImVec2,const ImVec2,ImU32,float,int)","cimguiname":"ImDrawList_AddBezierCurve"}],"GlyphRangesBuilder_GlyphRangesBuilder":[{"funcname":"GlyphRangesBuilder","args":"()","call_args":"()","argsoriginal":"()","stname":"GlyphRangesBuilder","comment":"","defaults":[],"signature":"()","cimguiname":"GlyphRangesBuilder_GlyphRangesBuilder"}],"igGetWindowSize":[{"funcname":"GetWindowSize","args":"()","ret":"ImVec2","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // get current window size","defaults":[],"signature":"()","cimguiname":"igGetWindowSize"}],"ImFontAtlas_GetGlyphRangesThai":[{"funcname":"GetGlyphRangesThai","args":"()","ret":"const ImWchar*","call_args":"()","argsoriginal":"()","stname":"ImFontAtlas","comment":" // Default + Thai characters","defaults":[],"signature":"()","cimguiname":"ImFontAtlas_GetGlyphRangesThai"}],"igCheckboxFlags":[{"funcname":"CheckboxFlags","args":"(const char* label,unsigned int* flags,unsigned int flags_value)","ret":"bool","call_args":"(label,flags,flags_value)","argsoriginal":"(const char* label,unsigned int* flags,unsigned int flags_value)","stname":"ImGui","comment":"","defaults":[],"signature":"(const char*,unsigned int*,unsigned int)","cimguiname":"igCheckboxFlags"}],"ImFontAtlas_GetGlyphRangesCyrillic":[{"funcname":"GetGlyphRangesCyrillic","args":"()","ret":"const ImWchar*","call_args":"()","argsoriginal":"()","stname":"ImFontAtlas","comment":" // Default + about 400 Cyrillic characters","defaults":[],"signature":"()","cimguiname":"ImFontAtlas_GetGlyphRangesCyrillic"}],"igIsWindowHovered":[{"funcname":"IsWindowHovered","args":"(ImGuiHoveredFlags flags)","ret":"bool","call_args":"(flags)","argsoriginal":"(ImGuiHoveredFlags flags=0)","stname":"ImGui","comment":" // is current window hovered (and typically: not blocked by a popup/modal)? see flags for options. NB: If you are trying to check whether your mouse should be dispatched to imgui or to your app, you should use the 'io.WantCaptureMouse' boolean for that! Please read the FAQ!","defaults":{"flags":"0"},"signature":"(ImGuiHoveredFlags)","cimguiname":"igIsWindowHovered"}],"ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon":[{"funcname":"GetGlyphRangesChineseSimplifiedCommon","args":"()","ret":"const ImWchar*","call_args":"()","argsoriginal":"()","stname":"ImFontAtlas","comment":"// Default + Half-Width + Japanese Hiragana/Katakana + set of 2500 CJK Unified Ideographs for common simplified Chinese","defaults":[],"signature":"()","cimguiname":"ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon"}],"igPlotHistogram":[{"funcname":"PlotHistogram","args":"(const char* label,const float* values,int values_count,int values_offset,const char* overlay_text,float scale_min,float scale_max,ImVec2 graph_size,int stride)","ret":"void","call_args":"(label,values,values_count,values_offset,overlay_text,scale_min,scale_max,graph_size,stride)","argsoriginal":"(const char* label,const float* values,int values_count,int values_offset=0,const char* overlay_text=((void *)0),float scale_min=3.40282346638528859812e+38F,float scale_max=3.40282346638528859812e+38F,ImVec2 graph_size=ImVec2(0,0),int stride=sizeof(float))","stname":"ImGui","comment":"","ov_cimguiname":"igPlotHistogramFloatPtr","defaults":{"overlay_text":"((void *)0)","stride":"sizeof(float)","values_offset":"0","graph_size":"ImVec2(0,0)"},"signature":"(const char*,const float*,int,int,const char*,float,float,ImVec2,int)","cimguiname":"igPlotHistogram"},{"funcname":"PlotHistogram","args":"(const char* label,float(*values_getter)(void* data,int idx),void* data,int values_count,int values_offset,const char* overlay_text,float scale_min,float scale_max,ImVec2 graph_size)","ret":"void","call_args":"(label,values_getter,data,values_count,values_offset,overlay_text,scale_min,scale_max,graph_size)","argsoriginal":"(const char* label,float(*values_getter)(void* data,int idx),void* data,int values_count,int values_offset=0,const char* overlay_text=((void *)0),float scale_min=3.40282346638528859812e+38F,float scale_max=3.40282346638528859812e+38F,ImVec2 graph_size=ImVec2(0,0))","stname":"ImGui","comment":"","ov_cimguiname":"igPlotHistogramFnPtr","defaults":{"overlay_text":"((void *)0)","values_offset":"0","graph_size":"ImVec2(0,0)"},"signature":"(const char*,float(*)(void*,int),void*,int,int,const char*,float,float,ImVec2)","cimguiname":"igPlotHistogram"}],"igBeginPopupContextVoid":[{"funcname":"BeginPopupContextVoid","args":"(const char* str_id,int mouse_button)","ret":"bool","call_args":"(str_id,mouse_button)","argsoriginal":"(const char* str_id=((void *)0),int mouse_button=1)","stname":"ImGui","comment":" // helper to open and begin popup when clicked in void (where there are no imgui windows).","defaults":{"mouse_button":"1","str_id":"((void *)0)"},"signature":"(const char*,int)","cimguiname":"igBeginPopupContextVoid"}],"ImFontAtlas_GetGlyphRangesChineseFull":[{"funcname":"GetGlyphRangesChineseFull","args":"()","ret":"const ImWchar*","call_args":"()","argsoriginal":"()","stname":"ImFontAtlas","comment":" // Default + Half-Width + Japanese Hiragana/Katakana + full set of about 21000 CJK Unified Ideographs","defaults":[],"signature":"()","cimguiname":"ImFontAtlas_GetGlyphRangesChineseFull"}],"igShowStyleEditor":[{"funcname":"ShowStyleEditor","args":"(ImGuiStyle* ref)","ret":"void","call_args":"(ref)","argsoriginal":"(ImGuiStyle* ref=((void *)0))","stname":"ImGui","comment":" // add style editor block (not a window). you can pass in a reference ImGuiStyle structure to compare to, revert to and save to (else it uses the default style)","defaults":{"ref":"((void *)0)"},"signature":"(ImGuiStyle*)","cimguiname":"igShowStyleEditor"}],"igCheckbox":[{"funcname":"Checkbox","args":"(const char* label,bool* v)","ret":"bool","call_args":"(label,v)","argsoriginal":"(const char* label,bool* v)","stname":"ImGui","comment":"","defaults":[],"signature":"(const char*,bool*)","cimguiname":"igCheckbox"}],"igGetWindowPos":[{"funcname":"GetWindowPos","args":"()","ret":"ImVec2","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // get current window position in screen space (useful if you want to do your own drawing via the DrawList API)","defaults":[],"signature":"()","cimguiname":"igGetWindowPos"}],"igShowStyleSelector":[{"funcname":"ShowStyleSelector","args":"(const char* label)","ret":"bool","call_args":"(label)","argsoriginal":"(const char* label)","stname":"ImGui","comment":" // add style selector block (not a window), essentially a combo listing the default styles.","defaults":[],"signature":"(const char*)","cimguiname":"igShowStyleSelector"}],"igSetColumnOffset":[{"funcname":"SetColumnOffset","args":"(int column_index,float offset_x)","ret":"void","call_args":"(column_index,offset_x)","argsoriginal":"(int column_index,float offset_x)","stname":"ImGui","comment":" // set position of column line (in pixels, from the left side of the contents region). pass -1 to use current column","defaults":[],"signature":"(int,float)","cimguiname":"igSetColumnOffset"}],"TextRange_trim_blanks":[{"funcname":"trim_blanks","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"TextRange","comment":"","defaults":[],"signature":"()","cimguiname":"TextRange_trim_blanks"}],"igTextColored":[{"isvararg":"...)","funcname":"TextColored","args":"(const ImVec4 col,const char* fmt,...)","ret":"void","call_args":"(col,fmt,...)","argsoriginal":"(const ImVec4& col,const char* fmt,...)","stname":"ImGui","comment":" // shortcut for PushStyleColor(ImGuiCol_Text, col); Text(fmt, ...); PopStyleColor();","defaults":[],"signature":"(const ImVec4,const char*,...)","cimguiname":"igTextColored"}],"igLogToFile":[{"funcname":"LogToFile","args":"(int max_depth,const char* filename)","ret":"void","call_args":"(max_depth,filename)","argsoriginal":"(int max_depth=-1,const char* filename=((void *)0))","stname":"ImGui","comment":" // start logging to file","defaults":{"filename":"((void *)0)","max_depth":"-1"},"signature":"(int,const char*)","cimguiname":"igLogToFile"}],"igButton":[{"funcname":"Button","args":"(const char* label,const ImVec2 size)","ret":"bool","call_args":"(label,size)","argsoriginal":"(const char* label,const ImVec2& size=ImVec2(0,0))","stname":"ImGui","comment":" // button","defaults":{"size":"ImVec2(0,0)"},"signature":"(const char*,const ImVec2)","cimguiname":"igButton"}],"ImGuiStorage_GetBool":[{"funcname":"GetBool","args":"(ImGuiID key,bool default_val)","ret":"bool","call_args":"(key,default_val)","argsoriginal":"(ImGuiID key,bool default_val=false)","stname":"ImGuiStorage","comment":"","defaults":{"default_val":"false"},"signature":"(ImGuiID,bool)","cimguiname":"ImGuiStorage_GetBool"}],"igTreeNodeExV":[{"funcname":"TreeNodeExV","args":"(const char* str_id,ImGuiTreeNodeFlags flags,const char* fmt,va_list args)","ret":"bool","call_args":"(str_id,flags,fmt,args)","argsoriginal":"(const char* str_id,ImGuiTreeNodeFlags flags,const char* fmt,va_list args)","stname":"ImGui","comment":"","ov_cimguiname":"igTreeNodeExVStr","defaults":[],"signature":"(const char*,ImGuiTreeNodeFlags,const char*,va_list)","cimguiname":"igTreeNodeExV"},{"funcname":"TreeNodeExV","args":"(const void* ptr_id,ImGuiTreeNodeFlags flags,const char* fmt,va_list args)","ret":"bool","call_args":"(ptr_id,flags,fmt,args)","argsoriginal":"(const void* ptr_id,ImGuiTreeNodeFlags flags,const char* fmt,va_list args)","stname":"ImGui","comment":"","ov_cimguiname":"igTreeNodeExVPtr","defaults":[],"signature":"(const void*,ImGuiTreeNodeFlags,const char*,va_list)","cimguiname":"igTreeNodeExV"}],"ImDrawList_PushTextureID":[{"funcname":"PushTextureID","args":"(ImTextureID texture_id)","ret":"void","call_args":"(texture_id)","argsoriginal":"(ImTextureID texture_id)","stname":"ImDrawList","comment":"","defaults":[],"signature":"(ImTextureID)","cimguiname":"ImDrawList_PushTextureID"}],"igTreeAdvanceToLabelPos":[{"funcname":"TreeAdvanceToLabelPos","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // advance cursor x position by GetTreeNodeToLabelSpacing()","defaults":[],"signature":"()","cimguiname":"igTreeAdvanceToLabelPos"}],"ImFontAtlas_GetGlyphRangesDefault":[{"funcname":"GetGlyphRangesDefault","args":"()","ret":"const ImWchar*","call_args":"()","argsoriginal":"()","stname":"ImFontAtlas","comment":" // Basic Latin, Extended Latin","defaults":[],"signature":"()","cimguiname":"ImFontAtlas_GetGlyphRangesDefault"}],"igDragInt2":[{"funcname":"DragInt2","args":"(const char* label,int v[2],float v_speed,int v_min,int v_max,const char* format)","ret":"bool","call_args":"(label,v,v_speed,v_min,v_max,format)","argsoriginal":"(const char* label,int v[2],float v_speed=1.0f,int v_min=0,int v_max=0,const char* format=\"%d\")","stname":"ImGui","comment":"","defaults":{"v_speed":"1.0f","v_min":"0","format":"\"%d\"","v_max":"0"},"signature":"(const char*,int[2],float,int,int,const char*)","cimguiname":"igDragInt2"}],"ImFontAtlas_SetTexID":[{"funcname":"SetTexID","args":"(ImTextureID id)","ret":"void","call_args":"(id)","argsoriginal":"(ImTextureID id)","stname":"ImFontAtlas","comment":"","defaults":[],"signature":"(ImTextureID)","cimguiname":"ImFontAtlas_SetTexID"}],"igIsAnyItemActive":[{"funcname":"IsAnyItemActive","args":"()","ret":"bool","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":"","defaults":[],"signature":"()","cimguiname":"igIsAnyItemActive"}],"igShowFontSelector":[{"funcname":"ShowFontSelector","args":"(const char* label)","ret":"void","call_args":"(label)","argsoriginal":"(const char* label)","stname":"ImGui","comment":" // add font selector block (not a window), essentially a combo listing the loaded fonts.","defaults":[],"signature":"(const char*)","cimguiname":"igShowFontSelector"}],"igInputText":[{"funcname":"InputText","args":"(const char* label,char* buf,size_t buf_size,ImGuiInputTextFlags flags,ImGuiTextEditCallback callback,void* user_data)","ret":"bool","call_args":"(label,buf,buf_size,flags,callback,user_data)","argsoriginal":"(const char* label,char* buf,size_t buf_size,ImGuiInputTextFlags flags=0,ImGuiTextEditCallback callback=((void *)0),void* user_data=((void *)0))","stname":"ImGui","comment":"","defaults":{"callback":"((void *)0)","user_data":"((void *)0)","flags":"0"},"signature":"(const char*,char*,size_t,ImGuiInputTextFlags,ImGuiTextEditCallback,void*)","cimguiname":"igInputText"}],"ImDrawList_AddRectFilled":[{"funcname":"AddRectFilled","args":"(const ImVec2 a,const ImVec2 b,ImU32 col,float rounding,int rounding_corners_flags)","ret":"void","call_args":"(a,b,col,rounding,rounding_corners_flags)","argsoriginal":"(const ImVec2& a,const ImVec2& b,ImU32 col,float rounding=0.0f,int rounding_corners_flags=ImDrawCornerFlags_All)","stname":"ImDrawList","comment":" // a: upper-left, b: lower-right","defaults":{"rounding":"0.0f","rounding_corners_flags":"ImDrawCornerFlags_All"},"signature":"(const ImVec2,const ImVec2,ImU32,float,int)","cimguiname":"ImDrawList_AddRectFilled"}],"igGetCursorPosX":[{"funcname":"GetCursorPosX","args":"()","ret":"float","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // \"","defaults":[],"signature":"()","cimguiname":"igGetCursorPosX"}],"ImFontAtlas_ClearFonts":[{"funcname":"ClearFonts","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImFontAtlas","comment":" // Clear output font data (glyphs storage, UV coordinates).","defaults":[],"signature":"()","cimguiname":"ImFontAtlas_ClearFonts"}],"ImFontAtlas_ClearTexData":[{"funcname":"ClearTexData","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImFontAtlas","comment":" // Clear output texture data (CPU side). Saves RAM once the texture has been copied to graphics memory.","defaults":[],"signature":"()","cimguiname":"ImFontAtlas_ClearTexData"}],"igGetColumnsCount":[{"funcname":"GetColumnsCount","args":"()","ret":"int","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":"","defaults":[],"signature":"()","cimguiname":"igGetColumnsCount"}],"igPopButtonRepeat":[{"funcname":"PopButtonRepeat","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":"","defaults":[],"signature":"()","cimguiname":"igPopButtonRepeat"}],"igDragScalarN":[{"funcname":"DragScalarN","args":"(const char* label,ImGuiDataType data_type,void* v,int components,float v_speed,const void* v_min,const void* v_max,const char* format,float power)","ret":"bool","call_args":"(label,data_type,v,components,v_speed,v_min,v_max,format,power)","argsoriginal":"(const char* label,ImGuiDataType data_type,void* v,int components,float v_speed,const void* v_min=((void *)0),const void* v_max=((void *)0),const char* format=((void *)0),float power=1.0f)","stname":"ImGui","comment":"","defaults":{"v_max":"((void *)0)","v_min":"((void *)0)","format":"((void *)0)","power":"1.0f"},"signature":"(const char*,ImGuiDataType,void*,int,float,const void*,const void*,const char*,float)","cimguiname":"igDragScalarN"}],"ImGuiPayload_IsPreview":[{"funcname":"IsPreview","args":"()","ret":"bool","call_args":"()","argsoriginal":"()","stname":"ImGuiPayload","comment":"","defaults":[],"signature":"()","cimguiname":"ImGuiPayload_IsPreview"}],"igSpacing":[{"funcname":"Spacing","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // add vertical spacing","defaults":[],"signature":"()","cimguiname":"igSpacing"}],"ImFontAtlas_Clear":[{"funcname":"Clear","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImFontAtlas","comment":" // Clear all input and output.","defaults":[],"signature":"()","cimguiname":"ImFontAtlas_Clear"}],"igIsAnyItemFocused":[{"funcname":"IsAnyItemFocused","args":"()","ret":"bool","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":"","defaults":[],"signature":"()","cimguiname":"igIsAnyItemFocused"}],"ImFontAtlas_AddFontFromMemoryCompressedTTF":[{"funcname":"AddFontFromMemoryCompressedTTF","args":"(const void* compressed_font_data,int compressed_font_size,float size_pixels,const ImFontConfig* font_cfg,const ImWchar* glyph_ranges)","ret":"ImFont*","call_args":"(compressed_font_data,compressed_font_size,size_pixels,font_cfg,glyph_ranges)","argsoriginal":"(const void* compressed_font_data,int compressed_font_size,float size_pixels,const ImFontConfig* font_cfg=((void *)0),const ImWchar* glyph_ranges=((void *)0))","stname":"ImFontAtlas","comment":" // 'compressed_font_data' still owned by caller. Compress with binary_to_compressed_c.cpp.","defaults":{"glyph_ranges":"((void *)0)","font_cfg":"((void *)0)"},"signature":"(const void*,int,float,const ImFontConfig*,const ImWchar*)","cimguiname":"ImFontAtlas_AddFontFromMemoryCompressedTTF"}],"ImFontAtlas_AddFontFromMemoryTTF":[{"funcname":"AddFontFromMemoryTTF","args":"(void* font_data,int font_size,float size_pixels,const ImFontConfig* font_cfg,const ImWchar* glyph_ranges)","ret":"ImFont*","call_args":"(font_data,font_size,size_pixels,font_cfg,glyph_ranges)","argsoriginal":"(void* font_data,int font_size,float size_pixels,const ImFontConfig* font_cfg=((void *)0),const ImWchar* glyph_ranges=((void *)0))","stname":"ImFontAtlas","comment":" // Note: Transfer ownership of 'ttf_data' to ImFontAtlas! Will be deleted after Build(). Set font_cfg->FontDataOwnedByAtlas to false to keep ownership.","defaults":{"glyph_ranges":"((void *)0)","font_cfg":"((void *)0)"},"signature":"(void*,int,float,const ImFontConfig*,const ImWchar*)","cimguiname":"ImFontAtlas_AddFontFromMemoryTTF"}],"igMemFree":[{"funcname":"MemFree","args":"(void* ptr)","ret":"void","call_args":"(ptr)","argsoriginal":"(void* ptr)","stname":"ImGui","comment":"","defaults":[],"signature":"(void*)","cimguiname":"igMemFree"}],"igGetFontTexUvWhitePixel":[{"funcname":"GetFontTexUvWhitePixel","args":"()","ret":"ImVec2","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // get UV coordinate for a while pixel, useful to draw custom shapes via the ImDrawList API","defaults":[],"signature":"()","cimguiname":"igGetFontTexUvWhitePixel"}],"ImDrawList_AddDrawCmd":[{"funcname":"AddDrawCmd","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImDrawList","comment":" // This is useful if you need to forcefully create a new draw call (to allow for dependent rendering / blending). Otherwise primitives are merged into the same draw-call as much as possible","defaults":[],"signature":"()","cimguiname":"ImDrawList_AddDrawCmd"}],"igIsItemClicked":[{"funcname":"IsItemClicked","args":"(int mouse_button)","ret":"bool","call_args":"(mouse_button)","argsoriginal":"(int mouse_button=0)","stname":"ImGui","comment":" // is the last item clicked? (e.g. button/node just clicked on) == IsMouseClicked(mouse_button) && IsItemHovered()","defaults":{"mouse_button":"0"},"signature":"(int)","cimguiname":"igIsItemClicked"}],"ImFontAtlas_AddFontFromFileTTF":[{"funcname":"AddFontFromFileTTF","args":"(const char* filename,float size_pixels,const ImFontConfig* font_cfg,const ImWchar* glyph_ranges)","ret":"ImFont*","call_args":"(filename,size_pixels,font_cfg,glyph_ranges)","argsoriginal":"(const char* filename,float size_pixels,const ImFontConfig* font_cfg=((void *)0),const ImWchar* glyph_ranges=((void *)0))","stname":"ImFontAtlas","comment":"","defaults":{"glyph_ranges":"((void *)0)","font_cfg":"((void *)0)"},"signature":"(const char*,float,const ImFontConfig*,const ImWchar*)","cimguiname":"ImFontAtlas_AddFontFromFileTTF"}],"ImFontAtlas_AddFontDefault":[{"funcname":"AddFontDefault","args":"(const ImFontConfig* font_cfg)","ret":"ImFont*","call_args":"(font_cfg)","argsoriginal":"(const ImFontConfig* font_cfg=((void *)0))","stname":"ImFontAtlas","comment":"","defaults":{"font_cfg":"((void *)0)"},"signature":"(const ImFontConfig*)","cimguiname":"ImFontAtlas_AddFontDefault"}],"igProgressBar":[{"funcname":"ProgressBar","args":"(float fraction,const ImVec2 size_arg,const char* overlay)","ret":"void","call_args":"(fraction,size_arg,overlay)","argsoriginal":"(float fraction,const ImVec2& size_arg=ImVec2(-1,0),const char* overlay=((void *)0))","stname":"ImGui","comment":"","defaults":{"size_arg":"ImVec2(-1,0)","overlay":"((void *)0)"},"signature":"(float,const ImVec2,const char*)","cimguiname":"igProgressBar"}],"ImFontAtlas_AddFont":[{"funcname":"AddFont","args":"(const ImFontConfig* font_cfg)","ret":"ImFont*","call_args":"(font_cfg)","argsoriginal":"(const ImFontConfig* font_cfg)","stname":"ImFontAtlas","comment":"","defaults":[],"signature":"(const ImFontConfig*)","cimguiname":"ImFontAtlas_AddFont"}],"igSetNextWindowBgAlpha":[{"funcname":"SetNextWindowBgAlpha","args":"(float alpha)","ret":"void","call_args":"(alpha)","argsoriginal":"(float alpha)","stname":"ImGui","comment":" // set next window background color alpha. helper to easily modify ImGuiCol_WindowBg/ChildBg/PopupBg.","defaults":[],"signature":"(float)","cimguiname":"igSetNextWindowBgAlpha"}],"igBeginPopup":[{"funcname":"BeginPopup","args":"(const char* str_id,ImGuiWindowFlags flags)","ret":"bool","call_args":"(str_id,flags)","argsoriginal":"(const char* str_id,ImGuiWindowFlags flags=0)","stname":"ImGui","comment":" // return true if the popup is open, and you can start outputting to it. only call EndPopup() if BeginPopup() returns true!","defaults":{"flags":"0"},"signature":"(const char*,ImGuiWindowFlags)","cimguiname":"igBeginPopup"}],"ImFont_BuildLookupTable":[{"funcname":"BuildLookupTable","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImFont","comment":"","defaults":[],"signature":"()","cimguiname":"ImFont_BuildLookupTable"}],"igGetScrollX":[{"funcname":"GetScrollX","args":"()","ret":"float","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // get scrolling amount [0..GetScrollMaxX()]","defaults":[],"signature":"()","cimguiname":"igGetScrollX"}],"igGetKeyIndex":[{"funcname":"GetKeyIndex","args":"(ImGuiKey imgui_key)","ret":"int","call_args":"(imgui_key)","argsoriginal":"(ImGuiKey imgui_key)","stname":"ImGui","comment":" // map ImGuiKey_* values into user's key index. == io.KeyMap[key]","defaults":[],"signature":"(ImGuiKey)","cimguiname":"igGetKeyIndex"}],"igGetOverlayDrawList":[{"funcname":"GetOverlayDrawList","args":"()","ret":"ImDrawList*","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // this draw list will be the last rendered one, useful to quickly draw overlays shapes/text","defaults":[],"signature":"()","cimguiname":"igGetOverlayDrawList"}],"igGetID":[{"funcname":"GetID","args":"(const char* str_id)","ret":"ImGuiID","call_args":"(str_id)","argsoriginal":"(const char* str_id)","stname":"ImGui","comment":" // calculate unique ID (hash of whole ID stack + given parameter). e.g. if you want to query into ImGuiStorage yourself","ov_cimguiname":"igGetIDStr","defaults":[],"signature":"(const char*)","cimguiname":"igGetID"},{"funcname":"GetID","args":"(const char* str_id_begin,const char* str_id_end)","ret":"ImGuiID","call_args":"(str_id_begin,str_id_end)","argsoriginal":"(const char* str_id_begin,const char* str_id_end)","stname":"ImGui","comment":"","ov_cimguiname":"igGetIDStrStr","defaults":[],"signature":"(const char*,const char*)","cimguiname":"igGetID"},{"funcname":"GetID","args":"(const void* ptr_id)","ret":"ImGuiID","call_args":"(ptr_id)","argsoriginal":"(const void* ptr_id)","stname":"ImGui","comment":"","ov_cimguiname":"igGetIDPtr","defaults":[],"signature":"(const void*)","cimguiname":"igGetID"}],"ImFontAtlas_GetGlyphRangesJapanese":[{"funcname":"GetGlyphRangesJapanese","args":"()","ret":"const ImWchar*","call_args":"()","argsoriginal":"()","stname":"ImFontAtlas","comment":" // Default + Hiragana, Katakana, Half-Width, Selection of 1946 Ideographs","defaults":[],"signature":"()","cimguiname":"ImFontAtlas_GetGlyphRangesJapanese"}],"ImFontConfig_ImFontConfig":[{"funcname":"ImFontConfig","args":"()","call_args":"()","argsoriginal":"()","stname":"ImFontConfig","comment":"","defaults":[],"signature":"()","cimguiname":"ImFontConfig_ImFontConfig"}],"ImDrawData_ScaleClipRects":[{"funcname":"ScaleClipRects","args":"(const ImVec2 sc)","ret":"void","call_args":"(sc)","argsoriginal":"(const ImVec2& sc)","stname":"ImDrawData","comment":" // Helper to scale the ClipRect field of each ImDrawCmd. Use if your final output buffer is at a different scale than ImGui expects, or if there is a difference between your window resolution and framebuffer resolution.","defaults":[],"signature":"(const ImVec2)","cimguiname":"ImDrawData_ScaleClipRects"}],"igIsMouseReleased":[{"funcname":"IsMouseReleased","args":"(int button)","ret":"bool","call_args":"(button)","argsoriginal":"(int button)","stname":"ImGui","comment":" // did mouse button released (went from Down to !Down)","defaults":[],"signature":"(int)","cimguiname":"igIsMouseReleased"}],"ImDrawData_DeIndexAllBuffers":[{"funcname":"DeIndexAllBuffers","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImDrawData","comment":" // Helper to convert all buffers from indexed to non-indexed, in case you cannot render indexed. Note: this is slow and most likely a waste of resources. Always prefer indexed rendering!","defaults":[],"signature":"()","cimguiname":"ImDrawData_DeIndexAllBuffers"}],"igGetItemRectMin":[{"funcname":"GetItemRectMin","args":"()","ret":"ImVec2","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // get bounding rectangle of last item, in screen space","defaults":[],"signature":"()","cimguiname":"igGetItemRectMin"}],"ImDrawData_Clear":[{"funcname":"Clear","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImDrawData","comment":" // The ImDrawList are owned by ImGuiContext!","defaults":[],"signature":"()","cimguiname":"ImDrawData_Clear"}],"igLogText":[{"isvararg":"...)","funcname":"LogText","args":"(const char* fmt,...)","ret":"void","call_args":"(fmt,...)","argsoriginal":"(const char* fmt,...)","stname":"ImGui","comment":" // pass text data straight to log (without being displayed)","defaults":[],"signature":"(const char*,...)","cimguiname":"igLogText"}],"ImDrawData_~ImDrawData":[{"funcname":"~ImDrawData","args":"()","call_args":"()","argsoriginal":"()","stname":"ImDrawData","comment":"","defaults":[],"signature":"()","cimguiname":"ImDrawData_~ImDrawData"}],"ImGuiStorage_GetVoidPtr":[{"funcname":"GetVoidPtr","args":"(ImGuiID key)","ret":"void*","call_args":"(key)","argsoriginal":"(ImGuiID key)","stname":"ImGuiStorage","comment":" // default_val is NULL","defaults":[],"signature":"(ImGuiID)","cimguiname":"ImGuiStorage_GetVoidPtr"}],"igTextWrapped":[{"isvararg":"...)","funcname":"TextWrapped","args":"(const char* fmt,...)","ret":"void","call_args":"(fmt,...)","argsoriginal":"(const char* fmt,...)","stname":"ImGui","comment":" // shortcut for PushTextWrapPos(0.0f); Text(fmt, ...); PopTextWrapPos();. Note that this won't work on an auto-resizing window if there's no other widgets to extend the window width, yoy may need to set a size using SetNextWindowSize().","defaults":[],"signature":"(const char*,...)","cimguiname":"igTextWrapped"}],"ImDrawList_UpdateTextureID":[{"funcname":"UpdateTextureID","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImDrawList","comment":"","defaults":[],"signature":"()","cimguiname":"ImDrawList_UpdateTextureID"}],"ImDrawList_UpdateClipRect":[{"funcname":"UpdateClipRect","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImDrawList","comment":"","defaults":[],"signature":"()","cimguiname":"ImDrawList_UpdateClipRect"}],"ImDrawList_PrimVtx":[{"funcname":"PrimVtx","args":"(const ImVec2 pos,const ImVec2 uv,ImU32 col)","ret":"inline void","call_args":"(pos,uv,col)","argsoriginal":"(const ImVec2& pos,const ImVec2& uv,ImU32 col)","stname":"ImDrawList","comment":"","defaults":[],"signature":"(const ImVec2,const ImVec2,ImU32)","cimguiname":"ImDrawList_PrimVtx"}],"igGetFrameCount":[{"funcname":"GetFrameCount","args":"()","ret":"int","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":"","defaults":[],"signature":"()","cimguiname":"igGetFrameCount"}],"igInvisibleButton":[{"funcname":"InvisibleButton","args":"(const char* str_id,const ImVec2 size)","ret":"bool","call_args":"(str_id,size)","argsoriginal":"(const char* str_id,const ImVec2& size)","stname":"ImGui","comment":" // button behavior without the visuals, useful to build custom behaviors using the public api (along with IsItemActive, IsItemHovered, etc.)","defaults":[],"signature":"(const char*,const ImVec2)","cimguiname":"igInvisibleButton"}],"igGetClipboardText":[{"funcname":"GetClipboardText","args":"()","ret":"const char*","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":"","defaults":[],"signature":"()","cimguiname":"igGetClipboardText"}],"igColorPicker4":[{"funcname":"ColorPicker4","args":"(const char* label,float col[4],ImGuiColorEditFlags flags,const float* ref_col)","ret":"bool","call_args":"(label,col,flags,ref_col)","argsoriginal":"(const char* label,float col[4],ImGuiColorEditFlags flags=0,const float* ref_col=((void *)0))","stname":"ImGui","comment":"","defaults":{"ref_col":"((void *)0)","flags":"0"},"signature":"(const char*,float[4],ImGuiColorEditFlags,const float*)","cimguiname":"igColorPicker4"}],"ImDrawList_PrimRect":[{"funcname":"PrimRect","args":"(const ImVec2 a,const ImVec2 b,ImU32 col)","ret":"void","call_args":"(a,b,col)","argsoriginal":"(const ImVec2& a,const ImVec2& b,ImU32 col)","stname":"ImDrawList","comment":" // Axis aligned rectangle (composed of two triangles)","defaults":[],"signature":"(const ImVec2,const ImVec2,ImU32)","cimguiname":"ImDrawList_PrimRect"}],"ImDrawList_AddQuad":[{"funcname":"AddQuad","args":"(const ImVec2 a,const ImVec2 b,const ImVec2 c,const ImVec2 d,ImU32 col,float thickness)","ret":"void","call_args":"(a,b,c,d,col,thickness)","argsoriginal":"(const ImVec2& a,const ImVec2& b,const ImVec2& c,const ImVec2& d,ImU32 col,float thickness=1.0f)","stname":"ImDrawList","comment":"","defaults":{"thickness":"1.0f"},"signature":"(const ImVec2,const ImVec2,const ImVec2,const ImVec2,ImU32,float)","cimguiname":"ImDrawList_AddQuad"}],"ImDrawList_ClearFreeMemory":[{"funcname":"ClearFreeMemory","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImDrawList","comment":"","defaults":[],"signature":"()","cimguiname":"ImDrawList_ClearFreeMemory"}],"igSetNextTreeNodeOpen":[{"funcname":"SetNextTreeNodeOpen","args":"(bool is_open,ImGuiCond cond)","ret":"void","call_args":"(is_open,cond)","argsoriginal":"(bool is_open,ImGuiCond cond=0)","stname":"ImGui","comment":" // set next TreeNode/CollapsingHeader open state.","defaults":{"cond":"0"},"signature":"(bool,ImGuiCond)","cimguiname":"igSetNextTreeNodeOpen"}],"igLogToTTY":[{"funcname":"LogToTTY","args":"(int max_depth)","ret":"void","call_args":"(max_depth)","argsoriginal":"(int max_depth=-1)","stname":"ImGui","comment":" // start logging to tty","defaults":{"max_depth":"-1"},"signature":"(int)","cimguiname":"igLogToTTY"}],"GlyphRangesBuilder_BuildRanges":[{"funcname":"BuildRanges","args":"(ImVector_ImWchar* out_ranges)","ret":"void","call_args":"(out_ranges)","argsoriginal":"(ImVector<ImWchar>* out_ranges)","stname":"GlyphRangesBuilder","comment":" // Output new ranges","defaults":[],"signature":"(ImVector_ImWchar*)","cimguiname":"GlyphRangesBuilder_BuildRanges"}],"igSetTooltipV":[{"funcname":"SetTooltipV","args":"(const char* fmt,va_list args)","ret":"void","call_args":"(fmt,args)","argsoriginal":"(const char* fmt,va_list args)","stname":"ImGui","comment":"","defaults":[],"signature":"(const char*,va_list)","cimguiname":"igSetTooltipV"}],"ImDrawList_CloneOutput":[{"funcname":"CloneOutput","args":"()","ret":"ImDrawList*","call_args":"()","argsoriginal":"()","stname":"ImDrawList","comment":" // Create a clone of the CmdBuffer/IdxBuffer/VtxBuffer.","defaults":[],"signature":"()","cimguiname":"ImDrawList_CloneOutput"}],"igGetIO":[{"funcname":"GetIO","args":"()","ret":"ImGuiIO*","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // access the IO structure (mouse/keyboard/gamepad inputs, time, various configuration options/flags)","retref":"&","defaults":[],"signature":"()","cimguiname":"igGetIO"}],"igDragInt4":[{"funcname":"DragInt4","args":"(const char* label,int v[4],float v_speed,int v_min,int v_max,const char* format)","ret":"bool","call_args":"(label,v,v_speed,v_min,v_max,format)","argsoriginal":"(const char* label,int v[4],float v_speed=1.0f,int v_min=0,int v_max=0,const char* format=\"%d\")","stname":"ImGui","comment":"","defaults":{"v_speed":"1.0f","v_min":"0","format":"\"%d\"","v_max":"0"},"signature":"(const char*,int[4],float,int,int,const char*)","cimguiname":"igDragInt4"}],"igNextColumn":[{"funcname":"NextColumn","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // next column, defaults to current row or next row if the current row is finished","defaults":[],"signature":"()","cimguiname":"igNextColumn"}],"ImDrawList_AddRect":[{"funcname":"AddRect","args":"(const ImVec2 a,const ImVec2 b,ImU32 col,float rounding,int rounding_corners_flags,float thickness)","ret":"void","call_args":"(a,b,col,rounding,rounding_corners_flags,thickness)","argsoriginal":"(const ImVec2& a,const ImVec2& b,ImU32 col,float rounding=0.0f,int rounding_corners_flags=ImDrawCornerFlags_All,float thickness=1.0f)","stname":"ImDrawList","comment":" // a: upper-left, b: lower-right, rounding_corners_flags: 4-bits corresponding to which corner to round","defaults":{"rounding":"0.0f","thickness":"1.0f","rounding_corners_flags":"ImDrawCornerFlags_All"},"signature":"(const ImVec2,const ImVec2,ImU32,float,int,float)","cimguiname":"ImDrawList_AddRect"}],"TextRange_split":[{"funcname":"split","args":"(char separator,ImVector_TextRange out)","ret":"void","call_args":"(separator,out)","argsoriginal":"(char separator,ImVector<TextRange>& out)","stname":"TextRange","comment":"","defaults":[],"signature":"(char,ImVector_TextRange)","cimguiname":"TextRange_split"}],"igSetCursorPos":[{"funcname":"SetCursorPos","args":"(const ImVec2 local_pos)","ret":"void","call_args":"(local_pos)","argsoriginal":"(const ImVec2& local_pos)","stname":"ImGui","comment":" // \"","defaults":[],"signature":"(const ImVec2)","cimguiname":"igSetCursorPos"}],"igBeginPopupModal":[{"funcname":"BeginPopupModal","args":"(const char* name,bool* p_open,ImGuiWindowFlags flags)","ret":"bool","call_args":"(name,p_open,flags)","argsoriginal":"(const char* name,bool* p_open=((void *)0),ImGuiWindowFlags flags=0)","stname":"ImGui","comment":" // modal dialog (regular window with title bar, block interactions behind the modal window, can't close the modal window by clicking outside)","defaults":{"p_open":"((void *)0)","flags":"0"},"signature":"(const char*,bool*,ImGuiWindowFlags)","cimguiname":"igBeginPopupModal"}],"igSliderInt4":[{"funcname":"SliderInt4","args":"(const char* label,int v[4],int v_min,int v_max,const char* format)","ret":"bool","call_args":"(label,v,v_min,v_max,format)","argsoriginal":"(const char* label,int v[4],int v_min,int v_max,const char* format=\"%d\")","stname":"ImGui","comment":"","defaults":{"format":"\"%d\""},"signature":"(const char*,int[4],int,int,const char*)","cimguiname":"igSliderInt4"}],"ImDrawList_AddCallback":[{"funcname":"AddCallback","args":"(ImDrawCallback callback,void* callback_data)","ret":"void","call_args":"(callback,callback_data)","argsoriginal":"(ImDrawCallback callback,void* callback_data)","stname":"ImDrawList","comment":" // Your rendering function must check for 'UserCallback' in ImDrawCmd and call the function instead of rendering triangles.","defaults":[],"signature":"(ImDrawCallback,void*)","cimguiname":"ImDrawList_AddCallback"}],"igShowMetricsWindow":[{"funcname":"ShowMetricsWindow","args":"(bool* p_open)","ret":"void","call_args":"(p_open)","argsoriginal":"(bool* p_open=((void *)0))","stname":"ImGui","comment":" // create metrics window. display ImGui internals: draw commands (with individual draw calls and vertices), window list, basic internal state, etc.","defaults":{"p_open":"((void *)0)"},"signature":"(bool*)","cimguiname":"igShowMetricsWindow"}],"igGetScrollMaxY":[{"funcname":"GetScrollMaxY","args":"()","ret":"float","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // get maximum scrolling amount ~~ ContentSize.Y - WindowSize.Y","defaults":[],"signature":"()","cimguiname":"igGetScrollMaxY"}],"igBeginTooltip":[{"funcname":"BeginTooltip","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // begin/append a tooltip window. to create full-featured tooltip (with any kind of items).","defaults":[],"signature":"()","cimguiname":"igBeginTooltip"}],"igEndGroup":[{"funcname":"EndGroup","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":"","defaults":[],"signature":"()","cimguiname":"igEndGroup"}],"igGetDrawData":[{"funcname":"GetDrawData","args":"()","ret":"ImDrawData*","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // valid after Render() and until the next call to NewFrame(). this is what you have to render. (Obsolete: this used to be passed to your io.RenderDrawListsFn() function.)","defaults":[],"signature":"()","cimguiname":"igGetDrawData"}],"igGetTextLineHeight":[{"funcname":"GetTextLineHeight","args":"()","ret":"float","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // ~ FontSize","defaults":[],"signature":"()","cimguiname":"igGetTextLineHeight"}],"igSeparator":[{"funcname":"Separator","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // separator, generally horizontal. inside a menu bar or in horizontal layout mode, this becomes a vertical separator.","defaults":[],"signature":"()","cimguiname":"igSeparator"}],"igBeginChild":[{"funcname":"BeginChild","args":"(const char* str_id,const ImVec2 size,bool border,ImGuiWindowFlags flags)","ret":"bool","call_args":"(str_id,size,border,flags)","argsoriginal":"(const char* str_id,const ImVec2& size=ImVec2(0,0),bool border=false,ImGuiWindowFlags flags=0)","stname":"ImGui","comment":" // Begin a scrolling region. size==0.0f: use remaining window size, size<0.0f: use remaining window size minus abs(size). size>0.0f: fixed size. each axis can use a different mode, e.g. ImVec2(0,400).","ov_cimguiname":"igBeginChild","defaults":{"border":"false","size":"ImVec2(0,0)","flags":"0"},"signature":"(const char*,const ImVec2,bool,ImGuiWindowFlags)","cimguiname":"igBeginChild"},{"funcname":"BeginChild","args":"(ImGuiID id,const ImVec2 size,bool border,ImGuiWindowFlags flags)","ret":"bool","call_args":"(id,size,border,flags)","argsoriginal":"(ImGuiID id,const ImVec2& size=ImVec2(0,0),bool border=false,ImGuiWindowFlags flags=0)","stname":"ImGui","comment":"","ov_cimguiname":"igBeginChildID","defaults":{"border":"false","size":"ImVec2(0,0)","flags":"0"},"signature":"(ImGuiID,const ImVec2,bool,ImGuiWindowFlags)","cimguiname":"igBeginChild"}],"ImDrawList_PathRect":[{"funcname":"PathRect","args":"(const ImVec2 rect_min,const ImVec2 rect_max,float rounding,int rounding_corners_flags)","ret":"void","call_args":"(rect_min,rect_max,rounding,rounding_corners_flags)","argsoriginal":"(const ImVec2& rect_min,const ImVec2& rect_max,float rounding=0.0f,int rounding_corners_flags=ImDrawCornerFlags_All)","stname":"ImDrawList","comment":"","defaults":{"rounding":"0.0f","rounding_corners_flags":"ImDrawCornerFlags_All"},"signature":"(const ImVec2,const ImVec2,float,int)","cimguiname":"ImDrawList_PathRect"}],"igIsMouseClicked":[{"funcname":"IsMouseClicked","args":"(int button,bool repeat)","ret":"bool","call_args":"(button,repeat)","argsoriginal":"(int button,bool repeat=false)","stname":"ImGui","comment":" // did mouse button clicked (went from !Down to Down)","defaults":{"repeat":"false"},"signature":"(int,bool)","cimguiname":"igIsMouseClicked"}],"igCalcItemWidth":[{"funcname":"CalcItemWidth","args":"()","ret":"float","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // width of item given pushed settings and current cursor position","defaults":[],"signature":"()","cimguiname":"igCalcItemWidth"}],"ImGuiTextBuffer_appendfv":[{"funcname":"appendfv","args":"(const char* fmt,va_list args)","ret":"void","call_args":"(fmt,args)","argsoriginal":"(const char* fmt,va_list args)","stname":"ImGuiTextBuffer","comment":"","defaults":[],"signature":"(const char*,va_list)","cimguiname":"ImGuiTextBuffer_appendfv"}],"ImDrawList_PathArcToFast":[{"funcname":"PathArcToFast","args":"(const ImVec2 centre,float radius,int a_min_of_12,int a_max_of_12)","ret":"void","call_args":"(centre,radius,a_min_of_12,a_max_of_12)","argsoriginal":"(const ImVec2& centre,float radius,int a_min_of_12,int a_max_of_12)","stname":"ImDrawList","comment":" // Use precomputed angles for a 12 steps circle","defaults":[],"signature":"(const ImVec2,float,int,int)","cimguiname":"ImDrawList_PathArcToFast"}],"igEndChildFrame":[{"funcname":"EndChildFrame","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // always call EndChildFrame() regardless of BeginChildFrame() return values (which indicates a collapsed/clipped window)","defaults":[],"signature":"()","cimguiname":"igEndChildFrame"}],"igIndent":[{"funcname":"Indent","args":"(float indent_w)","ret":"void","call_args":"(indent_w)","argsoriginal":"(float indent_w=0.0f)","stname":"ImGui","comment":" // move content position toward the right, by style.IndentSpacing or indent_w if != 0","defaults":{"indent_w":"0.0f"},"signature":"(float)","cimguiname":"igIndent"}],"igSetDragDropPayload":[{"funcname":"SetDragDropPayload","args":"(const char* type,const void* data,size_t size,ImGuiCond cond)","ret":"bool","call_args":"(type,data,size,cond)","argsoriginal":"(const char* type,const void* data,size_t size,ImGuiCond cond=0)","stname":"ImGui","comment":"// type is a user defined string of maximum 32 characters. Strings starting with '_' are reserved for dear imgui internal types. Data is copied and held by imgui.","defaults":{"cond":"0"},"signature":"(const char*,const void*,size_t,ImGuiCond)","cimguiname":"igSetDragDropPayload"}],"GlyphRangesBuilder_GetBit":[{"funcname":"GetBit","args":"(int n)","ret":"bool","call_args":"(n)","argsoriginal":"(int n)","stname":"GlyphRangesBuilder","comment":"","defaults":[],"signature":"(int)","cimguiname":"GlyphRangesBuilder_GetBit"}],"ImGuiTextFilter_Draw":[{"funcname":"Draw","args":"(const char* label,float width)","ret":"bool","call_args":"(label,width)","argsoriginal":"(const char* label=\"Filter(inc,-exc)\",float width=0.0f)","stname":"ImGuiTextFilter","comment":" // Helper calling InputText+Build","defaults":{"label":"\"Filter(inc,-exc)\"","width":"0.0f"},"signature":"(const char*,float)","cimguiname":"ImGuiTextFilter_Draw"}],"igShowDemoWindow":[{"funcname":"ShowDemoWindow","args":"(bool* p_open)","ret":"void","call_args":"(p_open)","argsoriginal":"(bool* p_open=((void *)0))","stname":"ImGui","comment":" // create demo/test window (previously called ShowTestWindow). demonstrate most ImGui features. call this to learn about the library! try to make it always available in your application!","defaults":{"p_open":"((void *)0)"},"signature":"(bool*)","cimguiname":"igShowDemoWindow"}],"ImDrawList_PathStroke":[{"funcname":"PathStroke","args":"(ImU32 col,bool closed,float thickness)","ret":"inline void","call_args":"(col,closed,thickness)","argsoriginal":"(ImU32 col,bool closed,float thickness=1.0f)","stname":"ImDrawList","comment":"","defaults":{"thickness":"1.0f"},"signature":"(ImU32,bool,float)","cimguiname":"ImDrawList_PathStroke"}],"ImDrawList_PathFillConvex":[{"funcname":"PathFillConvex","args":"(ImU32 col)","ret":"inline void","call_args":"(col)","argsoriginal":"(ImU32 col)","stname":"ImDrawList","comment":" // Note: Anti-aliased filling requires points to be in clockwise order.","defaults":[],"signature":"(ImU32)","cimguiname":"ImDrawList_PathFillConvex"}],"ImDrawList_PathLineToMergeDuplicate":[{"funcname":"PathLineToMergeDuplicate","args":"(const ImVec2 pos)","ret":"inline void","call_args":"(pos)","argsoriginal":"(const ImVec2& pos)","stname":"ImDrawList","comment":"","defaults":[],"signature":"(const ImVec2)","cimguiname":"ImDrawList_PathLineToMergeDuplicate"}],"igEndMenu":[{"funcname":"EndMenu","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // only call EndMenu() if BeginMenu() returns true!","defaults":[],"signature":"()","cimguiname":"igEndMenu"}],"igColorButton":[{"funcname":"ColorButton","args":"(const char* desc_id,const ImVec4 col,ImGuiColorEditFlags flags,ImVec2 size)","ret":"bool","call_args":"(desc_id,col,flags,size)","argsoriginal":"(const char* desc_id,const ImVec4& col,ImGuiColorEditFlags flags=0,ImVec2 size=ImVec2(0,0))","stname":"ImGui","comment":" // display a colored square/button, hover for details, return true when pressed.","defaults":{"size":"ImVec2(0,0)","flags":"0"},"signature":"(const char*,const ImVec4,ImGuiColorEditFlags,ImVec2)","cimguiname":"igColorButton"}],"ImFontAtlas_GetTexDataAsAlpha8":[{"funcname":"GetTexDataAsAlpha8","args":"(unsigned char** out_pixels,int* out_width,int* out_height,int* out_bytes_per_pixel)","ret":"void","call_args":"(out_pixels,out_width,out_height,out_bytes_per_pixel)","argsoriginal":"(unsigned char** out_pixels,int* out_width,int* out_height,int* out_bytes_per_pixel=((void *)0))","stname":"ImFontAtlas","comment":" // 1 byte per-pixel","defaults":{"out_bytes_per_pixel":"((void *)0)"},"signature":"(unsigned char**,int*,int*,int*)","cimguiname":"ImFontAtlas_GetTexDataAsAlpha8"}],"igSetWindowFocus":[{"funcname":"SetWindowFocus","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // (not recommended) set current window to be focused / front-most. prefer using SetNextWindowFocus().","ov_cimguiname":"igSetWindowFocus","defaults":[],"signature":"()","cimguiname":"igSetWindowFocus"},{"funcname":"SetWindowFocus","args":"(const char* name)","ret":"void","call_args":"(name)","argsoriginal":"(const char* name)","stname":"ImGui","comment":" // set named window to be focused / front-most. use NULL to remove focus.","ov_cimguiname":"igSetWindowFocusStr","defaults":[],"signature":"(const char*)","cimguiname":"igSetWindowFocus"}],"igSetClipboardText":[{"funcname":"SetClipboardText","args":"(const char* text)","ret":"void","call_args":"(text)","argsoriginal":"(const char* text)","stname":"ImGui","comment":"","defaults":[],"signature":"(const char*)","cimguiname":"igSetClipboardText"}],"ImDrawList_PathArcTo":[{"funcname":"PathArcTo","args":"(const ImVec2 centre,float radius,float a_min,float a_max,int num_segments)","ret":"void","call_args":"(centre,radius,a_min,a_max,num_segments)","argsoriginal":"(const ImVec2& centre,float radius,float a_min,float a_max,int num_segments=10)","stname":"ImDrawList","comment":"","defaults":{"num_segments":"10"},"signature":"(const ImVec2,float,float,float,int)","cimguiname":"ImDrawList_PathArcTo"}],"ImDrawList_AddConvexPolyFilled":[{"funcname":"AddConvexPolyFilled","args":"(const ImVec2* points,const int num_points,ImU32 col)","ret":"void","call_args":"(points,num_points,col)","argsoriginal":"(const ImVec2* points,const int num_points,ImU32 col)","stname":"ImDrawList","comment":" // Note: Anti-aliased filling requires points to be in clockwise order.","defaults":[],"signature":"(const ImVec2*,const int,ImU32)","cimguiname":"ImDrawList_AddConvexPolyFilled"}],"igIsWindowCollapsed":[{"funcname":"IsWindowCollapsed","args":"()","ret":"bool","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":"","defaults":[],"signature":"()","cimguiname":"igIsWindowCollapsed"}],"ImGuiIO_AddInputCharacter":[{"funcname":"AddInputCharacter","args":"(ImWchar c)","ret":"void","call_args":"(c)","argsoriginal":"(ImWchar c)","stname":"ImGuiIO","comment":" // Add new character into InputCharacters[]","defaults":[],"signature":"(ImWchar)","cimguiname":"ImGuiIO_AddInputCharacter"}],"ImDrawList_AddImageQuad":[{"funcname":"AddImageQuad","args":"(ImTextureID user_texture_id,const ImVec2 a,const ImVec2 b,const ImVec2 c,const ImVec2 d,const ImVec2 uv_a,const ImVec2 uv_b,const ImVec2 uv_c,const ImVec2 uv_d,ImU32 col)","ret":"void","call_args":"(user_texture_id,a,b,c,d,uv_a,uv_b,uv_c,uv_d,col)","argsoriginal":"(ImTextureID user_texture_id,const ImVec2& a,const ImVec2& b,const ImVec2& c,const ImVec2& d,const ImVec2& uv_a=ImVec2(0,0),const ImVec2& uv_b=ImVec2(1,0),const ImVec2& uv_c=ImVec2(1,1),const ImVec2& uv_d=ImVec2(0,1),ImU32 col=0xFFFFFFFF)","stname":"ImDrawList","comment":"","defaults":{"uv_c":"ImVec2(1,1)","uv_a":"ImVec2(0,0)","col":"0xFFFFFFFF","uv_b":"ImVec2(1,0)","uv_d":"ImVec2(0,1)"},"signature":"(ImTextureID,const ImVec2,const ImVec2,const ImVec2,const ImVec2,const ImVec2,const ImVec2,const ImVec2,const ImVec2,ImU32)","cimguiname":"ImDrawList_AddImageQuad"}],"igSetNextWindowFocus":[{"funcname":"SetNextWindowFocus","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // set next window to be focused / front-most. call before Begin()","defaults":[],"signature":"()","cimguiname":"igSetNextWindowFocus"}],"igSameLine":[{"funcname":"SameLine","args":"(float pos_x,float spacing_w)","ret":"void","call_args":"(pos_x,spacing_w)","argsoriginal":"(float pos_x=0.0f,float spacing_w=-1.0f)","stname":"ImGui","comment":" // call between widgets or groups to layout them horizontally","defaults":{"pos_x":"0.0f","spacing_w":"-1.0f"},"signature":"(float,float)","cimguiname":"igSameLine"}],"igBegin":[{"funcname":"Begin","args":"(const char* name,bool* p_open,ImGuiWindowFlags flags)","ret":"bool","call_args":"(name,p_open,flags)","argsoriginal":"(const char* name,bool* p_open=((void *)0),ImGuiWindowFlags flags=0)","stname":"ImGui","comment":"","defaults":{"p_open":"((void *)0)","flags":"0"},"signature":"(const char*,bool*,ImGuiWindowFlags)","cimguiname":"igBegin"}],"igColorEdit3":[{"funcname":"ColorEdit3","args":"(const char* label,float col[3],ImGuiColorEditFlags flags)","ret":"bool","call_args":"(label,col,flags)","argsoriginal":"(const char* label,float col[3],ImGuiColorEditFlags flags=0)","stname":"ImGui","comment":"","defaults":{"flags":"0"},"signature":"(const char*,float[3],ImGuiColorEditFlags)","cimguiname":"igColorEdit3"}],"ImDrawList_AddImage":[{"funcname":"AddImage","args":"(ImTextureID user_texture_id,const ImVec2 a,const ImVec2 b,const ImVec2 uv_a,const ImVec2 uv_b,ImU32 col)","ret":"void","call_args":"(user_texture_id,a,b,uv_a,uv_b,col)","argsoriginal":"(ImTextureID user_texture_id,const ImVec2& a,const ImVec2& b,const ImVec2& uv_a=ImVec2(0,0),const ImVec2& uv_b=ImVec2(1,1),ImU32 col=0xFFFFFFFF)","stname":"ImDrawList","comment":"","defaults":{"uv_b":"ImVec2(1,1)","uv_a":"ImVec2(0,0)","col":"0xFFFFFFFF"},"signature":"(ImTextureID,const ImVec2,const ImVec2,const ImVec2,const ImVec2,ImU32)","cimguiname":"ImDrawList_AddImage"}],"ImGuiIO_AddInputCharactersUTF8":[{"funcname":"AddInputCharactersUTF8","args":"(const char* utf8_chars)","ret":"void","call_args":"(utf8_chars)","argsoriginal":"(const char* utf8_chars)","stname":"ImGuiIO","comment":" // Add new characters into InputCharacters[] from an UTF-8 string","defaults":[],"signature":"(const char*)","cimguiname":"ImGuiIO_AddInputCharactersUTF8"}],"ImDrawList_AddText":[{"funcname":"AddText","args":"(const ImVec2 pos,ImU32 col,const char* text_begin,const char* text_end)","ret":"void","call_args":"(pos,col,text_begin,text_end)","argsoriginal":"(const ImVec2& pos,ImU32 col,const char* text_begin,const char* text_end=((void *)0))","stname":"ImDrawList","comment":"","ov_cimguiname":"ImDrawList_AddText","defaults":{"text_end":"((void *)0)"},"signature":"(const ImVec2,ImU32,const char*,const char*)","cimguiname":"ImDrawList_AddText"},{"funcname":"AddText","args":"(const ImFont* font,float font_size,const ImVec2 pos,ImU32 col,const char* text_begin,const char* text_end,float wrap_width,const ImVec4* cpu_fine_clip_rect)","ret":"void","call_args":"(font,font_size,pos,col,text_begin,text_end,wrap_width,cpu_fine_clip_rect)","argsoriginal":"(const ImFont* font,float font_size,const ImVec2& pos,ImU32 col,const char* text_begin,const char* text_end=((void *)0),float wrap_width=0.0f,const ImVec4* cpu_fine_clip_rect=((void *)0))","stname":"ImDrawList","comment":"","ov_cimguiname":"ImDrawList_AddTextFontPtr","defaults":{"text_end":"((void *)0)","cpu_fine_clip_rect":"((void *)0)","wrap_width":"0.0f"},"signature":"(const ImFont*,float,const ImVec2,ImU32,const char*,const char*,float,const ImVec4*)","cimguiname":"ImDrawList_AddText"}],"ImDrawList_AddCircleFilled":[{"funcname":"AddCircleFilled","args":"(const ImVec2 centre,float radius,ImU32 col,int num_segments)","ret":"void","call_args":"(centre,radius,col,num_segments)","argsoriginal":"(const ImVec2& centre,float radius,ImU32 col,int num_segments=12)","stname":"ImDrawList","comment":"","defaults":{"num_segments":"12"},"signature":"(const ImVec2,float,ImU32,int)","cimguiname":"ImDrawList_AddCircleFilled"}],"igDragFloat2":[{"funcname":"DragFloat2","args":"(const char* label,float v[2],float v_speed,float v_min,float v_max,const char* format,float power)","ret":"bool","call_args":"(label,v,v_speed,v_min,v_max,format,power)","argsoriginal":"(const char* label,float v[2],float v_speed=1.0f,float v_min=0.0f,float v_max=0.0f,const char* format=\"%.3f\",float power=1.0f)","stname":"ImGui","comment":"","defaults":{"v_speed":"1.0f","v_min":"0.0f","power":"1.0f","v_max":"0.0f","format":"\"%.3f\""},"signature":"(const char*,float[2],float,float,float,const char*,float)","cimguiname":"igDragFloat2"}],"igPushButtonRepeat":[{"funcname":"PushButtonRepeat","args":"(bool repeat)","ret":"void","call_args":"(repeat)","argsoriginal":"(bool repeat)","stname":"ImGui","comment":" // in 'repeat' mode, Button*() functions return repeated true in a typematic manner (using io.KeyRepeatDelay/io.KeyRepeatRate setting). Note that you can call IsItemActive() after any Button() to tell if the button is held in the current frame.","defaults":[],"signature":"(bool)","cimguiname":"igPushButtonRepeat"}],"igPopItemWidth":[{"funcname":"PopItemWidth","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":"","defaults":[],"signature":"()","cimguiname":"igPopItemWidth"}],"ImDrawList_AddCircle":[{"funcname":"AddCircle","args":"(const ImVec2 centre,float radius,ImU32 col,int num_segments,float thickness)","ret":"void","call_args":"(centre,radius,col,num_segments,thickness)","argsoriginal":"(const ImVec2& centre,float radius,ImU32 col,int num_segments=12,float thickness=1.0f)","stname":"ImDrawList","comment":"","defaults":{"num_segments":"12","thickness":"1.0f"},"signature":"(const ImVec2,float,ImU32,int,float)","cimguiname":"ImDrawList_AddCircle"}],"ImDrawList_AddTriangleFilled":[{"funcname":"AddTriangleFilled","args":"(const ImVec2 a,const ImVec2 b,const ImVec2 c,ImU32 col)","ret":"void","call_args":"(a,b,c,col)","argsoriginal":"(const ImVec2& a,const ImVec2& b,const ImVec2& c,ImU32 col)","stname":"ImDrawList","comment":"","defaults":[],"signature":"(const ImVec2,const ImVec2,const ImVec2,ImU32)","cimguiname":"ImDrawList_AddTriangleFilled"}],"ImDrawList_AddTriangle":[{"funcname":"AddTriangle","args":"(const ImVec2 a,const ImVec2 b,const ImVec2 c,ImU32 col,float thickness)","ret":"void","call_args":"(a,b,c,col,thickness)","argsoriginal":"(const ImVec2& a,const ImVec2& b,const ImVec2& c,ImU32 col,float thickness=1.0f)","stname":"ImDrawList","comment":"","defaults":{"thickness":"1.0f"},"signature":"(const ImVec2,const ImVec2,const ImVec2,ImU32,float)","cimguiname":"ImDrawList_AddTriangle"}],"ImDrawList_AddQuadFilled":[{"funcname":"AddQuadFilled","args":"(const ImVec2 a,const ImVec2 b,const ImVec2 c,const ImVec2 d,ImU32 col)","ret":"void","call_args":"(a,b,c,d,col)","argsoriginal":"(const ImVec2& a,const ImVec2& b,const ImVec2& c,const ImVec2& d,ImU32 col)","stname":"ImDrawList","comment":"","defaults":[],"signature":"(const ImVec2,const ImVec2,const ImVec2,const ImVec2,ImU32)","cimguiname":"ImDrawList_AddQuadFilled"}],"igGetFontSize":[{"funcname":"GetFontSize","args":"()","ret":"float","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // get current font size (= height in pixels) of current font with current scale applied","defaults":[],"signature":"()","cimguiname":"igGetFontSize"}],"igInputDouble":[{"funcname":"InputDouble","args":"(const char* label,double* v,double step,double step_fast,const char* format,ImGuiInputTextFlags extra_flags)","ret":"bool","call_args":"(label,v,step,step_fast,format,extra_flags)","argsoriginal":"(const char* label,double* v,double step=0.0f,double step_fast=0.0f,const char* format=\"%.6f\",ImGuiInputTextFlags extra_flags=0)","stname":"ImGui","comment":"","defaults":{"step":"0.0f","format":"\"%.6f\"","step_fast":"0.0f","extra_flags":"0"},"signature":"(const char*,double*,double,double,const char*,ImGuiInputTextFlags)","cimguiname":"igInputDouble"}],"ImDrawList_PrimReserve":[{"funcname":"PrimReserve","args":"(int idx_count,int vtx_count)","ret":"void","call_args":"(idx_count,vtx_count)","argsoriginal":"(int idx_count,int vtx_count)","stname":"ImDrawList","comment":"","defaults":[],"signature":"(int,int)","cimguiname":"ImDrawList_PrimReserve"}],"ImDrawList_AddRectFilledMultiColor":[{"funcname":"AddRectFilledMultiColor","args":"(const ImVec2 a,const ImVec2 b,ImU32 col_upr_left,ImU32 col_upr_right,ImU32 col_bot_right,ImU32 col_bot_left)","ret":"void","call_args":"(a,b,col_upr_left,col_upr_right,col_bot_right,col_bot_left)","argsoriginal":"(const ImVec2& a,const ImVec2& b,ImU32 col_upr_left,ImU32 col_upr_right,ImU32 col_bot_right,ImU32 col_bot_left)","stname":"ImDrawList","comment":"","defaults":[],"signature":"(const ImVec2,const ImVec2,ImU32,ImU32,ImU32,ImU32)","cimguiname":"ImDrawList_AddRectFilledMultiColor"}],"igEndPopup":[{"funcname":"EndPopup","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // only call EndPopup() if BeginPopupXXX() returns true!","defaults":[],"signature":"()","cimguiname":"igEndPopup"}],"ImFontAtlas_ClearInputData":[{"funcname":"ClearInputData","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImFontAtlas","comment":" // Clear input data (all ImFontConfig structures including sizes, TTF data, glyph ranges, etc.) = all the data used to build the texture and fonts.","defaults":[],"signature":"()","cimguiname":"ImFontAtlas_ClearInputData"}],"ImDrawList_AddLine":[{"funcname":"AddLine","args":"(const ImVec2 a,const ImVec2 b,ImU32 col,float thickness)","ret":"void","call_args":"(a,b,col,thickness)","argsoriginal":"(const ImVec2& a,const ImVec2& b,ImU32 col,float thickness=1.0f)","stname":"ImDrawList","comment":"","defaults":{"thickness":"1.0f"},"signature":"(const ImVec2,const ImVec2,ImU32,float)","cimguiname":"ImDrawList_AddLine"}],"igInputTextMultiline":[{"funcname":"InputTextMultiline","args":"(const char* label,char* buf,size_t buf_size,const ImVec2 size,ImGuiInputTextFlags flags,ImGuiTextEditCallback callback,void* user_data)","ret":"bool","call_args":"(label,buf,buf_size,size,flags,callback,user_data)","argsoriginal":"(const char* label,char* buf,size_t buf_size,const ImVec2& size=ImVec2(0,0),ImGuiInputTextFlags flags=0,ImGuiTextEditCallback callback=((void *)0),void* user_data=((void *)0))","stname":"ImGui","comment":"","defaults":{"callback":"((void *)0)","user_data":"((void *)0)","size":"ImVec2(0,0)","flags":"0"},"signature":"(const char*,char*,size_t,const ImVec2,ImGuiInputTextFlags,ImGuiTextEditCallback,void*)","cimguiname":"igInputTextMultiline"}],"igSelectable":[{"funcname":"Selectable","args":"(const char* label,bool selected,ImGuiSelectableFlags flags,const ImVec2 size)","ret":"bool","call_args":"(label,selected,flags,size)","argsoriginal":"(const char* label,bool selected=false,ImGuiSelectableFlags flags=0,const ImVec2& size=ImVec2(0,0))","stname":"ImGui","comment":" // \"bool selected\" carry the selection state (read-only). Selectable() is clicked is returns true so you can modify your selection state. size.x==0.0: use remaining width, size.x>0.0: specify width. size.y==0.0: use label height, size.y>0.0: specify height","ov_cimguiname":"igSelectable","defaults":{"selected":"false","size":"ImVec2(0,0)","flags":"0"},"signature":"(const char*,bool,ImGuiSelectableFlags,const ImVec2)","cimguiname":"igSelectable"},{"funcname":"Selectable","args":"(const char* label,bool* p_selected,ImGuiSelectableFlags flags,const ImVec2 size)","ret":"bool","call_args":"(label,p_selected,flags,size)","argsoriginal":"(const char* label,bool* p_selected,ImGuiSelectableFlags flags=0,const ImVec2& size=ImVec2(0,0))","stname":"ImGui","comment":" // \"bool* p_selected\" point to the selection state (read-write), as a convenient helper.","ov_cimguiname":"igSelectableBoolPtr","defaults":{"size":"ImVec2(0,0)","flags":"0"},"signature":"(const char*,bool*,ImGuiSelectableFlags,const ImVec2)","cimguiname":"igSelectable"}],"igListBox":[{"funcname":"ListBox","args":"(const char* label,int* current_item,const char* const items[],int items_count,int height_in_items)","ret":"bool","call_args":"(label,current_item,items,items_count,height_in_items)","argsoriginal":"(const char* label,int* current_item,const char* const items[],int items_count,int height_in_items=-1)","stname":"ImGui","comment":"","ov_cimguiname":"igListBoxStr_arr","defaults":{"height_in_items":"-1"},"signature":"(const char*,int*,const char* const[],int,int)","cimguiname":"igListBox"},{"funcname":"ListBox","args":"(const char* label,int* current_item,bool(*items_getter)(void* data,int idx,const char** out_text),void* data,int items_count,int height_in_items)","ret":"bool","call_args":"(label,current_item,items_getter,data,items_count,height_in_items)","argsoriginal":"(const char* label,int* current_item,bool(*items_getter)(void* data,int idx,const char** out_text),void* data,int items_count,int height_in_items=-1)","stname":"ImGui","comment":"","ov_cimguiname":"igListBoxFnPtr","defaults":{"height_in_items":"-1"},"signature":"(const char*,int*,bool(*)(void*,int,const char**),void*,int,int)","cimguiname":"igListBox"}],"ImGuiTextFilter_ImGuiTextFilter":[{"funcname":"ImGuiTextFilter","args":"(const char* default_filter)","call_args":"(default_filter)","argsoriginal":"(const char* default_filter=\"\")","stname":"ImGuiTextFilter","comment":"","defaults":{"default_filter":"\"\""},"signature":"(const char*)","cimguiname":"ImGuiTextFilter_ImGuiTextFilter"}],"ImDrawList_GetClipRectMin":[{"funcname":"GetClipRectMin","args":"()","ret":"inline ImVec2","call_args":"()","argsoriginal":"()","stname":"ImDrawList","comment":"","defaults":[],"signature":"()","cimguiname":"ImDrawList_GetClipRectMin"}],"ImDrawList_PopTextureID":[{"funcname":"PopTextureID","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImDrawList","comment":"","defaults":[],"signature":"()","cimguiname":"ImDrawList_PopTextureID"}],"igInputFloat4":[{"funcname":"InputFloat4","args":"(const char* label,float v[4],const char* format,ImGuiInputTextFlags extra_flags)","ret":"bool","call_args":"(label,v,format,extra_flags)","argsoriginal":"(const char* label,float v[4],const char* format=\"%.3f\",ImGuiInputTextFlags extra_flags=0)","stname":"ImGui","comment":"","defaults":{"extra_flags":"0","format":"\"%.3f\""},"signature":"(const char*,float[4],const char*,ImGuiInputTextFlags)","cimguiname":"igInputFloat4"}],"igNewLine":[{"funcname":"NewLine","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // undo a SameLine()","defaults":[],"signature":"()","cimguiname":"igNewLine"}],"igGetVersion":[{"funcname":"GetVersion","args":"()","ret":"const char*","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // get a version string e.g. \"1.23\"","defaults":[],"signature":"()","cimguiname":"igGetVersion"}],"igEndCombo":[{"funcname":"EndCombo","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // only call EndCombo() if BeginCombo() returns true!","defaults":[],"signature":"()","cimguiname":"igEndCombo"}],"TextRange_front":[{"funcname":"front","args":"()","ret":"char","call_args":"()","argsoriginal":"()","stname":"TextRange","comment":"","defaults":[],"signature":"()","cimguiname":"TextRange_front"}],"igPushID":[{"funcname":"PushID","args":"(const char* str_id)","ret":"void","call_args":"(str_id)","argsoriginal":"(const char* str_id)","stname":"ImGui","comment":" // push identifier into the ID stack. IDs are hash of the entire stack!","ov_cimguiname":"igPushIDStr","defaults":[],"signature":"(const char*)","cimguiname":"igPushID"},{"funcname":"PushID","args":"(const char* str_id_begin,const char* str_id_end)","ret":"void","call_args":"(str_id_begin,str_id_end)","argsoriginal":"(const char* str_id_begin,const char* str_id_end)","stname":"ImGui","comment":"","ov_cimguiname":"igPushIDRange","defaults":[],"signature":"(const char*,const char*)","cimguiname":"igPushID"},{"funcname":"PushID","args":"(const void* ptr_id)","ret":"void","call_args":"(ptr_id)","argsoriginal":"(const void* ptr_id)","stname":"ImGui","comment":"","ov_cimguiname":"igPushIDPtr","defaults":[],"signature":"(const void*)","cimguiname":"igPushID"},{"funcname":"PushID","args":"(int int_id)","ret":"void","call_args":"(int_id)","argsoriginal":"(int int_id)","stname":"ImGui","comment":"","ov_cimguiname":"igPushIDInt","defaults":[],"signature":"(int)","cimguiname":"igPushID"}],"ImDrawList_~ImDrawList":[{"funcname":"~ImDrawList","args":"()","call_args":"()","argsoriginal":"()","stname":"ImDrawList","comment":"","defaults":[],"signature":"()","cimguiname":"ImDrawList_~ImDrawList"}],"ImDrawList_ImDrawList":[{"funcname":"ImDrawList","args":"(const ImDrawListSharedData* shared_data)","call_args":"(shared_data)","argsoriginal":"(const ImDrawListSharedData* shared_data)","stname":"ImDrawList","comment":"","defaults":[],"signature":"(const ImDrawListSharedData*)","cimguiname":"ImDrawList_ImDrawList"}],"ImDrawCmd_ImDrawCmd":[{"funcname":"ImDrawCmd","args":"()","call_args":"()","argsoriginal":"()","stname":"ImDrawCmd","comment":"","defaults":[],"signature":"()","cimguiname":"ImDrawCmd_ImDrawCmd"}],"igAlignTextToFramePadding":[{"funcname":"AlignTextToFramePadding","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // vertically align upcoming text baseline to FramePadding.y so that it will align properly to regularly framed items (call if you have text on a line before a framed item)","defaults":[],"signature":"()","cimguiname":"igAlignTextToFramePadding"}],"igPopStyleColor":[{"funcname":"PopStyleColor","args":"(int count)","ret":"void","call_args":"(count)","argsoriginal":"(int count=1)","stname":"ImGui","comment":"","defaults":{"count":"1"},"signature":"(int)","cimguiname":"igPopStyleColor"}],"ImGuiListClipper_End":[{"funcname":"End","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImGuiListClipper","comment":" // Automatically called on the last call of Step() that returns false.","defaults":[],"signature":"()","cimguiname":"ImGuiListClipper_End"}],"igText":[{"isvararg":"...)","funcname":"Text","args":"(const char* fmt,...)","ret":"void","call_args":"(fmt,...)","argsoriginal":"(const char* fmt,...)","stname":"ImGui","comment":" // simple formatted text","defaults":[],"signature":"(const char*,...)","cimguiname":"igText"}],"ImGuiListClipper_Begin":[{"funcname":"Begin","args":"(int items_count,float items_height)","ret":"void","call_args":"(items_count,items_height)","argsoriginal":"(int items_count,float items_height=-1.0f)","stname":"ImGuiListClipper","comment":" // Automatically called by constructor if you passed 'items_count' or by Step() in Step 1.","defaults":{"items_height":"-1.0f"},"signature":"(int,float)","cimguiname":"ImGuiListClipper_Begin"}],"igGetTextLineHeightWithSpacing":[{"funcname":"GetTextLineHeightWithSpacing","args":"()","ret":"float","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // ~ FontSize + style.ItemSpacing.y (distance in pixels between 2 consecutive lines of text)","defaults":[],"signature":"()","cimguiname":"igGetTextLineHeightWithSpacing"}],"ImGuiListClipper_Step":[{"funcname":"Step","args":"()","ret":"bool","call_args":"()","argsoriginal":"()","stname":"ImGuiListClipper","comment":" // Call until it returns false. The DisplayStart/DisplayEnd fields will be set and you can process/draw those items.","defaults":[],"signature":"()","cimguiname":"ImGuiListClipper_Step"}],"ImGuiStorage_GetFloatRef":[{"funcname":"GetFloatRef","args":"(ImGuiID key,float default_val)","ret":"float*","call_args":"(key,default_val)","argsoriginal":"(ImGuiID key,float default_val=0.0f)","stname":"ImGuiStorage","comment":"","defaults":{"default_val":"0.0f"},"signature":"(ImGuiID,float)","cimguiname":"ImGuiStorage_GetFloatRef"}],"igEndTooltip":[{"funcname":"EndTooltip","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":"","defaults":[],"signature":"()","cimguiname":"igEndTooltip"}],"ImGuiListClipper_~ImGuiListClipper":[{"funcname":"~ImGuiListClipper","args":"()","call_args":"()","argsoriginal":"()","stname":"ImGuiListClipper","comment":" // Assert if user forgot to call End() or Step() until false.","defaults":[],"signature":"()","cimguiname":"ImGuiListClipper_~ImGuiListClipper"}],"igDragInt":[{"funcname":"DragInt","args":"(const char* label,int* v,float v_speed,int v_min,int v_max,const char* format)","ret":"bool","call_args":"(label,v,v_speed,v_min,v_max,format)","argsoriginal":"(const char* label,int* v,float v_speed=1.0f,int v_min=0,int v_max=0,const char* format=\"%d\")","stname":"ImGui","comment":" // If v_min >= v_max we have no bound","defaults":{"v_speed":"1.0f","v_min":"0","format":"\"%d\"","v_max":"0"},"signature":"(const char*,int*,float,int,int,const char*)","cimguiname":"igDragInt"}],"ImGuiListClipper_ImGuiListClipper":[{"funcname":"ImGuiListClipper","args":"(int items_count,float items_height)","call_args":"(items_count,items_height)","argsoriginal":"(int items_count=-1,float items_height=-1.0f)","stname":"ImGuiListClipper","comment":" // NB: Begin() initialize every fields (as we allow user to call Begin/End multiple times on a same instance if they want).","defaults":{"items_height":"-1.0f","items_count":"-1"},"signature":"(int,float)","cimguiname":"ImGuiListClipper_ImGuiListClipper"}],"igEndMainMenuBar":[{"funcname":"EndMainMenuBar","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // only call EndMainMenuBar() if BeginMainMenuBar() returns true!","defaults":[],"signature":"()","cimguiname":"igEndMainMenuBar"}],"igColorConvertHSVtoRGB":[{"funcname":"ColorConvertHSVtoRGB","args":"(float h,float s,float v,float out_r,float out_g,float out_b)","ret":"void","call_args":"(h,s,v,out_r,out_g,out_b)","argsoriginal":"(float h,float s,float v,float& out_r,float& out_g,float& out_b)","stname":"ImGui","comment":"","defaults":[],"signature":"(float,float,float,float,float,float)","cimguiname":"igColorConvertHSVtoRGB"}],"igPushClipRect":[{"funcname":"PushClipRect","args":"(const ImVec2 clip_rect_min,const ImVec2 clip_rect_max,bool intersect_with_current_clip_rect)","ret":"void","call_args":"(clip_rect_min,clip_rect_max,intersect_with_current_clip_rect)","argsoriginal":"(const ImVec2& clip_rect_min,const ImVec2& clip_rect_max,bool intersect_with_current_clip_rect)","stname":"ImGui","comment":"","defaults":[],"signature":"(const ImVec2,const ImVec2,bool)","cimguiname":"igPushClipRect"}],"igSetColumnWidth":[{"funcname":"SetColumnWidth","args":"(int column_index,float width)","ret":"void","call_args":"(column_index,width)","argsoriginal":"(int column_index,float width)","stname":"ImGui","comment":" // set column width (in pixels). pass -1 to use current column","defaults":[],"signature":"(int,float)","cimguiname":"igSetColumnWidth"}],"ImGuiIO_ImGuiIO":[{"funcname":"ImGuiIO","args":"()","call_args":"()","argsoriginal":"()","stname":"ImGuiIO","comment":"","defaults":[],"signature":"()","cimguiname":"ImGuiIO_ImGuiIO"}],"igBeginMainMenuBar":[{"funcname":"BeginMainMenuBar","args":"()","ret":"bool","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // create and append to a full screen menu-bar.","defaults":[],"signature":"()","cimguiname":"igBeginMainMenuBar"}],"CustomRect_CustomRect":[{"funcname":"CustomRect","args":"()","call_args":"()","argsoriginal":"()","stname":"CustomRect","comment":"","defaults":[],"signature":"()","cimguiname":"CustomRect_CustomRect"}],"ImGuiPayload_ImGuiPayload":[{"funcname":"ImGuiPayload","args":"()","call_args":"()","argsoriginal":"()","stname":"ImGuiPayload","comment":"","defaults":[],"signature":"()","cimguiname":"ImGuiPayload_ImGuiPayload"}],"igGetWindowContentRegionWidth":[{"funcname":"GetWindowContentRegionWidth","args":"()","ret":"float","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" //","defaults":[],"signature":"()","cimguiname":"igGetWindowContentRegionWidth"}],"ImFontAtlas_GetMouseCursorTexData":[{"funcname":"GetMouseCursorTexData","args":"(ImGuiMouseCursor cursor,ImVec2* out_offset,ImVec2* out_size,ImVec2 out_uv_border[2],ImVec2 out_uv_fill[2])","ret":"bool","call_args":"(cursor,out_offset,out_size,out_uv_border,out_uv_fill)","argsoriginal":"(ImGuiMouseCursor cursor,ImVec2* out_offset,ImVec2* out_size,ImVec2 out_uv_border[2],ImVec2 out_uv_fill[2])","stname":"ImFontAtlas","comment":"","defaults":[],"signature":"(ImGuiMouseCursor,ImVec2*,ImVec2*,ImVec2[2],ImVec2[2])","cimguiname":"ImFontAtlas_GetMouseCursorTexData"}],"igVSliderScalar":[{"funcname":"VSliderScalar","args":"(const char* label,const ImVec2 size,ImGuiDataType data_type,void* v,const void* v_min,const void* v_max,const char* format,float power)","ret":"bool","call_args":"(label,size,data_type,v,v_min,v_max,format,power)","argsoriginal":"(const char* label,const ImVec2& size,ImGuiDataType data_type,void* v,const void* v_min,const void* v_max,const char* format=((void *)0),float power=1.0f)","stname":"ImGui","comment":"","defaults":{"power":"1.0f","format":"((void *)0)"},"signature":"(const char*,const ImVec2,ImGuiDataType,void*,const void*,const void*,const char*,float)","cimguiname":"igVSliderScalar"}],"ImGuiStorage_SetVoidPtr":[{"funcname":"SetVoidPtr","args":"(ImGuiID key,void* val)","ret":"void","call_args":"(key,val)","argsoriginal":"(ImGuiID key,void* val)","stname":"ImGuiStorage","comment":"","defaults":[],"signature":"(ImGuiID,void*)","cimguiname":"ImGuiStorage_SetVoidPtr"}],"ImGuiStorage_SetAllInt":[{"funcname":"SetAllInt","args":"(int val)","ret":"void","call_args":"(val)","argsoriginal":"(int val)","stname":"ImGuiStorage","comment":"","defaults":[],"signature":"(int)","cimguiname":"ImGuiStorage_SetAllInt"}],"igStyleColorsLight":[{"funcname":"StyleColorsLight","args":"(ImGuiStyle* dst)","ret":"void","call_args":"(dst)","argsoriginal":"(ImGuiStyle* dst=((void *)0))","stname":"ImGui","comment":" // best used with borders and a custom, thicker font","defaults":{"dst":"((void *)0)"},"signature":"(ImGuiStyle*)","cimguiname":"igStyleColorsLight"}],"igSliderFloat3":[{"funcname":"SliderFloat3","args":"(const char* label,float v[3],float v_min,float v_max,const char* format,float power)","ret":"bool","call_args":"(label,v,v_min,v_max,format,power)","argsoriginal":"(const char* label,float v[3],float v_min,float v_max,const char* format=\"%.3f\",float power=1.0f)","stname":"ImGui","comment":"","defaults":{"power":"1.0f","format":"\"%.3f\""},"signature":"(const char*,float[3],float,float,const char*,float)","cimguiname":"igSliderFloat3"}],"igSetAllocatorFunctions":[{"funcname":"SetAllocatorFunctions","args":"(void*(*alloc_func)(size_t sz,void* user_data),void(*free_func)(void* ptr,void* user_data),void* user_data)","ret":"void","call_args":"(alloc_func,free_func,user_data)","argsoriginal":"(void*(*alloc_func)(size_t sz,void* user_data),void(*free_func)(void* ptr,void* user_data),void* user_data=((void *)0))","stname":"ImGui","comment":"","defaults":{"user_data":"((void *)0)"},"signature":"(void*(*)(size_t,void*),void(*)(void*,void*),void*)","cimguiname":"igSetAllocatorFunctions"}],"igDragFloat":[{"funcname":"DragFloat","args":"(const char* label,float* v,float v_speed,float v_min,float v_max,const char* format,float power)","ret":"bool","call_args":"(label,v,v_speed,v_min,v_max,format,power)","argsoriginal":"(const char* label,float* v,float v_speed=1.0f,float v_min=0.0f,float v_max=0.0f,const char* format=\"%.3f\",float power=1.0f)","stname":"ImGui","comment":" // If v_min >= v_max we have no bound","defaults":{"v_speed":"1.0f","v_min":"0.0f","power":"1.0f","v_max":"0.0f","format":"\"%.3f\""},"signature":"(const char*,float*,float,float,float,const char*,float)","cimguiname":"igDragFloat"}],"ImGuiStorage_GetVoidPtrRef":[{"funcname":"GetVoidPtrRef","args":"(ImGuiID key,void* default_val)","ret":"void**","call_args":"(key,default_val)","argsoriginal":"(ImGuiID key,void* default_val=((void *)0))","stname":"ImGuiStorage","comment":"","defaults":{"default_val":"((void *)0)"},"signature":"(ImGuiID,void*)","cimguiname":"ImGuiStorage_GetVoidPtrRef"}],"igGetWindowHeight":[{"funcname":"GetWindowHeight","args":"()","ret":"float","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // get current window height (shortcut for GetWindowSize().y)","defaults":[],"signature":"()","cimguiname":"igGetWindowHeight"}],"igGetMousePosOnOpeningCurrentPopup":[{"funcname":"GetMousePosOnOpeningCurrentPopup","args":"()","ret":"ImVec2","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // retrieve backup of mouse position at the time of opening popup we have BeginPopup() into","defaults":[],"signature":"()","cimguiname":"igGetMousePosOnOpeningCurrentPopup"}],"ImGuiStorage_GetBoolRef":[{"funcname":"GetBoolRef","args":"(ImGuiID key,bool default_val)","ret":"bool*","call_args":"(key,default_val)","argsoriginal":"(ImGuiID key,bool default_val=false)","stname":"ImGuiStorage","comment":"","defaults":{"default_val":"false"},"signature":"(ImGuiID,bool)","cimguiname":"ImGuiStorage_GetBoolRef"}],"igCalcListClipping":[{"funcname":"CalcListClipping","args":"(int items_count,float items_height,int* out_items_display_start,int* out_items_display_end)","ret":"void","call_args":"(items_count,items_height,out_items_display_start,out_items_display_end)","argsoriginal":"(int items_count,float items_height,int* out_items_display_start,int* out_items_display_end)","stname":"ImGui","comment":" // calculate coarse clipping for large list of evenly sized items. Prefer using the ImGuiListClipper higher-level helper if you can.","defaults":[],"signature":"(int,float,int*,int*)","cimguiname":"igCalcListClipping"}],"ImGuiStorage_GetIntRef":[{"funcname":"GetIntRef","args":"(ImGuiID key,int default_val)","ret":"int*","call_args":"(key,default_val)","argsoriginal":"(ImGuiID key,int default_val=0)","stname":"ImGuiStorage","comment":"","defaults":{"default_val":"0"},"signature":"(ImGuiID,int)","cimguiname":"ImGuiStorage_GetIntRef"}],"igEndDragDropSource":[{"funcname":"EndDragDropSource","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // only call EndDragDropSource() if BeginDragDropSource() returns true!","defaults":[],"signature":"()","cimguiname":"igEndDragDropSource"}],"ImGuiStorage_BuildSortByKey":[{"funcname":"BuildSortByKey","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImGuiStorage","comment":"","defaults":[],"signature":"()","cimguiname":"ImGuiStorage_BuildSortByKey"}],"ImGuiStorage_SetFloat":[{"funcname":"SetFloat","args":"(ImGuiID key,float val)","ret":"void","call_args":"(key,val)","argsoriginal":"(ImGuiID key,float val)","stname":"ImGuiStorage","comment":"","defaults":[],"signature":"(ImGuiID,float)","cimguiname":"ImGuiStorage_SetFloat"}],"ImGuiStorage_GetFloat":[{"funcname":"GetFloat","args":"(ImGuiID key,float default_val)","ret":"float","call_args":"(key,default_val)","argsoriginal":"(ImGuiID key,float default_val=0.0f)","stname":"ImGuiStorage","comment":"","defaults":{"default_val":"0.0f"},"signature":"(ImGuiID,float)","cimguiname":"ImGuiStorage_GetFloat"}],"ImGuiStorage_SetBool":[{"funcname":"SetBool","args":"(ImGuiID key,bool val)","ret":"void","call_args":"(key,val)","argsoriginal":"(ImGuiID key,bool val)","stname":"ImGuiStorage","comment":"","defaults":[],"signature":"(ImGuiID,bool)","cimguiname":"ImGuiStorage_SetBool"}],"igLabelTextV":[{"funcname":"LabelTextV","args":"(const char* label,const char* fmt,va_list args)","ret":"void","call_args":"(label,fmt,args)","argsoriginal":"(const char* label,const char* fmt,va_list args)","stname":"ImGui","comment":"","defaults":[],"signature":"(const char*,const char*,va_list)","cimguiname":"igLabelTextV"}],"igGetFrameHeightWithSpacing":[{"funcname":"GetFrameHeightWithSpacing","args":"()","ret":"float","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // ~ FontSize + style.FramePadding.y * 2 + style.ItemSpacing.y (distance in pixels between 2 consecutive lines of framed widgets)","defaults":[],"signature":"()","cimguiname":"igGetFrameHeightWithSpacing"}],"ImGuiStorage_SetInt":[{"funcname":"SetInt","args":"(ImGuiID key,int val)","ret":"void","call_args":"(key,val)","argsoriginal":"(ImGuiID key,int val)","stname":"ImGuiStorage","comment":"","defaults":[],"signature":"(ImGuiID,int)","cimguiname":"ImGuiStorage_SetInt"}],"igCloseCurrentPopup":[{"funcname":"CloseCurrentPopup","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // close the popup we have begin-ed into. clicking on a MenuItem or Selectable automatically close the current popup.","defaults":[],"signature":"()","cimguiname":"igCloseCurrentPopup"}],"ImGuiTextBuffer_clear":[{"funcname":"clear","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImGuiTextBuffer","comment":"","defaults":[],"signature":"()","cimguiname":"ImGuiTextBuffer_clear"}],"igPushTextWrapPos":[{"funcname":"PushTextWrapPos","args":"(float wrap_pos_x)","ret":"void","call_args":"(wrap_pos_x)","argsoriginal":"(float wrap_pos_x=0.0f)","stname":"ImGui","comment":" // word-wrapping for Text*() commands. < 0.0f: no wrapping; 0.0f: wrap to end of window (or column); > 0.0f: wrap at 'wrap_pos_x' position in window local space","defaults":{"wrap_pos_x":"0.0f"},"signature":"(float)","cimguiname":"igPushTextWrapPos"}],"ImGuiStorage_Clear":[{"funcname":"Clear","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImGuiStorage","comment":"","defaults":[],"signature":"()","cimguiname":"ImGuiStorage_Clear"}],"Pair_Pair":[{"funcname":"Pair","args":"(ImGuiID _key,int _val_i)","call_args":"(_key,_val_i)","argsoriginal":"(ImGuiID _key,int _val_i)","stname":"Pair","comment":"","ov_cimguiname":"Pair_PairInt","defaults":[],"signature":"(ImGuiID,int)","cimguiname":"Pair_Pair"},{"funcname":"Pair","args":"(ImGuiID _key,float _val_f)","call_args":"(_key,_val_f)","argsoriginal":"(ImGuiID _key,float _val_f)","stname":"Pair","comment":"","ov_cimguiname":"Pair_PairFloat","defaults":[],"signature":"(ImGuiID,float)","cimguiname":"Pair_Pair"},{"funcname":"Pair","args":"(ImGuiID _key,void* _val_p)","call_args":"(_key,_val_p)","argsoriginal":"(ImGuiID _key,void* _val_p)","stname":"Pair","comment":"","ov_cimguiname":"Pair_PairPtr","defaults":[],"signature":"(ImGuiID,void*)","cimguiname":"Pair_Pair"}],"ImGuiTextBuffer_appendf":[{"isvararg":"...)","funcname":"appendf","args":"(const char* fmt,...)","ret":"void","call_args":"(fmt,...)","argsoriginal":"(const char* fmt,...)","stname":"ImGuiTextBuffer","comment":"","defaults":[],"signature":"(const char*,...)","cimguiname":"ImGuiTextBuffer_appendf"}],"ImGuiTextBuffer_c_str":[{"funcname":"c_str","args":"()","ret":"const char*","call_args":"()","argsoriginal":"()","stname":"ImGuiTextBuffer","comment":"","defaults":[],"signature":"()","cimguiname":"ImGuiTextBuffer_c_str"}],"ImGuiTextBuffer_reserve":[{"funcname":"reserve","args":"(int capacity)","ret":"void","call_args":"(capacity)","argsoriginal":"(int capacity)","stname":"ImGuiTextBuffer","comment":"","defaults":[],"signature":"(int)","cimguiname":"ImGuiTextBuffer_reserve"}],"ImGuiTextBuffer_empty":[{"funcname":"empty","args":"()","ret":"bool","call_args":"()","argsoriginal":"()","stname":"ImGuiTextBuffer","comment":"","defaults":[],"signature":"()","cimguiname":"ImGuiTextBuffer_empty"}],"igSliderScalar":[{"funcname":"SliderScalar","args":"(const char* label,ImGuiDataType data_type,void* v,const void* v_min,const void* v_max,const char* format,float power)","ret":"bool","call_args":"(label,data_type,v,v_min,v_max,format,power)","argsoriginal":"(const char* label,ImGuiDataType data_type,void* v,const void* v_min,const void* v_max,const char* format=((void *)0),float power=1.0f)","stname":"ImGui","comment":"","defaults":{"power":"1.0f","format":"((void *)0)"},"signature":"(const char*,ImGuiDataType,void*,const void*,const void*,const char*,float)","cimguiname":"igSliderScalar"}],"igTreePush":[{"funcname":"TreePush","args":"(const char* str_id)","ret":"void","call_args":"(str_id)","argsoriginal":"(const char* str_id)","stname":"ImGui","comment":" // ~ Indent()+PushId(). Already called by TreeNode() when returning true, but you can call TreePush/TreePop yourself if desired.","ov_cimguiname":"igTreePushStr","defaults":[],"signature":"(const char*)","cimguiname":"igTreePush"},{"funcname":"TreePush","args":"(const void* ptr_id)","ret":"void","call_args":"(ptr_id)","argsoriginal":"(const void* ptr_id=((void *)0))","stname":"ImGui","comment":" // \"","ov_cimguiname":"igTreePushPtr","defaults":{"ptr_id":"((void *)0)"},"signature":"(const void*)","cimguiname":"igTreePush"}],"ImGuiTextBuffer_size":[{"funcname":"size","args":"()","ret":"int","call_args":"()","argsoriginal":"()","stname":"ImGuiTextBuffer","comment":"","defaults":[],"signature":"()","cimguiname":"ImGuiTextBuffer_size"}],"igBeginMenu":[{"funcname":"BeginMenu","args":"(const char* label,bool enabled)","ret":"bool","call_args":"(label,enabled)","argsoriginal":"(const char* label,bool enabled=true)","stname":"ImGui","comment":" // create a sub-menu entry. only call EndMenu() if this returns true!","defaults":{"enabled":"true"},"signature":"(const char*,bool)","cimguiname":"igBeginMenu"}],"igIsItemHovered":[{"funcname":"IsItemHovered","args":"(ImGuiHoveredFlags flags)","ret":"bool","call_args":"(flags)","argsoriginal":"(ImGuiHoveredFlags flags=0)","stname":"ImGui","comment":" // is the last item hovered? (and usable, aka not blocked by a popup, etc.). See ImGuiHoveredFlags for more options.","defaults":{"flags":"0"},"signature":"(ImGuiHoveredFlags)","cimguiname":"igIsItemHovered"}],"ImDrawList_PrimWriteVtx":[{"funcname":"PrimWriteVtx","args":"(const ImVec2 pos,const ImVec2 uv,ImU32 col)","ret":"inline void","call_args":"(pos,uv,col)","argsoriginal":"(const ImVec2& pos,const ImVec2& uv,ImU32 col)","stname":"ImDrawList","comment":"","defaults":[],"signature":"(const ImVec2,const ImVec2,ImU32)","cimguiname":"ImDrawList_PrimWriteVtx"}],"igBullet":[{"funcname":"Bullet","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // draw a small circle and keep the cursor on the same line. advance cursor x position by GetTreeNodeToLabelSpacing(), same distance that TreeNode() uses","defaults":[],"signature":"()","cimguiname":"igBullet"}],"igSliderFloat":[{"funcname":"SliderFloat","args":"(const char* label,float* v,float v_min,float v_max,const char* format,float power)","ret":"bool","call_args":"(label,v,v_min,v_max,format,power)","argsoriginal":"(const char* label,float* v,float v_min,float v_max,const char* format=\"%.3f\",float power=1.0f)","stname":"ImGui","comment":" // adjust format to decorate the value with a prefix or a suffix for in-slider labels or unit display. Use power!=1.0 for power curve sliders","defaults":{"power":"1.0f","format":"\"%.3f\""},"signature":"(const char*,float*,float,float,const char*,float)","cimguiname":"igSliderFloat"}],"igInputInt3":[{"funcname":"InputInt3","args":"(const char* label,int v[3],ImGuiInputTextFlags extra_flags)","ret":"bool","call_args":"(label,v,extra_flags)","argsoriginal":"(const char* label,int v[3],ImGuiInputTextFlags extra_flags=0)","stname":"ImGui","comment":"","defaults":{"extra_flags":"0"},"signature":"(const char*,int[3],ImGuiInputTextFlags)","cimguiname":"igInputInt3"}],"igIsMouseDoubleClicked":[{"funcname":"IsMouseDoubleClicked","args":"(int button)","ret":"bool","call_args":"(button)","argsoriginal":"(int button)","stname":"ImGui","comment":" // did mouse button double-clicked. a double-click returns false in IsMouseClicked(). uses io.MouseDoubleClickTime.","defaults":[],"signature":"(int)","cimguiname":"igIsMouseDoubleClicked"}],"igStyleColorsDark":[{"funcname":"StyleColorsDark","args":"(ImGuiStyle* dst)","ret":"void","call_args":"(dst)","argsoriginal":"(ImGuiStyle* dst=((void *)0))","stname":"ImGui","comment":" // new, recommended style (default)","defaults":{"dst":"((void *)0)"},"signature":"(ImGuiStyle*)","cimguiname":"igStyleColorsDark"}],"igInputInt":[{"funcname":"InputInt","args":"(const char* label,int* v,int step,int step_fast,ImGuiInputTextFlags extra_flags)","ret":"bool","call_args":"(label,v,step,step_fast,extra_flags)","argsoriginal":"(const char* label,int* v,int step=1,int step_fast=100,ImGuiInputTextFlags extra_flags=0)","stname":"ImGui","comment":"","defaults":{"step":"1","extra_flags":"0","step_fast":"100"},"signature":"(const char*,int*,int,int,ImGuiInputTextFlags)","cimguiname":"igInputInt"}],"igSetWindowFontScale":[{"funcname":"SetWindowFontScale","args":"(float scale)","ret":"void","call_args":"(scale)","argsoriginal":"(float scale)","stname":"ImGui","comment":" // set font scale. Adjust IO.FontGlobalScale if you want to scale all windows","defaults":[],"signature":"(float)","cimguiname":"igSetWindowFontScale"}],"igSliderInt":[{"funcname":"SliderInt","args":"(const char* label,int* v,int v_min,int v_max,const char* format)","ret":"bool","call_args":"(label,v,v_min,v_max,format)","argsoriginal":"(const char* label,int* v,int v_min,int v_max,const char* format=\"%d\")","stname":"ImGui","comment":"","defaults":{"format":"\"%d\""},"signature":"(const char*,int*,int,int,const char*)","cimguiname":"igSliderInt"}],"igIsItemDeactivatedAfterChange":[{"funcname":"IsItemDeactivatedAfterChange","args":"()","ret":"bool","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // was the last item just made inactive and made a value change when it was active? (e.g. Slider/Drag moved). Useful for Undo/Redo patterns with widgets that requires continuous editing. Note that you may get false positives (some widgets such as Combo()/ListBox()/Selectable() will return true even when clicking an already selected item).","defaults":[],"signature":"()","cimguiname":"igIsItemDeactivatedAfterChange"}],"igColorConvertU32ToFloat4":[{"funcname":"ColorConvertU32ToFloat4","args":"(ImU32 in)","ret":"ImVec4","call_args":"(in)","argsoriginal":"(ImU32 in)","stname":"ImGui","comment":"","defaults":[],"signature":"(ImU32)","cimguiname":"igColorConvertU32ToFloat4"}],"igSetNextWindowPos":[{"funcname":"SetNextWindowPos","args":"(const ImVec2 pos,ImGuiCond cond,const ImVec2 pivot)","ret":"void","call_args":"(pos,cond,pivot)","argsoriginal":"(const ImVec2& pos,ImGuiCond cond=0,const ImVec2& pivot=ImVec2(0,0))","stname":"ImGui","comment":" // set next window position. call before Begin(). use pivot=(0.5f,0.5f) to center on given point, etc.","defaults":{"cond":"0","pivot":"ImVec2(0,0)"},"signature":"(const ImVec2,ImGuiCond,const ImVec2)","cimguiname":"igSetNextWindowPos"}],"igDragInt3":[{"funcname":"DragInt3","args":"(const char* label,int v[3],float v_speed,int v_min,int v_max,const char* format)","ret":"bool","call_args":"(label,v,v_speed,v_min,v_max,format)","argsoriginal":"(const char* label,int v[3],float v_speed=1.0f,int v_min=0,int v_max=0,const char* format=\"%d\")","stname":"ImGui","comment":"","defaults":{"v_speed":"1.0f","v_min":"0","format":"\"%d\"","v_max":"0"},"signature":"(const char*,int[3],float,int,int,const char*)","cimguiname":"igDragInt3"}],"igOpenPopup":[{"funcname":"OpenPopup","args":"(const char* str_id)","ret":"void","call_args":"(str_id)","argsoriginal":"(const char* str_id)","stname":"ImGui","comment":" // call to mark popup as open (don't call every frame!). popups are closed when user click outside, or if CloseCurrentPopup() is called within a BeginPopup()/EndPopup() block. By default, Selectable()/MenuItem() are calling CloseCurrentPopup(). Popup identifiers are relative to the current ID-stack (so OpenPopup and BeginPopup needs to be at the same level).","defaults":[],"signature":"(const char*)","cimguiname":"igOpenPopup"}],"igGetWindowContentRegionMax":[{"funcname":"GetWindowContentRegionMax","args":"()","ret":"ImVec2","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // content boundaries max (roughly (0,0)+Size-Scroll) where Size can be override with SetNextWindowContentSize(), in window coordinates","defaults":[],"signature":"()","cimguiname":"igGetWindowContentRegionMax"}],"ImDrawList_GetClipRectMax":[{"funcname":"GetClipRectMax","args":"()","ret":"inline ImVec2","call_args":"()","argsoriginal":"()","stname":"ImDrawList","comment":"","defaults":[],"signature":"()","cimguiname":"ImDrawList_GetClipRectMax"}],"ImGuiOnceUponAFrame_ImGuiOnceUponAFrame":[{"funcname":"ImGuiOnceUponAFrame","args":"()","call_args":"()","argsoriginal":"()","stname":"ImGuiOnceUponAFrame","comment":"","defaults":[],"signature":"()","cimguiname":"ImGuiOnceUponAFrame_ImGuiOnceUponAFrame"}],"igGetDrawListSharedData":[{"funcname":"GetDrawListSharedData","args":"()","ret":"ImDrawListSharedData*","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // you may use this when creating your own ImDrawList instances","defaults":[],"signature":"()","cimguiname":"igGetDrawListSharedData"}],"TextRange_end":[{"funcname":"end","args":"()","ret":"const char*","call_args":"()","argsoriginal":"()","stname":"TextRange","comment":"","defaults":[],"signature":"()","cimguiname":"TextRange_end"}],"igIsItemActive":[{"funcname":"IsItemActive","args":"()","ret":"bool","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // is the last item active? (e.g. button being held, text field being edited. This will continuously return true while holding mouse button on an item. Items that don't interact will always return false)","defaults":[],"signature":"()","cimguiname":"igIsItemActive"}],"TextRange_begin":[{"funcname":"begin","args":"()","ret":"const char*","call_args":"()","argsoriginal":"()","stname":"TextRange","comment":"","defaults":[],"signature":"()","cimguiname":"TextRange_begin"}],"TextRange_TextRange":[{"funcname":"TextRange","args":"()","call_args":"()","argsoriginal":"()","stname":"TextRange","comment":"","ov_cimguiname":"TextRange_TextRange","defaults":[],"signature":"()","cimguiname":"TextRange_TextRange"},{"funcname":"TextRange","args":"(const char* _b,const char* _e)","call_args":"(_b,_e)","argsoriginal":"(const char* _b,const char* _e)","stname":"TextRange","comment":"","ov_cimguiname":"TextRange_TextRangeStr","defaults":[],"signature":"(const char*,const char*)","cimguiname":"TextRange_TextRange"}],"igBeginDragDropTarget":[{"funcname":"BeginDragDropTarget","args":"()","ret":"bool","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // call after submitting an item that may receive an item. If this returns true, you can call AcceptDragDropPayload() + EndDragDropTarget()","defaults":[],"signature":"()","cimguiname":"igBeginDragDropTarget"}],"TextRange_empty":[{"funcname":"empty","args":"()","ret":"bool","call_args":"()","argsoriginal":"()","stname":"TextRange","comment":"","defaults":[],"signature":"()","cimguiname":"TextRange_empty"}],"ImGuiPayload_IsDelivery":[{"funcname":"IsDelivery","args":"()","ret":"bool","call_args":"()","argsoriginal":"()","stname":"ImGuiPayload","comment":"","defaults":[],"signature":"()","cimguiname":"ImGuiPayload_IsDelivery"}],"ImGuiIO_ClearInputCharacters":[{"funcname":"ClearInputCharacters","args":"()","ret":"inline void","call_args":"()","argsoriginal":"()","stname":"ImGuiIO","comment":" // Clear the text input buffer manually","defaults":[],"signature":"()","cimguiname":"ImGuiIO_ClearInputCharacters"}],"ImDrawList_AddImageRounded":[{"funcname":"AddImageRounded","args":"(ImTextureID user_texture_id,const ImVec2 a,const ImVec2 b,const ImVec2 uv_a,const ImVec2 uv_b,ImU32 col,float rounding,int rounding_corners)","ret":"void","call_args":"(user_texture_id,a,b,uv_a,uv_b,col,rounding,rounding_corners)","argsoriginal":"(ImTextureID user_texture_id,const ImVec2& a,const ImVec2& b,const ImVec2& uv_a,const ImVec2& uv_b,ImU32 col,float rounding,int rounding_corners=ImDrawCornerFlags_All)","stname":"ImDrawList","comment":"","defaults":{"rounding_corners":"ImDrawCornerFlags_All"},"signature":"(ImTextureID,const ImVec2,const ImVec2,const ImVec2,const ImVec2,ImU32,float,int)","cimguiname":"ImDrawList_AddImageRounded"}],"igGetColorU32":[{"funcname":"GetColorU32","args":"(ImGuiCol idx,float alpha_mul)","ret":"ImU32","call_args":"(idx,alpha_mul)","argsoriginal":"(ImGuiCol idx,float alpha_mul=1.0f)","stname":"ImGui","comment":" // retrieve given style color with style alpha applied and optional extra alpha multiplier","ov_cimguiname":"igGetColorU32","defaults":{"alpha_mul":"1.0f"},"signature":"(ImGuiCol,float)","cimguiname":"igGetColorU32"},{"funcname":"GetColorU32","args":"(const ImVec4 col)","ret":"ImU32","call_args":"(col)","argsoriginal":"(const ImVec4& col)","stname":"ImGui","comment":" // retrieve given color with style alpha applied","ov_cimguiname":"igGetColorU32Vec4","defaults":[],"signature":"(const ImVec4)","cimguiname":"igGetColorU32"},{"funcname":"GetColorU32","args":"(ImU32 col)","ret":"ImU32","call_args":"(col)","argsoriginal":"(ImU32 col)","stname":"ImGui","comment":" // retrieve given color with style alpha applied","ov_cimguiname":"igGetColorU32U32","defaults":[],"signature":"(ImU32)","cimguiname":"igGetColorU32"}],"ImGuiStyle_ImGuiStyle":[{"funcname":"ImGuiStyle","args":"()","call_args":"()","argsoriginal":"()","stname":"ImGuiStyle","comment":"","defaults":[],"signature":"()","cimguiname":"ImGuiStyle_ImGuiStyle"}],"igGetContentRegionMax":[{"funcname":"GetContentRegionMax","args":"()","ret":"ImVec2","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // current content boundaries (typically window boundaries including scrolling, or current column boundaries), in windows coordinates","defaults":[],"signature":"()","cimguiname":"igGetContentRegionMax"}],"igBeginChildFrame":[{"funcname":"BeginChildFrame","args":"(ImGuiID id,const ImVec2 size,ImGuiWindowFlags flags)","ret":"bool","call_args":"(id,size,flags)","argsoriginal":"(ImGuiID id,const ImVec2& size,ImGuiWindowFlags flags=0)","stname":"ImGui","comment":" // helper to create a child window / scrolling region that looks like a normal widget frame","defaults":{"flags":"0"},"signature":"(ImGuiID,const ImVec2,ImGuiWindowFlags)","cimguiname":"igBeginChildFrame"}],"igSetCurrentContext":[{"funcname":"SetCurrentContext","args":"(ImGuiContext* ctx)","ret":"void","call_args":"(ctx)","argsoriginal":"(ImGuiContext* ctx)","stname":"ImGui","comment":"","defaults":[],"signature":"(ImGuiContext*)","cimguiname":"igSetCurrentContext"}],"ImFont_ClearOutputData":[{"funcname":"ClearOutputData","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImFont","comment":"","defaults":[],"signature":"()","cimguiname":"ImFont_ClearOutputData"}],"igLoadIniSettingsFromMemory":[{"funcname":"LoadIniSettingsFromMemory","args":"(const char* ini_data,size_t ini_size)","ret":"void","call_args":"(ini_data,ini_size)","argsoriginal":"(const char* ini_data,size_t ini_size=0)","stname":"ImGui","comment":" // call after CreateContext() and before the first call to NewFrame() to provide .ini data from your own data source.","defaults":{"ini_size":"0"},"signature":"(const char*,size_t)","cimguiname":"igLoadIniSettingsFromMemory"}],"ImDrawList_PrimQuadUV":[{"funcname":"PrimQuadUV","args":"(const ImVec2 a,const ImVec2 b,const ImVec2 c,const ImVec2 d,const ImVec2 uv_a,const ImVec2 uv_b,const ImVec2 uv_c,const ImVec2 uv_d,ImU32 col)","ret":"void","call_args":"(a,b,c,d,uv_a,uv_b,uv_c,uv_d,col)","argsoriginal":"(const ImVec2& a,const ImVec2& b,const ImVec2& c,const ImVec2& d,const ImVec2& uv_a,const ImVec2& uv_b,const ImVec2& uv_c,const ImVec2& uv_d,ImU32 col)","stname":"ImDrawList","comment":"","defaults":[],"signature":"(const ImVec2,const ImVec2,const ImVec2,const ImVec2,const ImVec2,const ImVec2,const ImVec2,const ImVec2,ImU32)","cimguiname":"ImDrawList_PrimQuadUV"}],"igEndDragDropTarget":[{"funcname":"EndDragDropTarget","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // only call EndDragDropTarget() if BeginDragDropTarget() returns true!","defaults":[],"signature":"()","cimguiname":"igEndDragDropTarget"}],"ImFontAtlas_GetGlyphRangesKorean":[{"funcname":"GetGlyphRangesKorean","args":"()","ret":"const ImWchar*","call_args":"()","argsoriginal":"()","stname":"ImFontAtlas","comment":" // Default + Korean characters","defaults":[],"signature":"()","cimguiname":"ImFontAtlas_GetGlyphRangesKorean"}],"igGetKeyPressedAmount":[{"funcname":"GetKeyPressedAmount","args":"(int key_index,float repeat_delay,float rate)","ret":"int","call_args":"(key_index,repeat_delay,rate)","argsoriginal":"(int key_index,float repeat_delay,float rate)","stname":"ImGui","comment":" // uses provided repeat rate/delay. return a count, most often 0 or 1 but might be >1 if RepeatRate is small enough that DeltaTime > RepeatRate","defaults":[],"signature":"(int,float,float)","cimguiname":"igGetKeyPressedAmount"}],"ImFontAtlas_GetTexDataAsRGBA32":[{"funcname":"GetTexDataAsRGBA32","args":"(unsigned char** out_pixels,int* out_width,int* out_height,int* out_bytes_per_pixel)","ret":"void","call_args":"(out_pixels,out_width,out_height,out_bytes_per_pixel)","argsoriginal":"(unsigned char** out_pixels,int* out_width,int* out_height,int* out_bytes_per_pixel=((void *)0))","stname":"ImFontAtlas","comment":" // 4 bytes-per-pixel","defaults":{"out_bytes_per_pixel":"((void *)0)"},"signature":"(unsigned char**,int*,int*,int*)","cimguiname":"ImFontAtlas_GetTexDataAsRGBA32"}],"igNewFrame":[{"funcname":"NewFrame","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // start a new ImGui frame, you can submit any command from this point until Render()/EndFrame().","defaults":[],"signature":"()","cimguiname":"igNewFrame"}],"igResetMouseDragDelta":[{"funcname":"ResetMouseDragDelta","args":"(int button)","ret":"void","call_args":"(button)","argsoriginal":"(int button=0)","stname":"ImGui","comment":" //","defaults":{"button":"0"},"signature":"(int)","cimguiname":"igResetMouseDragDelta"}],"igGetTreeNodeToLabelSpacing":[{"funcname":"GetTreeNodeToLabelSpacing","args":"()","ret":"float","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // horizontal distance preceding label when using TreeNode*() or Bullet() == (g.FontSize + style.FramePadding.x*2) for a regular unframed TreeNode","defaults":[],"signature":"()","cimguiname":"igGetTreeNodeToLabelSpacing"}],"igArrowButton":[{"funcname":"ArrowButton","args":"(const char* str_id,ImGuiDir dir)","ret":"bool","call_args":"(str_id,dir)","argsoriginal":"(const char* str_id,ImGuiDir dir)","stname":"ImGui","comment":" // square button with an arrow shape","defaults":[],"signature":"(const char*,ImGuiDir)","cimguiname":"igArrowButton"}],"GlyphRangesBuilder_AddChar":[{"funcname":"AddChar","args":"(ImWchar c)","ret":"void","call_args":"(c)","argsoriginal":"(ImWchar c)","stname":"GlyphRangesBuilder","comment":" // Add character","defaults":[],"signature":"(ImWchar)","cimguiname":"GlyphRangesBuilder_AddChar"}],"igPopID":[{"funcname":"PopID","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":"","defaults":[],"signature":"()","cimguiname":"igPopID"}],"igSetStateStorage":[{"funcname":"SetStateStorage","args":"(ImGuiStorage* storage)","ret":"void","call_args":"(storage)","argsoriginal":"(ImGuiStorage* storage)","stname":"ImGui","comment":" // replace current window storage with our own (if you want to manipulate it yourself, typically clear subsection of it)","defaults":[],"signature":"(ImGuiStorage*)","cimguiname":"igSetStateStorage"}],"igStyleColorsClassic":[{"funcname":"StyleColorsClassic","args":"(ImGuiStyle* dst)","ret":"void","call_args":"(dst)","argsoriginal":"(ImGuiStyle* dst=((void *)0))","stname":"ImGui","comment":" // classic imgui style","defaults":{"dst":"((void *)0)"},"signature":"(ImGuiStyle*)","cimguiname":"igStyleColorsClassic"}],"ImGuiTextFilter_IsActive":[{"funcname":"IsActive","args":"()","ret":"bool","call_args":"()","argsoriginal":"()","stname":"ImGuiTextFilter","comment":"","defaults":[],"signature":"()","cimguiname":"ImGuiTextFilter_IsActive"}],"ImDrawList_PathClear":[{"funcname":"PathClear","args":"()","ret":"inline void","call_args":"()","argsoriginal":"()","stname":"ImDrawList","comment":"","defaults":[],"signature":"()","cimguiname":"ImDrawList_PathClear"}],"igIsKeyReleased":[{"funcname":"IsKeyReleased","args":"(int user_key_index)","ret":"bool","call_args":"(user_key_index)","argsoriginal":"(int user_key_index)","stname":"ImGui","comment":" // was key released (went from Down to !Down)..","defaults":[],"signature":"(int)","cimguiname":"igIsKeyReleased"}],"igBeginGroup":[{"funcname":"BeginGroup","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // lock horizontal starting position + capture group bounding box into one \"item\" (so you can use IsItemHovered() or layout primitives such as SameLine() on whole group, etc.)","defaults":[],"signature":"()","cimguiname":"igBeginGroup"}],"ImColor_ImColor":[{"funcname":"ImColor","args":"()","call_args":"()","argsoriginal":"()","stname":"ImColor","comment":"","ov_cimguiname":"ImColor_ImColor","defaults":[],"signature":"()","cimguiname":"ImColor_ImColor"},{"funcname":"ImColor","args":"(int r,int g,int b,int a)","call_args":"(r,g,b,a)","argsoriginal":"(int r,int g,int b,int a=255)","stname":"ImColor","comment":"","ov_cimguiname":"ImColor_ImColorInt","defaults":{"a":"255"},"signature":"(int,int,int,int)","cimguiname":"ImColor_ImColor"},{"funcname":"ImColor","args":"(ImU32 rgba)","call_args":"(rgba)","argsoriginal":"(ImU32 rgba)","stname":"ImColor","comment":"","ov_cimguiname":"ImColor_ImColorU32","defaults":[],"signature":"(ImU32)","cimguiname":"ImColor_ImColor"},{"funcname":"ImColor","args":"(float r,float g,float b,float a)","call_args":"(r,g,b,a)","argsoriginal":"(float r,float g,float b,float a=1.0f)","stname":"ImColor","comment":"","ov_cimguiname":"ImColor_ImColorFloat","defaults":{"a":"1.0f"},"signature":"(float,float,float,float)","cimguiname":"ImColor_ImColor"},{"funcname":"ImColor","args":"(const ImVec4 col)","call_args":"(col)","argsoriginal":"(const ImVec4& col)","stname":"ImColor","comment":"","ov_cimguiname":"ImColor_ImColorVec4","defaults":[],"signature":"(const ImVec4)","cimguiname":"ImColor_ImColor"}],"igVSliderFloat":[{"funcname":"VSliderFloat","args":"(const char* label,const ImVec2 size,float* v,float v_min,float v_max,const char* format,float power)","ret":"bool","call_args":"(label,size,v,v_min,v_max,format,power)","argsoriginal":"(const char* label,const ImVec2& size,float* v,float v_min,float v_max,const char* format=\"%.3f\",float power=1.0f)","stname":"ImGui","comment":"","defaults":{"power":"1.0f","format":"\"%.3f\""},"signature":"(const char*,const ImVec2,float*,float,float,const char*,float)","cimguiname":"igVSliderFloat"}],"igColorConvertFloat4ToU32":[{"funcname":"ColorConvertFloat4ToU32","args":"(const ImVec4 in)","ret":"ImU32","call_args":"(in)","argsoriginal":"(const ImVec4& in)","stname":"ImGui","comment":"","defaults":[],"signature":"(const ImVec4)","cimguiname":"igColorConvertFloat4ToU32"}],"igPopTextWrapPos":[{"funcname":"PopTextWrapPos","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":"","defaults":[],"signature":"()","cimguiname":"igPopTextWrapPos"}],"ImGuiTextFilter_Clear":[{"funcname":"Clear","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImGuiTextFilter","comment":"","defaults":[],"signature":"()","cimguiname":"ImGuiTextFilter_Clear"}],"igCalcTextSize":[{"funcname":"CalcTextSize","args":"(const char* text,const char* text_end,bool hide_text_after_double_hash,float wrap_width)","ret":"ImVec2","call_args":"(text,text_end,hide_text_after_double_hash,wrap_width)","argsoriginal":"(const char* text,const char* text_end=((void *)0),bool hide_text_after_double_hash=false,float wrap_width=-1.0f)","stname":"ImGui","comment":"","defaults":{"text_end":"((void *)0)","wrap_width":"-1.0f","hide_text_after_double_hash":"false"},"signature":"(const char*,const char*,bool,float)","cimguiname":"igCalcTextSize"}],"igGetColumnWidth":[{"funcname":"GetColumnWidth","args":"(int column_index)","ret":"float","call_args":"(column_index)","argsoriginal":"(int column_index=-1)","stname":"ImGui","comment":" // get column width (in pixels). pass -1 to use current column","defaults":{"column_index":"-1"},"signature":"(int)","cimguiname":"igGetColumnWidth"}],"igEndMenuBar":[{"funcname":"EndMenuBar","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // only call EndMenuBar() if BeginMenuBar() returns true!","defaults":[],"signature":"()","cimguiname":"igEndMenuBar"}],"igGetStateStorage":[{"funcname":"GetStateStorage","args":"()","ret":"ImGuiStorage*","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":"","defaults":[],"signature":"()","cimguiname":"igGetStateStorage"}],"igGetStyleColorName":[{"funcname":"GetStyleColorName","args":"(ImGuiCol idx)","ret":"const char*","call_args":"(idx)","argsoriginal":"(ImGuiCol idx)","stname":"ImGui","comment":"","defaults":[],"signature":"(ImGuiCol)","cimguiname":"igGetStyleColorName"}],"igIsMouseDragging":[{"funcname":"IsMouseDragging","args":"(int button,float lock_threshold)","ret":"bool","call_args":"(button,lock_threshold)","argsoriginal":"(int button=0,float lock_threshold=-1.0f)","stname":"ImGui","comment":" // is mouse dragging. if lock_threshold < -1.0f uses io.MouseDraggingThreshold","defaults":{"lock_threshold":"-1.0f","button":"0"},"signature":"(int,float)","cimguiname":"igIsMouseDragging"}],"ImDrawList_PrimWriteIdx":[{"funcname":"PrimWriteIdx","args":"(ImDrawIdx idx)","ret":"inline void","call_args":"(idx)","argsoriginal":"(ImDrawIdx idx)","stname":"ImDrawList","comment":"","defaults":[],"signature":"(ImDrawIdx)","cimguiname":"ImDrawList_PrimWriteIdx"}],"ImGuiStyle_ScaleAllSizes":[{"funcname":"ScaleAllSizes","args":"(float scale_factor)","ret":"void","call_args":"(scale_factor)","argsoriginal":"(float scale_factor)","stname":"ImGuiStyle","comment":"","defaults":[],"signature":"(float)","cimguiname":"ImGuiStyle_ScaleAllSizes"}],"igPushStyleColor":[{"funcname":"PushStyleColor","args":"(ImGuiCol idx,ImU32 col)","ret":"void","call_args":"(idx,col)","argsoriginal":"(ImGuiCol idx,ImU32 col)","stname":"ImGui","comment":"","ov_cimguiname":"igPushStyleColorU32","defaults":[],"signature":"(ImGuiCol,ImU32)","cimguiname":"igPushStyleColor"},{"funcname":"PushStyleColor","args":"(ImGuiCol idx,const ImVec4 col)","ret":"void","call_args":"(idx,col)","argsoriginal":"(ImGuiCol idx,const ImVec4& col)","stname":"ImGui","comment":"","ov_cimguiname":"igPushStyleColor","defaults":[],"signature":"(ImGuiCol,const ImVec4)","cimguiname":"igPushStyleColor"}],"igMemAlloc":[{"funcname":"MemAlloc","args":"(size_t size)","ret":"void*","call_args":"(size)","argsoriginal":"(size_t size)","stname":"ImGui","comment":"","defaults":[],"signature":"(size_t)","cimguiname":"igMemAlloc"}],"igLabelText":[{"isvararg":"...)","funcname":"LabelText","args":"(const char* label,const char* fmt,...)","ret":"void","call_args":"(label,fmt,...)","argsoriginal":"(const char* label,const char* fmt,...)","stname":"ImGui","comment":" // display text+label aligned the same way as value+label widgets","defaults":[],"signature":"(const char*,const char*,...)","cimguiname":"igLabelText"}],"igPushItemWidth":[{"funcname":"PushItemWidth","args":"(float item_width)","ret":"void","call_args":"(item_width)","argsoriginal":"(float item_width)","stname":"ImGui","comment":" // width of items for the common item+label case, pixels. 0.0f = default to ~2/3 of windows width, >0.0f: width in pixels, <0.0f align xx pixels to the right of window (so -1.0f always align width to the right side)","defaults":[],"signature":"(float)","cimguiname":"igPushItemWidth"}],"igIsWindowAppearing":[{"funcname":"IsWindowAppearing","args":"()","ret":"bool","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":"","defaults":[],"signature":"()","cimguiname":"igIsWindowAppearing"}],"igGetStyle":[{"funcname":"GetStyle","args":"()","ret":"ImGuiStyle*","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // access the Style structure (colors, sizes). Always use PushStyleCol(), PushStyleVar() to modify style mid-frame.","retref":"&","defaults":[],"signature":"()","cimguiname":"igGetStyle"}],"igSetItemAllowOverlap":[{"funcname":"SetItemAllowOverlap","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // allow last item to be overlapped by a subsequent item. sometimes useful with invisible buttons, selectables, etc. to catch unused area.","defaults":[],"signature":"()","cimguiname":"igSetItemAllowOverlap"}],"igEndChild":[{"funcname":"EndChild","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":"","defaults":[],"signature":"()","cimguiname":"igEndChild"}],"igCollapsingHeader":[{"funcname":"CollapsingHeader","args":"(const char* label,ImGuiTreeNodeFlags flags)","ret":"bool","call_args":"(label,flags)","argsoriginal":"(const char* label,ImGuiTreeNodeFlags flags=0)","stname":"ImGui","comment":" // if returning 'true' the header is open. doesn't indent nor push on ID stack. user doesn't have to call TreePop().","ov_cimguiname":"igCollapsingHeader","defaults":{"flags":"0"},"signature":"(const char*,ImGuiTreeNodeFlags)","cimguiname":"igCollapsingHeader"},{"funcname":"CollapsingHeader","args":"(const char* label,bool* p_open,ImGuiTreeNodeFlags flags)","ret":"bool","call_args":"(label,p_open,flags)","argsoriginal":"(const char* label,bool* p_open,ImGuiTreeNodeFlags flags=0)","stname":"ImGui","comment":" // when 'p_open' isn't NULL, display an additional small close button on upper right of the header","ov_cimguiname":"igCollapsingHeaderBoolPtr","defaults":{"flags":"0"},"signature":"(const char*,bool*,ImGuiTreeNodeFlags)","cimguiname":"igCollapsingHeader"}],"igTextDisabledV":[{"funcname":"TextDisabledV","args":"(const char* fmt,va_list args)","ret":"void","call_args":"(fmt,args)","argsoriginal":"(const char* fmt,va_list args)","stname":"ImGui","comment":"","defaults":[],"signature":"(const char*,va_list)","cimguiname":"igTextDisabledV"}],"igDragFloatRange2":[{"funcname":"DragFloatRange2","args":"(const char* label,float* v_current_min,float* v_current_max,float v_speed,float v_min,float v_max,const char* format,const char* format_max,float power)","ret":"bool","call_args":"(label,v_current_min,v_current_max,v_speed,v_min,v_max,format,format_max,power)","argsoriginal":"(const char* label,float* v_current_min,float* v_current_max,float v_speed=1.0f,float v_min=0.0f,float v_max=0.0f,const char* format=\"%.3f\",const char* format_max=((void *)0),float power=1.0f)","stname":"ImGui","comment":"","defaults":{"v_speed":"1.0f","v_min":"0.0f","power":"1.0f","format_max":"((void *)0)","v_max":"0.0f","format":"\"%.3f\""},"signature":"(const char*,float*,float*,float,float,float,const char*,const char*,float)","cimguiname":"igDragFloatRange2"}],"igSetMouseCursor":[{"funcname":"SetMouseCursor","args":"(ImGuiMouseCursor type)","ret":"void","call_args":"(type)","argsoriginal":"(ImGuiMouseCursor type)","stname":"ImGui","comment":" // set desired cursor type","defaults":[],"signature":"(ImGuiMouseCursor)","cimguiname":"igSetMouseCursor"}],"igSetNextWindowContentSize":[{"funcname":"SetNextWindowContentSize","args":"(const ImVec2 size)","ret":"void","call_args":"(size)","argsoriginal":"(const ImVec2& size)","stname":"ImGui","comment":" // set next window content size (~ enforce the range of scrollbars). not including window decorations (title bar, menu bar, etc.). set an axis to 0.0f to leave it automatic. call before Begin()","defaults":[],"signature":"(const ImVec2)","cimguiname":"igSetNextWindowContentSize"}],"igInputScalar":[{"funcname":"InputScalar","args":"(const char* label,ImGuiDataType data_type,void* v,const void* step,const void* step_fast,const char* format,ImGuiInputTextFlags extra_flags)","ret":"bool","call_args":"(label,data_type,v,step,step_fast,format,extra_flags)","argsoriginal":"(const char* label,ImGuiDataType data_type,void* v,const void* step=((void *)0),const void* step_fast=((void *)0),const char* format=((void *)0),ImGuiInputTextFlags extra_flags=0)","stname":"ImGui","comment":"","defaults":{"step":"((void *)0)","format":"((void *)0)","step_fast":"((void *)0)","extra_flags":"0"},"signature":"(const char*,ImGuiDataType,void*,const void*,const void*,const char*,ImGuiInputTextFlags)","cimguiname":"igInputScalar"}],"ImDrawList_PushClipRectFullScreen":[{"funcname":"PushClipRectFullScreen","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImDrawList","comment":"","defaults":[],"signature":"()","cimguiname":"ImDrawList_PushClipRectFullScreen"}],"igSetCursorPosY":[{"funcname":"SetCursorPosY","args":"(float y)","ret":"void","call_args":"(y)","argsoriginal":"(float y)","stname":"ImGui","comment":" // \"","defaults":[],"signature":"(float)","cimguiname":"igSetCursorPosY"}],"igGetTime":[{"funcname":"GetTime","args":"()","ret":"float","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":"","defaults":[],"signature":"()","cimguiname":"igGetTime"}],"ImDrawList_ChannelsMerge":[{"funcname":"ChannelsMerge","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImDrawList","comment":"","defaults":[],"signature":"()","cimguiname":"ImDrawList_ChannelsMerge"}],"igGetColumnIndex":[{"funcname":"GetColumnIndex","args":"()","ret":"int","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // get current column index","defaults":[],"signature":"()","cimguiname":"igGetColumnIndex"}],"igBeginPopupContextItem":[{"funcname":"BeginPopupContextItem","args":"(const char* str_id,int mouse_button)","ret":"bool","call_args":"(str_id,mouse_button)","argsoriginal":"(const char* str_id=((void *)0),int mouse_button=1)","stname":"ImGui","comment":" // helper to open and begin popup when clicked on last item. if you can pass a NULL str_id only if the previous item had an id. If you want to use that on a non-interactive item such as Text() you need to pass in an explicit ID here. read comments in .cpp!","defaults":{"mouse_button":"1","str_id":"((void *)0)"},"signature":"(const char*,int)","cimguiname":"igBeginPopupContextItem"}],"igListBoxHeader":[{"funcname":"ListBoxHeader","args":"(const char* label,const ImVec2 size)","ret":"bool","call_args":"(label,size)","argsoriginal":"(const char* label,const ImVec2& size=ImVec2(0,0))","stname":"ImGui","comment":" // use if you want to reimplement ListBox() will custom data or interactions. if the function return true, you can output elements then call ListBoxFooter() afterwards.","ov_cimguiname":"igListBoxHeaderVec2","defaults":{"size":"ImVec2(0,0)"},"signature":"(const char*,const ImVec2)","cimguiname":"igListBoxHeader"},{"funcname":"ListBoxHeader","args":"(const char* label,int items_count,int height_in_items)","ret":"bool","call_args":"(label,items_count,height_in_items)","argsoriginal":"(const char* label,int items_count,int height_in_items=-1)","stname":"ImGui","comment":" // \"","ov_cimguiname":"igListBoxHeaderInt","defaults":{"height_in_items":"-1"},"signature":"(const char*,int,int)","cimguiname":"igListBoxHeader"}],"igGetItemRectSize":[{"funcname":"GetItemRectSize","args":"()","ret":"ImVec2","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // get size of last item, in screen space","defaults":[],"signature":"()","cimguiname":"igGetItemRectSize"}],"igSetCursorPosX":[{"funcname":"SetCursorPosX","args":"(float x)","ret":"void","call_args":"(x)","argsoriginal":"(float x)","stname":"ImGui","comment":" // \"","defaults":[],"signature":"(float)","cimguiname":"igSetCursorPosX"}],"igGetMouseCursor":[{"funcname":"GetMouseCursor","args":"()","ret":"ImGuiMouseCursor","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // get desired cursor type, reset in ImGui::NewFrame(), this is updated during the frame. valid before Render(). If you use software rendering by setting io.MouseDrawCursor ImGui will render those for you","defaults":[],"signature":"()","cimguiname":"igGetMouseCursor"}],"igMenuItem":[{"funcname":"MenuItem","args":"(const char* label,const char* shortcut,bool selected,bool enabled)","ret":"bool","call_args":"(label,shortcut,selected,enabled)","argsoriginal":"(const char* label,const char* shortcut=((void *)0),bool selected=false,bool enabled=true)","stname":"ImGui","comment":" // return true when activated. shortcuts are displayed for convenience but not processed by ImGui at the moment","ov_cimguiname":"igMenuItemBool","defaults":{"enabled":"true","shortcut":"((void *)0)","selected":"false"},"signature":"(const char*,const char*,bool,bool)","cimguiname":"igMenuItem"},{"funcname":"MenuItem","args":"(const char* label,const char* shortcut,bool* p_selected,bool enabled)","ret":"bool","call_args":"(label,shortcut,p_selected,enabled)","argsoriginal":"(const char* label,const char* shortcut,bool* p_selected,bool enabled=true)","stname":"ImGui","comment":" // return true when activated + toggle (*p_selected) if p_selected != NULL","ov_cimguiname":"igMenuItemBoolPtr","defaults":{"enabled":"true"},"signature":"(const char*,const char*,bool*,bool)","cimguiname":"igMenuItem"}],"igGetScrollY":[{"funcname":"GetScrollY","args":"()","ret":"float","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // get scrolling amount [0..GetScrollMaxY()]","defaults":[],"signature":"()","cimguiname":"igGetScrollY"}],"igPushAllowKeyboardFocus":[{"funcname":"PushAllowKeyboardFocus","args":"(bool allow_keyboard_focus)","ret":"void","call_args":"(allow_keyboard_focus)","argsoriginal":"(bool allow_keyboard_focus)","stname":"ImGui","comment":" // allow focusing using TAB/Shift-TAB, enabled by default but you can disable it for certain widgets","defaults":[],"signature":"(bool)","cimguiname":"igPushAllowKeyboardFocus"}],"ImGuiTextBuffer_begin":[{"funcname":"begin","args":"()","ret":"const char*","call_args":"()","argsoriginal":"()","stname":"ImGuiTextBuffer","comment":"","defaults":[],"signature":"()","cimguiname":"ImGuiTextBuffer_begin"}],"igGetFont":[{"funcname":"GetFont","args":"()","ret":"ImFont*","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // get current font","defaults":[],"signature":"()","cimguiname":"igGetFont"}],"igSetWindowPos":[{"funcname":"SetWindowPos","args":"(const ImVec2 pos,ImGuiCond cond)","ret":"void","call_args":"(pos,cond)","argsoriginal":"(const ImVec2& pos,ImGuiCond cond=0)","stname":"ImGui","comment":" // (not recommended) set current window position - call within Begin()/End(). prefer using SetNextWindowPos(), as this may incur tearing and side-effects.","ov_cimguiname":"igSetWindowPosVec2","defaults":{"cond":"0"},"signature":"(const ImVec2,ImGuiCond)","cimguiname":"igSetWindowPos"},{"funcname":"SetWindowPos","args":"(const char* name,const ImVec2 pos,ImGuiCond cond)","ret":"void","call_args":"(name,pos,cond)","argsoriginal":"(const char* name,const ImVec2& pos,ImGuiCond cond=0)","stname":"ImGui","comment":" // set named window position.","ov_cimguiname":"igSetWindowPosStr","defaults":{"cond":"0"},"signature":"(const char*,const ImVec2,ImGuiCond)","cimguiname":"igSetWindowPos"}],"igGetCursorPosY":[{"funcname":"GetCursorPosY","args":"()","ret":"float","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // \"","defaults":[],"signature":"()","cimguiname":"igGetCursorPosY"}],"ImFontAtlas_AddCustomRectFontGlyph":[{"funcname":"AddCustomRectFontGlyph","args":"(ImFont* font,ImWchar id,int width,int height,float advance_x,const ImVec2 offset)","ret":"int","call_args":"(font,id,width,height,advance_x,offset)","argsoriginal":"(ImFont* font,ImWchar id,int width,int height,float advance_x,const ImVec2& offset=ImVec2(0,0))","stname":"ImFontAtlas","comment":" // Id needs to be < 0x10000 to register a rectangle to map into a specific font.","defaults":{"offset":"ImVec2(0,0)"},"signature":"(ImFont*,ImWchar,int,int,float,const ImVec2)","cimguiname":"ImFontAtlas_AddCustomRectFontGlyph"}],"igSetNextWindowSize":[{"funcname":"SetNextWindowSize","args":"(const ImVec2 size,ImGuiCond cond)","ret":"void","call_args":"(size,cond)","argsoriginal":"(const ImVec2& size,ImGuiCond cond=0)","stname":"ImGui","comment":" // set next window size. set axis to 0.0f to force an auto-fit on this axis. call before Begin()","defaults":{"cond":"0"},"signature":"(const ImVec2,ImGuiCond)","cimguiname":"igSetNextWindowSize"}],"igBulletTextV":[{"funcname":"BulletTextV","args":"(const char* fmt,va_list args)","ret":"void","call_args":"(fmt,args)","argsoriginal":"(const char* fmt,va_list args)","stname":"ImGui","comment":"","defaults":[],"signature":"(const char*,va_list)","cimguiname":"igBulletTextV"}],"igGetContentRegionAvailWidth":[{"funcname":"GetContentRegionAvailWidth","args":"()","ret":"float","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" //","defaults":[],"signature":"()","cimguiname":"igGetContentRegionAvailWidth"}],"igShowUserGuide":[{"funcname":"ShowUserGuide","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // add basic help/info block (not a window): how to manipulate ImGui as a end-user (mouse/keyboard controls).","defaults":[],"signature":"()","cimguiname":"igShowUserGuide"}],"igIsKeyDown":[{"funcname":"IsKeyDown","args":"(int user_key_index)","ret":"bool","call_args":"(user_key_index)","argsoriginal":"(int user_key_index)","stname":"ImGui","comment":" // is key being held. == io.KeysDown[user_key_index]. note that imgui doesn't know the semantic of each entry of io.KeysDown[]. Use your own indices/enums according to how your backend/engine stored them into io.KeysDown[]!","defaults":[],"signature":"(int)","cimguiname":"igIsKeyDown"}],"igIsMouseDown":[{"funcname":"IsMouseDown","args":"(int button)","ret":"bool","call_args":"(button)","argsoriginal":"(int button)","stname":"ImGui","comment":" // is mouse button held","defaults":[],"signature":"(int)","cimguiname":"igIsMouseDown"}],"igTreeNodeEx":[{"funcname":"TreeNodeEx","args":"(const char* label,ImGuiTreeNodeFlags flags)","ret":"bool","call_args":"(label,flags)","argsoriginal":"(const char* label,ImGuiTreeNodeFlags flags=0)","stname":"ImGui","comment":"","ov_cimguiname":"igTreeNodeExStr","defaults":{"flags":"0"},"signature":"(const char*,ImGuiTreeNodeFlags)","cimguiname":"igTreeNodeEx"},{"isvararg":"...)","funcname":"TreeNodeEx","args":"(const char* str_id,ImGuiTreeNodeFlags flags,const char* fmt,...)","ret":"bool","call_args":"(str_id,flags,fmt,...)","argsoriginal":"(const char* str_id,ImGuiTreeNodeFlags flags,const char* fmt,...)","stname":"ImGui","comment":"","ov_cimguiname":"igTreeNodeExStrStr","defaults":[],"signature":"(const char*,ImGuiTreeNodeFlags,const char*,...)","cimguiname":"igTreeNodeEx"},{"isvararg":"...)","funcname":"TreeNodeEx","args":"(const void* ptr_id,ImGuiTreeNodeFlags flags,const char* fmt,...)","ret":"bool","call_args":"(ptr_id,flags,fmt,...)","argsoriginal":"(const void* ptr_id,ImGuiTreeNodeFlags flags,const char* fmt,...)","stname":"ImGui","comment":"","ov_cimguiname":"igTreeNodeExPtr","defaults":[],"signature":"(const void*,ImGuiTreeNodeFlags,const char*,...)","cimguiname":"igTreeNodeEx"}],"igLogButtons":[{"funcname":"LogButtons","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // helper to display buttons for logging to tty/file/clipboard","defaults":[],"signature":"()","cimguiname":"igLogButtons"}],"igGetWindowContentRegionMin":[{"funcname":"GetWindowContentRegionMin","args":"()","ret":"ImVec2","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // content boundaries min (roughly (0,0)-Scroll), in window coordinates","defaults":[],"signature":"()","cimguiname":"igGetWindowContentRegionMin"}],"igSliderAngle":[{"funcname":"SliderAngle","args":"(const char* label,float* v_rad,float v_degrees_min,float v_degrees_max)","ret":"bool","call_args":"(label,v_rad,v_degrees_min,v_degrees_max)","argsoriginal":"(const char* label,float* v_rad,float v_degrees_min=-360.0f,float v_degrees_max=+360.0f)","stname":"ImGui","comment":"","defaults":{"v_degrees_min":"-360.0f"},"signature":"(const char*,float*,float,float)","cimguiname":"igSliderAngle"}],"ImGuiTextEditCallbackData_HasSelection":[{"funcname":"HasSelection","args":"()","ret":"bool","call_args":"()","argsoriginal":"()","stname":"ImGuiTextEditCallbackData","comment":"","defaults":[],"signature":"()","cimguiname":"ImGuiTextEditCallbackData_HasSelection"}],"igGetWindowWidth":[{"funcname":"GetWindowWidth","args":"()","ret":"float","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // get current window width (shortcut for GetWindowSize().x)","defaults":[],"signature":"()","cimguiname":"igGetWindowWidth"}],"igGetCursorPos":[{"funcname":"GetCursorPos","args":"()","ret":"ImVec2","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // cursor position is relative to window position","defaults":[],"signature":"()","cimguiname":"igGetCursorPos"}],"ImGuiStorage_GetInt":[{"funcname":"GetInt","args":"(ImGuiID key,int default_val)","ret":"int","call_args":"(key,default_val)","argsoriginal":"(ImGuiID key,int default_val=0)","stname":"ImGuiStorage","comment":"","defaults":{"default_val":"0"},"signature":"(ImGuiID,int)","cimguiname":"ImGuiStorage_GetInt"}],"igSliderInt3":[{"funcname":"SliderInt3","args":"(const char* label,int v[3],int v_min,int v_max,const char* format)","ret":"bool","call_args":"(label,v,v_min,v_max,format)","argsoriginal":"(const char* label,int v[3],int v_min,int v_max,const char* format=\"%d\")","stname":"ImGui","comment":"","defaults":{"format":"\"%d\""},"signature":"(const char*,int[3],int,int,const char*)","cimguiname":"igSliderInt3"}],"igTextV":[{"funcname":"TextV","args":"(const char* fmt,va_list args)","ret":"void","call_args":"(fmt,args)","argsoriginal":"(const char* fmt,va_list args)","stname":"ImGui","comment":"","defaults":[],"signature":"(const char*,va_list)","cimguiname":"igTextV"}],"igSliderScalarN":[{"funcname":"SliderScalarN","args":"(const char* label,ImGuiDataType data_type,void* v,int components,const void* v_min,const void* v_max,const char* format,float power)","ret":"bool","call_args":"(label,data_type,v,components,v_min,v_max,format,power)","argsoriginal":"(const char* label,ImGuiDataType data_type,void* v,int components,const void* v_min,const void* v_max,const char* format=((void *)0),float power=1.0f)","stname":"ImGui","comment":"","defaults":{"power":"1.0f","format":"((void *)0)"},"signature":"(const char*,ImGuiDataType,void*,int,const void*,const void*,const char*,float)","cimguiname":"igSliderScalarN"}],"ImColor_HSV":[{"funcname":"HSV","args":"(float h,float s,float v,float a)","ret":"ImColor","call_args":"(h,s,v,a)","argsoriginal":"(float h,float s,float v,float a=1.0f)","stname":"ImColor","comment":"","defaults":{"a":"1.0f"},"signature":"(float,float,float,float)","cimguiname":"ImColor_HSV"}],"ImDrawList_PathLineTo":[{"funcname":"PathLineTo","args":"(const ImVec2 pos)","ret":"inline void","call_args":"(pos)","argsoriginal":"(const ImVec2& pos)","stname":"ImDrawList","comment":"","defaults":[],"signature":"(const ImVec2)","cimguiname":"ImDrawList_PathLineTo"}],"igInputFloat2":[{"funcname":"InputFloat2","args":"(const char* label,float v[2],const char* format,ImGuiInputTextFlags extra_flags)","ret":"bool","call_args":"(label,v,format,extra_flags)","argsoriginal":"(const char* label,float v[2],const char* format=\"%.3f\",ImGuiInputTextFlags extra_flags=0)","stname":"ImGui","comment":"","defaults":{"extra_flags":"0","format":"\"%.3f\""},"signature":"(const char*,float[2],const char*,ImGuiInputTextFlags)","cimguiname":"igInputFloat2"}],"igImage":[{"funcname":"Image","args":"(ImTextureID user_texture_id,const ImVec2 size,const ImVec2 uv0,const ImVec2 uv1,const ImVec4 tint_col,const ImVec4 border_col)","ret":"void","call_args":"(user_texture_id,size,uv0,uv1,tint_col,border_col)","argsoriginal":"(ImTextureID user_texture_id,const ImVec2& size,const ImVec2& uv0=ImVec2(0,0),const ImVec2& uv1=ImVec2(1,1),const ImVec4& tint_col=ImVec4(1,1,1,1),const ImVec4& border_col=ImVec4(0,0,0,0))","stname":"ImGui","comment":"","defaults":{"uv1":"ImVec2(1,1)","tint_col":"ImVec4(1,1,1,1)","uv0":"ImVec2(0,0)","border_col":"ImVec4(0,0,0,0)"},"signature":"(ImTextureID,const ImVec2,const ImVec2,const ImVec2,const ImVec4,const ImVec4)","cimguiname":"igImage"}],"igDummy":[{"funcname":"Dummy","args":"(const ImVec2 size)","ret":"void","call_args":"(size)","argsoriginal":"(const ImVec2& size)","stname":"ImGui","comment":" // add a dummy item of given size","defaults":[],"signature":"(const ImVec2)","cimguiname":"igDummy"}],"igColorPicker3":[{"funcname":"ColorPicker3","args":"(const char* label,float col[3],ImGuiColorEditFlags flags)","ret":"bool","call_args":"(label,col,flags)","argsoriginal":"(const char* label,float col[3],ImGuiColorEditFlags flags=0)","stname":"ImGui","comment":"","defaults":{"flags":"0"},"signature":"(const char*,float[3],ImGuiColorEditFlags)","cimguiname":"igColorPicker3"}],"ImGuiTextBuffer_ImGuiTextBuffer":[{"funcname":"ImGuiTextBuffer","args":"()","call_args":"()","argsoriginal":"()","stname":"ImGuiTextBuffer","comment":"","defaults":[],"signature":"()","cimguiname":"ImGuiTextBuffer_ImGuiTextBuffer"}],"igBulletText":[{"isvararg":"...)","funcname":"BulletText","args":"(const char* fmt,...)","ret":"void","call_args":"(fmt,...)","argsoriginal":"(const char* fmt,...)","stname":"ImGui","comment":" // shortcut for Bullet()+Text()","defaults":[],"signature":"(const char*,...)","cimguiname":"igBulletText"}],"igVSliderInt":[{"funcname":"VSliderInt","args":"(const char* label,const ImVec2 size,int* v,int v_min,int v_max,const char* format)","ret":"bool","call_args":"(label,size,v,v_min,v_max,format)","argsoriginal":"(const char* label,const ImVec2& size,int* v,int v_min,int v_max,const char* format=\"%d\")","stname":"ImGui","comment":"","defaults":{"format":"\"%d\""},"signature":"(const char*,const ImVec2,int*,int,int,const char*)","cimguiname":"igVSliderInt"}],"igColorEdit4":[{"funcname":"ColorEdit4","args":"(const char* label,float col[4],ImGuiColorEditFlags flags)","ret":"bool","call_args":"(label,col,flags)","argsoriginal":"(const char* label,float col[4],ImGuiColorEditFlags flags=0)","stname":"ImGui","comment":"","defaults":{"flags":"0"},"signature":"(const char*,float[4],ImGuiColorEditFlags)","cimguiname":"igColorEdit4"}],"ImDrawList_PrimRectUV":[{"funcname":"PrimRectUV","args":"(const ImVec2 a,const ImVec2 b,const ImVec2 uv_a,const ImVec2 uv_b,ImU32 col)","ret":"void","call_args":"(a,b,uv_a,uv_b,col)","argsoriginal":"(const ImVec2& a,const ImVec2& b,const ImVec2& uv_a,const ImVec2& uv_b,ImU32 col)","stname":"ImDrawList","comment":"","defaults":[],"signature":"(const ImVec2,const ImVec2,const ImVec2,const ImVec2,ImU32)","cimguiname":"ImDrawList_PrimRectUV"}],"igTextDisabled":[{"isvararg":"...)","funcname":"TextDisabled","args":"(const char* fmt,...)","ret":"void","call_args":"(fmt,...)","argsoriginal":"(const char* fmt,...)","stname":"ImGui","comment":" // shortcut for PushStyleColor(ImGuiCol_Text, style.Colors[ImGuiCol_TextDisabled]); Text(fmt, ...); PopStyleColor();","defaults":[],"signature":"(const char*,...)","cimguiname":"igTextDisabled"}],"igLogToClipboard":[{"funcname":"LogToClipboard","args":"(int max_depth)","ret":"void","call_args":"(max_depth)","argsoriginal":"(int max_depth=-1)","stname":"ImGui","comment":" // start logging to OS clipboard","defaults":{"max_depth":"-1"},"signature":"(int)","cimguiname":"igLogToClipboard"}],"igBeginPopupContextWindow":[{"funcname":"BeginPopupContextWindow","args":"(const char* str_id,int mouse_button,bool also_over_items)","ret":"bool","call_args":"(str_id,mouse_button,also_over_items)","argsoriginal":"(const char* str_id=((void *)0),int mouse_button=1,bool also_over_items=true)","stname":"ImGui","comment":" // helper to open and begin popup when clicked on current window.","defaults":{"str_id":"((void *)0)","mouse_button":"1","also_over_items":"true"},"signature":"(const char*,int,bool)","cimguiname":"igBeginPopupContextWindow"}],"ImFontAtlas_ImFontAtlas":[{"funcname":"ImFontAtlas","args":"()","call_args":"()","argsoriginal":"()","stname":"ImFontAtlas","comment":"","defaults":[],"signature":"()","cimguiname":"ImFontAtlas_ImFontAtlas"}],"igDragScalar":[{"funcname":"DragScalar","args":"(const char* label,ImGuiDataType data_type,void* v,float v_speed,const void* v_min,const void* v_max,const char* format,float power)","ret":"bool","call_args":"(label,data_type,v,v_speed,v_min,v_max,format,power)","argsoriginal":"(const char* label,ImGuiDataType data_type,void* v,float v_speed,const void* v_min=((void *)0),const void* v_max=((void *)0),const char* format=((void *)0),float power=1.0f)","stname":"ImGui","comment":"","defaults":{"v_max":"((void *)0)","v_min":"((void *)0)","format":"((void *)0)","power":"1.0f"},"signature":"(const char*,ImGuiDataType,void*,float,const void*,const void*,const char*,float)","cimguiname":"igDragScalar"}],"igSetItemDefaultFocus":[{"funcname":"SetItemDefaultFocus","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // make last item the default focused item of a window. Please use instead of \"if (IsWindowAppearing()) SetScrollHere()\" to signify \"default item\".","defaults":[],"signature":"()","cimguiname":"igSetItemDefaultFocus"}],"igCaptureMouseFromApp":[{"funcname":"CaptureMouseFromApp","args":"(bool capture)","ret":"void","call_args":"(capture)","argsoriginal":"(bool capture=true)","stname":"ImGui","comment":" // manually override io.WantCaptureMouse flag next frame (said flag is entirely left for your application to handle).","defaults":{"capture":"true"},"signature":"(bool)","cimguiname":"igCaptureMouseFromApp"}],"igIsAnyItemHovered":[{"funcname":"IsAnyItemHovered","args":"()","ret":"bool","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":"","defaults":[],"signature":"()","cimguiname":"igIsAnyItemHovered"}],"igPushFont":[{"funcname":"PushFont","args":"(ImFont* font)","ret":"void","call_args":"(font)","argsoriginal":"(ImFont* font)","stname":"ImGui","comment":" // use NULL as a shortcut to push default font","defaults":[],"signature":"(ImFont*)","cimguiname":"igPushFont"}],"igSetNextWindowSizeConstraints":[{"funcname":"SetNextWindowSizeConstraints","args":"(const ImVec2 size_min,const ImVec2 size_max,ImGuiSizeCallback custom_callback,void* custom_callback_data)","ret":"void","call_args":"(size_min,size_max,custom_callback,custom_callback_data)","argsoriginal":"(const ImVec2& size_min,const ImVec2& size_max,ImGuiSizeCallback custom_callback=((void *)0),void* custom_callback_data=((void *)0))","stname":"ImGui","comment":" // set next window size limits. use -1,-1 on either X/Y axis to preserve the current size. Use callback to apply non-trivial programmatic constraints.","defaults":{"custom_callback":"((void *)0)","custom_callback_data":"((void *)0)"},"signature":"(const ImVec2,const ImVec2,ImGuiSizeCallback,void*)","cimguiname":"igSetNextWindowSizeConstraints"}],"igTreePop":[{"funcname":"TreePop","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // ~ Unindent()+PopId()","defaults":[],"signature":"()","cimguiname":"igTreePop"}],"igEnd":[{"funcname":"End","args":"()","ret":"void","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":"","defaults":[],"signature":"()","cimguiname":"igEnd"}],"ImDrawData_ImDrawData":[{"funcname":"ImDrawData","args":"()","call_args":"()","argsoriginal":"()","stname":"ImDrawData","comment":"","defaults":[],"signature":"()","cimguiname":"ImDrawData_ImDrawData"}],"igDestroyContext":[{"funcname":"DestroyContext","args":"(ImGuiContext* ctx)","ret":"void","call_args":"(ctx)","argsoriginal":"(ImGuiContext* ctx=((void *)0))","stname":"ImGui","comment":" // NULL = destroy current context","defaults":{"ctx":"((void *)0)"},"signature":"(ImGuiContext*)","cimguiname":"igDestroyContext"}],"ImGuiTextBuffer_end":[{"funcname":"end","args":"()","ret":"const char*","call_args":"()","argsoriginal":"()","stname":"ImGuiTextBuffer","comment":" // Buf is zero-terminated, so end() will point on the zero-terminator","defaults":[],"signature":"()","cimguiname":"ImGuiTextBuffer_end"}],"igPopStyleVar":[{"funcname":"PopStyleVar","args":"(int count)","ret":"void","call_args":"(count)","argsoriginal":"(int count=1)","stname":"ImGui","comment":"","defaults":{"count":"1"},"signature":"(int)","cimguiname":"igPopStyleVar"}],"ImGuiTextFilter_PassFilter":[{"funcname":"PassFilter","args":"(const char* text,const char* text_end)","ret":"bool","call_args":"(text,text_end)","argsoriginal":"(const char* text,const char* text_end=((void *)0))","stname":"ImGuiTextFilter","comment":"","defaults":{"text_end":"((void *)0)"},"signature":"(const char*,const char*)","cimguiname":"ImGuiTextFilter_PassFilter"}],"igBeginCombo":[{"funcname":"BeginCombo","args":"(const char* label,const char* preview_value,ImGuiComboFlags flags)","ret":"bool","call_args":"(label,preview_value,flags)","argsoriginal":"(const char* label,const char* preview_value,ImGuiComboFlags flags=0)","stname":"ImGui","comment":"","defaults":{"flags":"0"},"signature":"(const char*,const char*,ImGuiComboFlags)","cimguiname":"igBeginCombo"}],"igColumns":[{"funcname":"Columns","args":"(int count,const char* id,bool border)","ret":"void","call_args":"(count,id,border)","argsoriginal":"(int count=1,const char* id=((void *)0),bool border=true)","stname":"ImGui","comment":"","defaults":{"border":"true","count":"1","id":"((void *)0)"},"signature":"(int,const char*,bool)","cimguiname":"igColumns"}],"igTreeNode":[{"funcname":"TreeNode","args":"(const char* label)","ret":"bool","call_args":"(label)","argsoriginal":"(const char* label)","stname":"ImGui","comment":"","ov_cimguiname":"igTreeNodeStr","defaults":[],"signature":"(const char*)","cimguiname":"igTreeNode"},{"isvararg":"...)","funcname":"TreeNode","args":"(const char* str_id,const char* fmt,...)","ret":"bool","call_args":"(str_id,fmt,...)","argsoriginal":"(const char* str_id,const char* fmt,...)","stname":"ImGui","comment":" // helper variation to completely decorelate the id from the displayed string. Read the FAQ about why and how to use ID. to align arbitrary text at the same level as a TreeNode() you can use Bullet().","ov_cimguiname":"igTreeNodeStrStr","defaults":[],"signature":"(const char*,const char*,...)","cimguiname":"igTreeNode"},{"isvararg":"...)","funcname":"TreeNode","args":"(const void* ptr_id,const char* fmt,...)","ret":"bool","call_args":"(ptr_id,fmt,...)","argsoriginal":"(const void* ptr_id,const char* fmt,...)","stname":"ImGui","comment":" // \"","ov_cimguiname":"igTreeNodePtr","defaults":[],"signature":"(const void*,const char*,...)","cimguiname":"igTreeNode"}],"igTreeNodeV":[{"funcname":"TreeNodeV","args":"(const char* str_id,const char* fmt,va_list args)","ret":"bool","call_args":"(str_id,fmt,args)","argsoriginal":"(const char* str_id,const char* fmt,va_list args)","stname":"ImGui","comment":"","ov_cimguiname":"igTreeNodeVStr","defaults":[],"signature":"(const char*,const char*,va_list)","cimguiname":"igTreeNodeV"},{"funcname":"TreeNodeV","args":"(const void* ptr_id,const char* fmt,va_list args)","ret":"bool","call_args":"(ptr_id,fmt,args)","argsoriginal":"(const void* ptr_id,const char* fmt,va_list args)","stname":"ImGui","comment":"","ov_cimguiname":"igTreeNodeVPtr","defaults":[],"signature":"(const void*,const char*,va_list)","cimguiname":"igTreeNodeV"}],"igGetScrollMaxX":[{"funcname":"GetScrollMaxX","args":"()","ret":"float","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // get maximum scrolling amount ~~ ContentSize.X - WindowSize.X","defaults":[],"signature":"()","cimguiname":"igGetScrollMaxX"}],"igSetTooltip":[{"isvararg":"...)","funcname":"SetTooltip","args":"(const char* fmt,...)","ret":"void","call_args":"(fmt,...)","argsoriginal":"(const char* fmt,...)","stname":"ImGui","comment":" // set a text-only tooltip, typically use with ImGui::IsItemHovered(). overidde any previous call to SetTooltip().","defaults":[],"signature":"(const char*,...)","cimguiname":"igSetTooltip"}],"igGetContentRegionAvail":[{"funcname":"GetContentRegionAvail","args":"()","ret":"ImVec2","call_args":"()","argsoriginal":"()","stname":"ImGui","comment":" // == GetContentRegionMax() - GetCursorPos()","defaults":[],"signature":"()","cimguiname":"igGetContentRegionAvail"}],"igInputFloat3":[{"funcname":"InputFloat3","args":"(const char* label,float v[3],const char* format,ImGuiInputTextFlags extra_flags)","ret":"bool","call_args":"(label,v,format,extra_flags)","argsoriginal":"(const char* label,float v[3],const char* format=\"%.3f\",ImGuiInputTextFlags extra_flags=0)","stname":"ImGui","comment":"","defaults":{"extra_flags":"0","format":"\"%.3f\""},"signature":"(const char*,float[3],const char*,ImGuiInputTextFlags)","cimguiname":"igInputFloat3"}],"igSetKeyboardFocusHere":[{"funcname":"SetKeyboardFocusHere","args":"(int offset)","ret":"void","call_args":"(offset)","argsoriginal":"(int offset=0)","stname":"ImGui","comment":" // focus keyboard on the next widget. Use positive 'offset' to access sub components of a multiple component widget. Use -1 to access previous widget.","defaults":{"offset":"0"},"signature":"(int)","cimguiname":"igSetKeyboardFocusHere"}]}