local defs = {}
defs["enums"] = {}
defs["enums"]["ImDrawCornerFlags_"] = {}
defs["enums"]["ImDrawCornerFlags_"][1] = {}
defs["enums"]["ImDrawCornerFlags_"][1]["calc_value"] = 0
defs["enums"]["ImDrawCornerFlags_"][1]["name"] = "ImDrawCornerFlags_None"
defs["enums"]["ImDrawCornerFlags_"][1]["value"] = "0"
defs["enums"]["ImDrawCornerFlags_"][2] = {}
defs["enums"]["ImDrawCornerFlags_"][2]["calc_value"] = 1
defs["enums"]["ImDrawCornerFlags_"][2]["comment"] = " // 0x1"
defs["enums"]["ImDrawCornerFlags_"][2]["name"] = "ImDrawCornerFlags_TopLeft"
defs["enums"]["ImDrawCornerFlags_"][2]["value"] = "1 << 0"
defs["enums"]["ImDrawCornerFlags_"][3] = {}
defs["enums"]["ImDrawCornerFlags_"][3]["calc_value"] = 2
defs["enums"]["ImDrawCornerFlags_"][3]["comment"] = " // 0x2"
defs["enums"]["ImDrawCornerFlags_"][3]["name"] = "ImDrawCornerFlags_TopRight"
defs["enums"]["ImDrawCornerFlags_"][3]["value"] = "1 << 1"
defs["enums"]["ImDrawCornerFlags_"][4] = {}
defs["enums"]["ImDrawCornerFlags_"][4]["calc_value"] = 4
defs["enums"]["ImDrawCornerFlags_"][4]["comment"] = " // 0x4"
defs["enums"]["ImDrawCornerFlags_"][4]["name"] = "ImDrawCornerFlags_BotLeft"
defs["enums"]["ImDrawCornerFlags_"][4]["value"] = "1 << 2"
defs["enums"]["ImDrawCornerFlags_"][5] = {}
defs["enums"]["ImDrawCornerFlags_"][5]["calc_value"] = 8
defs["enums"]["ImDrawCornerFlags_"][5]["comment"] = " // 0x8"
defs["enums"]["ImDrawCornerFlags_"][5]["name"] = "ImDrawCornerFlags_BotRight"
defs["enums"]["ImDrawCornerFlags_"][5]["value"] = "1 << 3"
defs["enums"]["ImDrawCornerFlags_"][6] = {}
defs["enums"]["ImDrawCornerFlags_"][6]["calc_value"] = 3
defs["enums"]["ImDrawCornerFlags_"][6]["comment"] = " // 0x3"
defs["enums"]["ImDrawCornerFlags_"][6]["name"] = "ImDrawCornerFlags_Top"
defs["enums"]["ImDrawCornerFlags_"][6]["value"] = "ImDrawCornerFlags_TopLeft | ImDrawCornerFlags_TopRight"
defs["enums"]["ImDrawCornerFlags_"][7] = {}
defs["enums"]["ImDrawCornerFlags_"][7]["calc_value"] = 12
defs["enums"]["ImDrawCornerFlags_"][7]["comment"] = " // 0xC"
defs["enums"]["ImDrawCornerFlags_"][7]["name"] = "ImDrawCornerFlags_Bot"
defs["enums"]["ImDrawCornerFlags_"][7]["value"] = "ImDrawCornerFlags_BotLeft | ImDrawCornerFlags_BotRight"
defs["enums"]["ImDrawCornerFlags_"][8] = {}
defs["enums"]["ImDrawCornerFlags_"][8]["calc_value"] = 5
defs["enums"]["ImDrawCornerFlags_"][8]["comment"] = " // 0x5"
defs["enums"]["ImDrawCornerFlags_"][8]["name"] = "ImDrawCornerFlags_Left"
defs["enums"]["ImDrawCornerFlags_"][8]["value"] = "ImDrawCornerFlags_TopLeft | ImDrawCornerFlags_BotLeft"
defs["enums"]["ImDrawCornerFlags_"][9] = {}
defs["enums"]["ImDrawCornerFlags_"][9]["calc_value"] = 10
defs["enums"]["ImDrawCornerFlags_"][9]["comment"] = " // 0xA"
defs["enums"]["ImDrawCornerFlags_"][9]["name"] = "ImDrawCornerFlags_Right"
defs["enums"]["ImDrawCornerFlags_"][9]["value"] = "ImDrawCornerFlags_TopRight | ImDrawCornerFlags_BotRight"
defs["enums"]["ImDrawCornerFlags_"][10] = {}
defs["enums"]["ImDrawCornerFlags_"][10]["calc_value"] = 15
defs["enums"]["ImDrawCornerFlags_"][10]["comment"] = " // In your function calls you may use ~0 (= all bits sets) instead of ImDrawCornerFlags_All, as a convenience"
defs["enums"]["ImDrawCornerFlags_"][10]["name"] = "ImDrawCornerFlags_All"
defs["enums"]["ImDrawCornerFlags_"][10]["value"] = "0xF"
defs["enums"]["ImDrawListFlags_"] = {}
defs["enums"]["ImDrawListFlags_"][1] = {}
defs["enums"]["ImDrawListFlags_"][1]["calc_value"] = 0
defs["enums"]["ImDrawListFlags_"][1]["name"] = "ImDrawListFlags_None"
defs["enums"]["ImDrawListFlags_"][1]["value"] = "0"
defs["enums"]["ImDrawListFlags_"][2] = {}
defs["enums"]["ImDrawListFlags_"][2]["calc_value"] = 1
defs["enums"]["ImDrawListFlags_"][2]["comment"] = " // Enable anti-aliased lines/borders (*2 the number of triangles for 1.0f wide line or lines thin enough to be drawn using textures, otherwise *3 the number of triangles)"
defs["enums"]["ImDrawListFlags_"][2]["name"] = "ImDrawListFlags_AntiAliasedLines"
defs["enums"]["ImDrawListFlags_"][2]["value"] = "1 << 0"
defs["enums"]["ImDrawListFlags_"][3] = {}
defs["enums"]["ImDrawListFlags_"][3]["calc_value"] = 2
defs["enums"]["ImDrawListFlags_"][3]["comment"] = " // Enable anti-aliased lines/borders using textures when possible. Require back-end to render with bilinear filtering."
defs["enums"]["ImDrawListFlags_"][3]["name"] = "ImDrawListFlags_AntiAliasedLinesUseTex"
defs["enums"]["ImDrawListFlags_"][3]["value"] = "1 << 1"
defs["enums"]["ImDrawListFlags_"][4] = {}
defs["enums"]["ImDrawListFlags_"][4]["calc_value"] = 4
defs["enums"]["ImDrawListFlags_"][4]["comment"] = " // Enable anti-aliased edge around filled shapes (rounded rectangles, circles)."
defs["enums"]["ImDrawListFlags_"][4]["name"] = "ImDrawListFlags_AntiAliasedFill"
defs["enums"]["ImDrawListFlags_"][4]["value"] = "1 << 2"
defs["enums"]["ImDrawListFlags_"][5] = {}
defs["enums"]["ImDrawListFlags_"][5]["calc_value"] = 8
defs["enums"]["ImDrawListFlags_"][5]["comment"] = " // Can emit 'VtxOffset > 0' to allow large meshes. Set when 'ImGuiBackendFlags_RendererHasVtxOffset' is enabled."
defs["enums"]["ImDrawListFlags_"][5]["name"] = "ImDrawListFlags_AllowVtxOffset"
defs["enums"]["ImDrawListFlags_"][5]["value"] = "1 << 3"
defs["enums"]["ImFontAtlasFlags_"] = {}
defs["enums"]["ImFontAtlasFlags_"][1] = {}
defs["enums"]["ImFontAtlasFlags_"][1]["calc_value"] = 0
defs["enums"]["ImFontAtlasFlags_"][1]["name"] = "ImFontAtlasFlags_None"
defs["enums"]["ImFontAtlasFlags_"][1]["value"] = "0"
defs["enums"]["ImFontAtlasFlags_"][2] = {}
defs["enums"]["ImFontAtlasFlags_"][2]["calc_value"] = 1
defs["enums"]["ImFontAtlasFlags_"][2]["comment"] = " // Don't round the height to next power of two"
defs["enums"]["ImFontAtlasFlags_"][2]["name"] = "ImFontAtlasFlags_NoPowerOfTwoHeight"
defs["enums"]["ImFontAtlasFlags_"][2]["value"] = "1 << 0"
defs["enums"]["ImFontAtlasFlags_"][3] = {}
defs["enums"]["ImFontAtlasFlags_"][3]["calc_value"] = 2
defs["enums"]["ImFontAtlasFlags_"][3]["comment"] = " // Don't build software mouse cursors into the atlas (save a little texture memory)"
defs["enums"]["ImFontAtlasFlags_"][3]["name"] = "ImFontAtlasFlags_NoMouseCursors"
defs["enums"]["ImFontAtlasFlags_"][3]["value"] = "1 << 1"
defs["enums"]["ImFontAtlasFlags_"][4] = {}
defs["enums"]["ImFontAtlasFlags_"][4]["calc_value"] = 4
defs["enums"]["ImFontAtlasFlags_"][4]["comment"] = " // Don't build thick line textures into the atlas (save a little texture memory). The AntiAliasedLinesUseTex features uses them, otherwise they will be rendered using polygons (more expensive for CPU/GPU)."
defs["enums"]["ImFontAtlasFlags_"][4]["name"] = "ImFontAtlasFlags_NoBakedLines"
defs["enums"]["ImFontAtlasFlags_"][4]["value"] = "1 << 2"
defs["enums"]["ImGuiAxis"] = {}
defs["enums"]["ImGuiAxis"][1] = {}
defs["enums"]["ImGuiAxis"][1]["calc_value"] = -1
defs["enums"]["ImGuiAxis"][1]["name"] = "ImGuiAxis_None"
defs["enums"]["ImGuiAxis"][1]["value"] = "-1"
defs["enums"]["ImGuiAxis"][2] = {}
defs["enums"]["ImGuiAxis"][2]["calc_value"] = 0
defs["enums"]["ImGuiAxis"][2]["name"] = "ImGuiAxis_X"
defs["enums"]["ImGuiAxis"][2]["value"] = "0"
defs["enums"]["ImGuiAxis"][3] = {}
defs["enums"]["ImGuiAxis"][3]["calc_value"] = 1
defs["enums"]["ImGuiAxis"][3]["name"] = "ImGuiAxis_Y"
defs["enums"]["ImGuiAxis"][3]["value"] = "1"
defs["enums"]["ImGuiBackendFlags_"] = {}
defs["enums"]["ImGuiBackendFlags_"][1] = {}
defs["enums"]["ImGuiBackendFlags_"][1]["calc_value"] = 0
defs["enums"]["ImGuiBackendFlags_"][1]["name"] = "ImGuiBackendFlags_None"
defs["enums"]["ImGuiBackendFlags_"][1]["value"] = "0"
defs["enums"]["ImGuiBackendFlags_"][2] = {}
defs["enums"]["ImGuiBackendFlags_"][2]["calc_value"] = 1
defs["enums"]["ImGuiBackendFlags_"][2]["comment"] = " // Back-end Platform supports gamepad and currently has one connected."
defs["enums"]["ImGuiBackendFlags_"][2]["name"] = "ImGuiBackendFlags_HasGamepad"
defs["enums"]["ImGuiBackendFlags_"][2]["value"] = "1 << 0"
defs["enums"]["ImGuiBackendFlags_"][3] = {}
defs["enums"]["ImGuiBackendFlags_"][3]["calc_value"] = 2
defs["enums"]["ImGuiBackendFlags_"][3]["comment"] = " // Back-end Platform supports honoring GetMouseCursor() value to change the OS cursor shape."
defs["enums"]["ImGuiBackendFlags_"][3]["name"] = "ImGuiBackendFlags_HasMouseCursors"
defs["enums"]["ImGuiBackendFlags_"][3]["value"] = "1 << 1"
defs["enums"]["ImGuiBackendFlags_"][4] = {}
defs["enums"]["ImGuiBackendFlags_"][4]["calc_value"] = 4
defs["enums"]["ImGuiBackendFlags_"][4]["comment"] = " // Back-end Platform supports io.WantSetMousePos requests to reposition the OS mouse position (only used if ImGuiConfigFlags_NavEnableSetMousePos is set)."
defs["enums"]["ImGuiBackendFlags_"][4]["name"] = "ImGuiBackendFlags_HasSetMousePos"
defs["enums"]["ImGuiBackendFlags_"][4]["value"] = "1 << 2"
defs["enums"]["ImGuiBackendFlags_"][5] = {}
defs["enums"]["ImGuiBackendFlags_"][5]["calc_value"] = 8
defs["enums"]["ImGuiBackendFlags_"][5]["comment"] = " // Back-end Renderer supports ImDrawCmd::VtxOffset. This enables output of large meshes (64K+ vertices) while still using 16-bit indices."
defs["enums"]["ImGuiBackendFlags_"][5]["name"] = "ImGuiBackendFlags_RendererHasVtxOffset"
defs["enums"]["ImGuiBackendFlags_"][5]["value"] = "1 << 3"
defs["enums"]["ImGuiBackendFlags_"][6] = {}
defs["enums"]["ImGuiBackendFlags_"][6]["calc_value"] = 1024
defs["enums"]["ImGuiBackendFlags_"][6]["comment"] = " // Back-end Platform supports multiple viewports."
defs["enums"]["ImGuiBackendFlags_"][6]["name"] = "ImGuiBackendFlags_PlatformHasViewports"
defs["enums"]["ImGuiBackendFlags_"][6]["value"] = "1 << 10"
defs["enums"]["ImGuiBackendFlags_"][7] = {}
defs["enums"]["ImGuiBackendFlags_"][7]["calc_value"] = 2048
defs["enums"]["ImGuiBackendFlags_"][7]["comment"] = " // Back-end Platform supports setting io.MouseHoveredViewport to the viewport directly under the mouse _IGNORING_ viewports with the ImGuiViewportFlags_NoInputs flag and _REGARDLESS_ of whether another viewport is focused and may be capturing the mouse. This information is _NOT EASY_ to provide correctly with most high-level engines! Don't set this without studying how the examples/ back-end handle it!"
defs["enums"]["ImGuiBackendFlags_"][7]["name"] = "ImGuiBackendFlags_HasMouseHoveredViewport"
defs["enums"]["ImGuiBackendFlags_"][7]["value"] = "1 << 11"
defs["enums"]["ImGuiBackendFlags_"][8] = {}
defs["enums"]["ImGuiBackendFlags_"][8]["calc_value"] = 4096
defs["enums"]["ImGuiBackendFlags_"][8]["comment"] = " // Back-end Renderer supports multiple viewports."
defs["enums"]["ImGuiBackendFlags_"][8]["name"] = "ImGuiBackendFlags_RendererHasViewports"
defs["enums"]["ImGuiBackendFlags_"][8]["value"] = "1 << 12"
defs["enums"]["ImGuiButtonFlagsPrivate_"] = {}
defs["enums"]["ImGuiButtonFlagsPrivate_"][1] = {}
defs["enums"]["ImGuiButtonFlagsPrivate_"][1]["calc_value"] = 16
defs["enums"]["ImGuiButtonFlagsPrivate_"][1]["comment"] = " // return true on click (mouse down event)"
defs["enums"]["ImGuiButtonFlagsPrivate_"][1]["name"] = "ImGuiButtonFlags_PressedOnClick"
defs["enums"]["ImGuiButtonFlagsPrivate_"][1]["value"] = "1 << 4"
defs["enums"]["ImGuiButtonFlagsPrivate_"][2] = {}
defs["enums"]["ImGuiButtonFlagsPrivate_"][2]["calc_value"] = 32
defs["enums"]["ImGuiButtonFlagsPrivate_"][2]["comment"] = " // [Default] return true on click + release on same item <-- this is what the majority of Button are using"
defs["enums"]["ImGuiButtonFlagsPrivate_"][2]["name"] = "ImGuiButtonFlags_PressedOnClickRelease"
defs["enums"]["ImGuiButtonFlagsPrivate_"][2]["value"] = "1 << 5"
defs["enums"]["ImGuiButtonFlagsPrivate_"][3] = {}
defs["enums"]["ImGuiButtonFlagsPrivate_"][3]["calc_value"] = 64
defs["enums"]["ImGuiButtonFlagsPrivate_"][3]["comment"] = " // return true on click + release even if the release event is not done while hovering the item"
defs["enums"]["ImGuiButtonFlagsPrivate_"][3]["name"] = "ImGuiButtonFlags_PressedOnClickReleaseAnywhere"
defs["enums"]["ImGuiButtonFlagsPrivate_"][3]["value"] = "1 << 6"
defs["enums"]["ImGuiButtonFlagsPrivate_"][4] = {}
defs["enums"]["ImGuiButtonFlagsPrivate_"][4]["calc_value"] = 128
defs["enums"]["ImGuiButtonFlagsPrivate_"][4]["comment"] = " // return true on release (default requires click+release)"
defs["enums"]["ImGuiButtonFlagsPrivate_"][4]["name"] = "ImGuiButtonFlags_PressedOnRelease"
defs["enums"]["ImGuiButtonFlagsPrivate_"][4]["value"] = "1 << 7"
defs["enums"]["ImGuiButtonFlagsPrivate_"][5] = {}
defs["enums"]["ImGuiButtonFlagsPrivate_"][5]["calc_value"] = 256
defs["enums"]["ImGuiButtonFlagsPrivate_"][5]["comment"] = " // return true on double-click (default requires click+release)"
defs["enums"]["ImGuiButtonFlagsPrivate_"][5]["name"] = "ImGuiButtonFlags_PressedOnDoubleClick"
defs["enums"]["ImGuiButtonFlagsPrivate_"][5]["value"] = "1 << 8"
defs["enums"]["ImGuiButtonFlagsPrivate_"][6] = {}
defs["enums"]["ImGuiButtonFlagsPrivate_"][6]["calc_value"] = 512
defs["enums"]["ImGuiButtonFlagsPrivate_"][6]["comment"] = " // return true when held into while we are drag and dropping another item (used by e.g. tree nodes, collapsing headers)"
defs["enums"]["ImGuiButtonFlagsPrivate_"][6]["name"] = "ImGuiButtonFlags_PressedOnDragDropHold"
defs["enums"]["ImGuiButtonFlagsPrivate_"][6]["value"] = "1 << 9"
defs["enums"]["ImGuiButtonFlagsPrivate_"][7] = {}
defs["enums"]["ImGuiButtonFlagsPrivate_"][7]["calc_value"] = 1024
defs["enums"]["ImGuiButtonFlagsPrivate_"][7]["comment"] = " // hold to repeat"
defs["enums"]["ImGuiButtonFlagsPrivate_"][7]["name"] = "ImGuiButtonFlags_Repeat"
defs["enums"]["ImGuiButtonFlagsPrivate_"][7]["value"] = "1 << 10"
defs["enums"]["ImGuiButtonFlagsPrivate_"][8] = {}
defs["enums"]["ImGuiButtonFlagsPrivate_"][8]["calc_value"] = 2048
defs["enums"]["ImGuiButtonFlagsPrivate_"][8]["comment"] = " // allow interactions even if a child window is overlapping"
defs["enums"]["ImGuiButtonFlagsPrivate_"][8]["name"] = "ImGuiButtonFlags_FlattenChildren"
defs["enums"]["ImGuiButtonFlagsPrivate_"][8]["value"] = "1 << 11"
defs["enums"]["ImGuiButtonFlagsPrivate_"][9] = {}
defs["enums"]["ImGuiButtonFlagsPrivate_"][9]["calc_value"] = 4096
defs["enums"]["ImGuiButtonFlagsPrivate_"][9]["comment"] = " // require previous frame HoveredId to either match id or be null before being usable, use along with SetItemAllowOverlap()"
defs["enums"]["ImGuiButtonFlagsPrivate_"][9]["name"] = "ImGuiButtonFlags_AllowItemOverlap"
defs["enums"]["ImGuiButtonFlagsPrivate_"][9]["value"] = "1 << 12"
defs["enums"]["ImGuiButtonFlagsPrivate_"][10] = {}
defs["enums"]["ImGuiButtonFlagsPrivate_"][10]["calc_value"] = 8192
defs["enums"]["ImGuiButtonFlagsPrivate_"][10]["comment"] = " // disable automatically closing parent popup on press // [UNUSED]"
defs["enums"]["ImGuiButtonFlagsPrivate_"][10]["name"] = "ImGuiButtonFlags_DontClosePopups"
defs["enums"]["ImGuiButtonFlagsPrivate_"][10]["value"] = "1 << 13"
defs["enums"]["ImGuiButtonFlagsPrivate_"][11] = {}
defs["enums"]["ImGuiButtonFlagsPrivate_"][11]["calc_value"] = 16384
defs["enums"]["ImGuiButtonFlagsPrivate_"][11]["comment"] = " // disable interactions"
defs["enums"]["ImGuiButtonFlagsPrivate_"][11]["name"] = "ImGuiButtonFlags_Disabled"
defs["enums"]["ImGuiButtonFlagsPrivate_"][11]["value"] = "1 << 14"
defs["enums"]["ImGuiButtonFlagsPrivate_"][12] = {}
defs["enums"]["ImGuiButtonFlagsPrivate_"][12]["calc_value"] = 32768
defs["enums"]["ImGuiButtonFlagsPrivate_"][12]["comment"] = " // vertically align button to match text baseline - ButtonEx() only // FIXME: Should be removed and handled by SmallButton(), not possible currently because of DC.CursorPosPrevLine"
defs["enums"]["ImGuiButtonFlagsPrivate_"][12]["name"] = "ImGuiButtonFlags_AlignTextBaseLine"
defs["enums"]["ImGuiButtonFlagsPrivate_"][12]["value"] = "1 << 15"
defs["enums"]["ImGuiButtonFlagsPrivate_"][13] = {}
defs["enums"]["ImGuiButtonFlagsPrivate_"][13]["calc_value"] = 65536
defs["enums"]["ImGuiButtonFlagsPrivate_"][13]["comment"] = " // disable mouse interaction if a key modifier is held"
defs["enums"]["ImGuiButtonFlagsPrivate_"][13]["name"] = "ImGuiButtonFlags_NoKeyModifiers"
defs["enums"]["ImGuiButtonFlagsPrivate_"][13]["value"] = "1 << 16"
defs["enums"]["ImGuiButtonFlagsPrivate_"][14] = {}
defs["enums"]["ImGuiButtonFlagsPrivate_"][14]["calc_value"] = 131072
defs["enums"]["ImGuiButtonFlagsPrivate_"][14]["comment"] = " // don't set ActiveId while holding the mouse (ImGuiButtonFlags_PressedOnClick only)"
defs["enums"]["ImGuiButtonFlagsPrivate_"][14]["name"] = "ImGuiButtonFlags_NoHoldingActiveId"
defs["enums"]["ImGuiButtonFlagsPrivate_"][14]["value"] = "1 << 17"
defs["enums"]["ImGuiButtonFlagsPrivate_"][15] = {}
defs["enums"]["ImGuiButtonFlagsPrivate_"][15]["calc_value"] = 262144
defs["enums"]["ImGuiButtonFlagsPrivate_"][15]["comment"] = " // don't override navigation focus when activated"
defs["enums"]["ImGuiButtonFlagsPrivate_"][15]["name"] = "ImGuiButtonFlags_NoNavFocus"
defs["enums"]["ImGuiButtonFlagsPrivate_"][15]["value"] = "1 << 18"
defs["enums"]["ImGuiButtonFlagsPrivate_"][16] = {}
defs["enums"]["ImGuiButtonFlagsPrivate_"][16]["calc_value"] = 524288
defs["enums"]["ImGuiButtonFlagsPrivate_"][16]["comment"] = " // don't report as hovered when nav focus is on this item"
defs["enums"]["ImGuiButtonFlagsPrivate_"][16]["name"] = "ImGuiButtonFlags_NoHoveredOnFocus"
defs["enums"]["ImGuiButtonFlagsPrivate_"][16]["value"] = "1 << 19"
defs["enums"]["ImGuiButtonFlagsPrivate_"][17] = {}
defs["enums"]["ImGuiButtonFlagsPrivate_"][17]["calc_value"] = 1008
defs["enums"]["ImGuiButtonFlagsPrivate_"][17]["name"] = "ImGuiButtonFlags_PressedOnMask_"
defs["enums"]["ImGuiButtonFlagsPrivate_"][17]["value"] = "ImGuiButtonFlags_PressedOnClick | ImGuiButtonFlags_PressedOnClickRelease | ImGuiButtonFlags_PressedOnClickReleaseAnywhere | ImGuiButtonFlags_PressedOnRelease | ImGuiButtonFlags_PressedOnDoubleClick | ImGuiButtonFlags_PressedOnDragDropHold"
defs["enums"]["ImGuiButtonFlagsPrivate_"][18] = {}
defs["enums"]["ImGuiButtonFlagsPrivate_"][18]["calc_value"] = 32
defs["enums"]["ImGuiButtonFlagsPrivate_"][18]["name"] = "ImGuiButtonFlags_PressedOnDefault_"
defs["enums"]["ImGuiButtonFlagsPrivate_"][18]["value"] = "ImGuiButtonFlags_PressedOnClickRelease"
defs["enums"]["ImGuiButtonFlags_"] = {}
defs["enums"]["ImGuiButtonFlags_"][1] = {}
defs["enums"]["ImGuiButtonFlags_"][1]["calc_value"] = 0
defs["enums"]["ImGuiButtonFlags_"][1]["name"] = "ImGuiButtonFlags_None"
defs["enums"]["ImGuiButtonFlags_"][1]["value"] = "0"
defs["enums"]["ImGuiButtonFlags_"][2] = {}
defs["enums"]["ImGuiButtonFlags_"][2]["calc_value"] = 1
defs["enums"]["ImGuiButtonFlags_"][2]["comment"] = " // React on left mouse button (default)"
defs["enums"]["ImGuiButtonFlags_"][2]["name"] = "ImGuiButtonFlags_MouseButtonLeft"
defs["enums"]["ImGuiButtonFlags_"][2]["value"] = "1 << 0"
defs["enums"]["ImGuiButtonFlags_"][3] = {}
defs["enums"]["ImGuiButtonFlags_"][3]["calc_value"] = 2
defs["enums"]["ImGuiButtonFlags_"][3]["comment"] = " // React on right mouse button"
defs["enums"]["ImGuiButtonFlags_"][3]["name"] = "ImGuiButtonFlags_MouseButtonRight"
defs["enums"]["ImGuiButtonFlags_"][3]["value"] = "1 << 1"
defs["enums"]["ImGuiButtonFlags_"][4] = {}
defs["enums"]["ImGuiButtonFlags_"][4]["calc_value"] = 4
defs["enums"]["ImGuiButtonFlags_"][4]["comment"] = " // React on center mouse button"
defs["enums"]["ImGuiButtonFlags_"][4]["name"] = "ImGuiButtonFlags_MouseButtonMiddle"
defs["enums"]["ImGuiButtonFlags_"][4]["value"] = "1 << 2"
defs["enums"]["ImGuiButtonFlags_"][5] = {}
defs["enums"]["ImGuiButtonFlags_"][5]["calc_value"] = 7
defs["enums"]["ImGuiButtonFlags_"][5]["name"] = "ImGuiButtonFlags_MouseButtonMask_"
defs["enums"]["ImGuiButtonFlags_"][5]["value"] = "ImGuiButtonFlags_MouseButtonLeft | ImGuiButtonFlags_MouseButtonRight | ImGuiButtonFlags_MouseButtonMiddle"
defs["enums"]["ImGuiButtonFlags_"][6] = {}
defs["enums"]["ImGuiButtonFlags_"][6]["calc_value"] = 1
defs["enums"]["ImGuiButtonFlags_"][6]["name"] = "ImGuiButtonFlags_MouseButtonDefault_"
defs["enums"]["ImGuiButtonFlags_"][6]["value"] = "ImGuiButtonFlags_MouseButtonLeft"
defs["enums"]["ImGuiCol_"] = {}
defs["enums"]["ImGuiCol_"][1] = {}
defs["enums"]["ImGuiCol_"][1]["calc_value"] = 0
defs["enums"]["ImGuiCol_"][1]["name"] = "ImGuiCol_Text"
defs["enums"]["ImGuiCol_"][1]["value"] = 0
defs["enums"]["ImGuiCol_"][2] = {}
defs["enums"]["ImGuiCol_"][2]["calc_value"] = 1
defs["enums"]["ImGuiCol_"][2]["name"] = "ImGuiCol_TextDisabled"
defs["enums"]["ImGuiCol_"][2]["value"] = 1
defs["enums"]["ImGuiCol_"][3] = {}
defs["enums"]["ImGuiCol_"][3]["calc_value"] = 2
defs["enums"]["ImGuiCol_"][3]["comment"] = " // Background of normal windows"
defs["enums"]["ImGuiCol_"][3]["name"] = "ImGuiCol_WindowBg"
defs["enums"]["ImGuiCol_"][3]["value"] = 2
defs["enums"]["ImGuiCol_"][4] = {}
defs["enums"]["ImGuiCol_"][4]["calc_value"] = 3
defs["enums"]["ImGuiCol_"][4]["comment"] = " // Background of child windows"
defs["enums"]["ImGuiCol_"][4]["name"] = "ImGuiCol_ChildBg"
defs["enums"]["ImGuiCol_"][4]["value"] = 3
defs["enums"]["ImGuiCol_"][5] = {}
defs["enums"]["ImGuiCol_"][5]["calc_value"] = 4
defs["enums"]["ImGuiCol_"][5]["comment"] = " // Background of popups, menus, tooltips windows"
defs["enums"]["ImGuiCol_"][5]["name"] = "ImGuiCol_PopupBg"
defs["enums"]["ImGuiCol_"][5]["value"] = 4
defs["enums"]["ImGuiCol_"][6] = {}
defs["enums"]["ImGuiCol_"][6]["calc_value"] = 5
defs["enums"]["ImGuiCol_"][6]["name"] = "ImGuiCol_Border"
defs["enums"]["ImGuiCol_"][6]["value"] = 5
defs["enums"]["ImGuiCol_"][7] = {}
defs["enums"]["ImGuiCol_"][7]["calc_value"] = 6
defs["enums"]["ImGuiCol_"][7]["name"] = "ImGuiCol_BorderShadow"
defs["enums"]["ImGuiCol_"][7]["value"] = 6
defs["enums"]["ImGuiCol_"][8] = {}
defs["enums"]["ImGuiCol_"][8]["calc_value"] = 7
defs["enums"]["ImGuiCol_"][8]["comment"] = " // Background of checkbox, radio button, plot, slider, text input"
defs["enums"]["ImGuiCol_"][8]["name"] = "ImGuiCol_FrameBg"
defs["enums"]["ImGuiCol_"][8]["value"] = 7
defs["enums"]["ImGuiCol_"][9] = {}
defs["enums"]["ImGuiCol_"][9]["calc_value"] = 8
defs["enums"]["ImGuiCol_"][9]["name"] = "ImGuiCol_FrameBgHovered"
defs["enums"]["ImGuiCol_"][9]["value"] = 8
defs["enums"]["ImGuiCol_"][10] = {}
defs["enums"]["ImGuiCol_"][10]["calc_value"] = 9
defs["enums"]["ImGuiCol_"][10]["name"] = "ImGuiCol_FrameBgActive"
defs["enums"]["ImGuiCol_"][10]["value"] = 9
defs["enums"]["ImGuiCol_"][11] = {}
defs["enums"]["ImGuiCol_"][11]["calc_value"] = 10
defs["enums"]["ImGuiCol_"][11]["name"] = "ImGuiCol_TitleBg"
defs["enums"]["ImGuiCol_"][11]["value"] = 10
defs["enums"]["ImGuiCol_"][12] = {}
defs["enums"]["ImGuiCol_"][12]["calc_value"] = 11
defs["enums"]["ImGuiCol_"][12]["name"] = "ImGuiCol_TitleBgActive"
defs["enums"]["ImGuiCol_"][12]["value"] = 11
defs["enums"]["ImGuiCol_"][13] = {}
defs["enums"]["ImGuiCol_"][13]["calc_value"] = 12
defs["enums"]["ImGuiCol_"][13]["name"] = "ImGuiCol_TitleBgCollapsed"
defs["enums"]["ImGuiCol_"][13]["value"] = 12
defs["enums"]["ImGuiCol_"][14] = {}
defs["enums"]["ImGuiCol_"][14]["calc_value"] = 13
defs["enums"]["ImGuiCol_"][14]["name"] = "ImGuiCol_MenuBarBg"
defs["enums"]["ImGuiCol_"][14]["value"] = 13
defs["enums"]["ImGuiCol_"][15] = {}
defs["enums"]["ImGuiCol_"][15]["calc_value"] = 14
defs["enums"]["ImGuiCol_"][15]["name"] = "ImGuiCol_ScrollbarBg"
defs["enums"]["ImGuiCol_"][15]["value"] = 14
defs["enums"]["ImGuiCol_"][16] = {}
defs["enums"]["ImGuiCol_"][16]["calc_value"] = 15
defs["enums"]["ImGuiCol_"][16]["name"] = "ImGuiCol_ScrollbarGrab"
defs["enums"]["ImGuiCol_"][16]["value"] = 15
defs["enums"]["ImGuiCol_"][17] = {}
defs["enums"]["ImGuiCol_"][17]["calc_value"] = 16
defs["enums"]["ImGuiCol_"][17]["name"] = "ImGuiCol_ScrollbarGrabHovered"
defs["enums"]["ImGuiCol_"][17]["value"] = 16
defs["enums"]["ImGuiCol_"][18] = {}
defs["enums"]["ImGuiCol_"][18]["calc_value"] = 17
defs["enums"]["ImGuiCol_"][18]["name"] = "ImGuiCol_ScrollbarGrabActive"
defs["enums"]["ImGuiCol_"][18]["value"] = 17
defs["enums"]["ImGuiCol_"][19] = {}
defs["enums"]["ImGuiCol_"][19]["calc_value"] = 18
defs["enums"]["ImGuiCol_"][19]["name"] = "ImGuiCol_CheckMark"
defs["enums"]["ImGuiCol_"][19]["value"] = 18
defs["enums"]["ImGuiCol_"][20] = {}
defs["enums"]["ImGuiCol_"][20]["calc_value"] = 19
defs["enums"]["ImGuiCol_"][20]["name"] = "ImGuiCol_SliderGrab"
defs["enums"]["ImGuiCol_"][20]["value"] = 19
defs["enums"]["ImGuiCol_"][21] = {}
defs["enums"]["ImGuiCol_"][21]["calc_value"] = 20
defs["enums"]["ImGuiCol_"][21]["name"] = "ImGuiCol_SliderGrabActive"
defs["enums"]["ImGuiCol_"][21]["value"] = 20
defs["enums"]["ImGuiCol_"][22] = {}
defs["enums"]["ImGuiCol_"][22]["calc_value"] = 21
defs["enums"]["ImGuiCol_"][22]["name"] = "ImGuiCol_Button"
defs["enums"]["ImGuiCol_"][22]["value"] = 21
defs["enums"]["ImGuiCol_"][23] = {}
defs["enums"]["ImGuiCol_"][23]["calc_value"] = 22
defs["enums"]["ImGuiCol_"][23]["name"] = "ImGuiCol_ButtonHovered"
defs["enums"]["ImGuiCol_"][23]["value"] = 22
defs["enums"]["ImGuiCol_"][24] = {}
defs["enums"]["ImGuiCol_"][24]["calc_value"] = 23
defs["enums"]["ImGuiCol_"][24]["name"] = "ImGuiCol_ButtonActive"
defs["enums"]["ImGuiCol_"][24]["value"] = 23
defs["enums"]["ImGuiCol_"][25] = {}
defs["enums"]["ImGuiCol_"][25]["calc_value"] = 24
defs["enums"]["ImGuiCol_"][25]["comment"] = " // Header* colors are used for CollapsingHeader, TreeNode, Selectable, MenuItem"
defs["enums"]["ImGuiCol_"][25]["name"] = "ImGuiCol_Header"
defs["enums"]["ImGuiCol_"][25]["value"] = 24
defs["enums"]["ImGuiCol_"][26] = {}
defs["enums"]["ImGuiCol_"][26]["calc_value"] = 25
defs["enums"]["ImGuiCol_"][26]["name"] = "ImGuiCol_HeaderHovered"
defs["enums"]["ImGuiCol_"][26]["value"] = 25
defs["enums"]["ImGuiCol_"][27] = {}
defs["enums"]["ImGuiCol_"][27]["calc_value"] = 26
defs["enums"]["ImGuiCol_"][27]["name"] = "ImGuiCol_HeaderActive"
defs["enums"]["ImGuiCol_"][27]["value"] = 26
defs["enums"]["ImGuiCol_"][28] = {}
defs["enums"]["ImGuiCol_"][28]["calc_value"] = 27
defs["enums"]["ImGuiCol_"][28]["name"] = "ImGuiCol_Separator"
defs["enums"]["ImGuiCol_"][28]["value"] = 27
defs["enums"]["ImGuiCol_"][29] = {}
defs["enums"]["ImGuiCol_"][29]["calc_value"] = 28
defs["enums"]["ImGuiCol_"][29]["name"] = "ImGuiCol_SeparatorHovered"
defs["enums"]["ImGuiCol_"][29]["value"] = 28
defs["enums"]["ImGuiCol_"][30] = {}
defs["enums"]["ImGuiCol_"][30]["calc_value"] = 29
defs["enums"]["ImGuiCol_"][30]["name"] = "ImGuiCol_SeparatorActive"
defs["enums"]["ImGuiCol_"][30]["value"] = 29
defs["enums"]["ImGuiCol_"][31] = {}
defs["enums"]["ImGuiCol_"][31]["calc_value"] = 30
defs["enums"]["ImGuiCol_"][31]["name"] = "ImGuiCol_ResizeGrip"
defs["enums"]["ImGuiCol_"][31]["value"] = 30
defs["enums"]["ImGuiCol_"][32] = {}
defs["enums"]["ImGuiCol_"][32]["calc_value"] = 31
defs["enums"]["ImGuiCol_"][32]["name"] = "ImGuiCol_ResizeGripHovered"
defs["enums"]["ImGuiCol_"][32]["value"] = 31
defs["enums"]["ImGuiCol_"][33] = {}
defs["enums"]["ImGuiCol_"][33]["calc_value"] = 32
defs["enums"]["ImGuiCol_"][33]["name"] = "ImGuiCol_ResizeGripActive"
defs["enums"]["ImGuiCol_"][33]["value"] = 32
defs["enums"]["ImGuiCol_"][34] = {}
defs["enums"]["ImGuiCol_"][34]["calc_value"] = 33
defs["enums"]["ImGuiCol_"][34]["name"] = "ImGuiCol_Tab"
defs["enums"]["ImGuiCol_"][34]["value"] = 33
defs["enums"]["ImGuiCol_"][35] = {}
defs["enums"]["ImGuiCol_"][35]["calc_value"] = 34
defs["enums"]["ImGuiCol_"][35]["name"] = "ImGuiCol_TabHovered"
defs["enums"]["ImGuiCol_"][35]["value"] = 34
defs["enums"]["ImGuiCol_"][36] = {}
defs["enums"]["ImGuiCol_"][36]["calc_value"] = 35
defs["enums"]["ImGuiCol_"][36]["name"] = "ImGuiCol_TabActive"
defs["enums"]["ImGuiCol_"][36]["value"] = 35
defs["enums"]["ImGuiCol_"][37] = {}
defs["enums"]["ImGuiCol_"][37]["calc_value"] = 36
defs["enums"]["ImGuiCol_"][37]["name"] = "ImGuiCol_TabUnfocused"
defs["enums"]["ImGuiCol_"][37]["value"] = 36
defs["enums"]["ImGuiCol_"][38] = {}
defs["enums"]["ImGuiCol_"][38]["calc_value"] = 37
defs["enums"]["ImGuiCol_"][38]["name"] = "ImGuiCol_TabUnfocusedActive"
defs["enums"]["ImGuiCol_"][38]["value"] = 37
defs["enums"]["ImGuiCol_"][39] = {}
defs["enums"]["ImGuiCol_"][39]["calc_value"] = 38
defs["enums"]["ImGuiCol_"][39]["comment"] = " // Preview overlay color when about to docking something"
defs["enums"]["ImGuiCol_"][39]["name"] = "ImGuiCol_DockingPreview"
defs["enums"]["ImGuiCol_"][39]["value"] = 38
defs["enums"]["ImGuiCol_"][40] = {}
defs["enums"]["ImGuiCol_"][40]["calc_value"] = 39
defs["enums"]["ImGuiCol_"][40]["comment"] = " // Background color for empty node (e.g. CentralNode with no window docked into it)"
defs["enums"]["ImGuiCol_"][40]["name"] = "ImGuiCol_DockingEmptyBg"
defs["enums"]["ImGuiCol_"][40]["value"] = 39
defs["enums"]["ImGuiCol_"][41] = {}
defs["enums"]["ImGuiCol_"][41]["calc_value"] = 40
defs["enums"]["ImGuiCol_"][41]["name"] = "ImGuiCol_PlotLines"
defs["enums"]["ImGuiCol_"][41]["value"] = 40
defs["enums"]["ImGuiCol_"][42] = {}
defs["enums"]["ImGuiCol_"][42]["calc_value"] = 41
defs["enums"]["ImGuiCol_"][42]["name"] = "ImGuiCol_PlotLinesHovered"
defs["enums"]["ImGuiCol_"][42]["value"] = 41
defs["enums"]["ImGuiCol_"][43] = {}
defs["enums"]["ImGuiCol_"][43]["calc_value"] = 42
defs["enums"]["ImGuiCol_"][43]["name"] = "ImGuiCol_PlotHistogram"
defs["enums"]["ImGuiCol_"][43]["value"] = 42
defs["enums"]["ImGuiCol_"][44] = {}
defs["enums"]["ImGuiCol_"][44]["calc_value"] = 43
defs["enums"]["ImGuiCol_"][44]["name"] = "ImGuiCol_PlotHistogramHovered"
defs["enums"]["ImGuiCol_"][44]["value"] = 43
defs["enums"]["ImGuiCol_"][45] = {}
defs["enums"]["ImGuiCol_"][45]["calc_value"] = 44
defs["enums"]["ImGuiCol_"][45]["name"] = "ImGuiCol_TextSelectedBg"
defs["enums"]["ImGuiCol_"][45]["value"] = 44
defs["enums"]["ImGuiCol_"][46] = {}
defs["enums"]["ImGuiCol_"][46]["calc_value"] = 45
defs["enums"]["ImGuiCol_"][46]["name"] = "ImGuiCol_DragDropTarget"
defs["enums"]["ImGuiCol_"][46]["value"] = 45
defs["enums"]["ImGuiCol_"][47] = {}
defs["enums"]["ImGuiCol_"][47]["calc_value"] = 46
defs["enums"]["ImGuiCol_"][47]["comment"] = " // Gamepad/keyboard: current highlighted item"
defs["enums"]["ImGuiCol_"][47]["name"] = "ImGuiCol_NavHighlight"
defs["enums"]["ImGuiCol_"][47]["value"] = 46
defs["enums"]["ImGuiCol_"][48] = {}
defs["enums"]["ImGuiCol_"][48]["calc_value"] = 47
defs["enums"]["ImGuiCol_"][48]["comment"] = " // Highlight window when using CTRL+TAB"
defs["enums"]["ImGuiCol_"][48]["name"] = "ImGuiCol_NavWindowingHighlight"
defs["enums"]["ImGuiCol_"][48]["value"] = 47
defs["enums"]["ImGuiCol_"][49] = {}
defs["enums"]["ImGuiCol_"][49]["calc_value"] = 48
defs["enums"]["ImGuiCol_"][49]["comment"] = " // Darken/colorize entire screen behind the CTRL+TAB window list, when active"
defs["enums"]["ImGuiCol_"][49]["name"] = "ImGuiCol_NavWindowingDimBg"
defs["enums"]["ImGuiCol_"][49]["value"] = 48
defs["enums"]["ImGuiCol_"][50] = {}
defs["enums"]["ImGuiCol_"][50]["calc_value"] = 49
defs["enums"]["ImGuiCol_"][50]["comment"] = " // Darken/colorize entire screen behind a modal window, when one is active"
defs["enums"]["ImGuiCol_"][50]["name"] = "ImGuiCol_ModalWindowDimBg"
defs["enums"]["ImGuiCol_"][50]["value"] = 49
defs["enums"]["ImGuiCol_"][51] = {}
defs["enums"]["ImGuiCol_"][51]["calc_value"] = 50
defs["enums"]["ImGuiCol_"][51]["name"] = "ImGuiCol_COUNT"
defs["enums"]["ImGuiCol_"][51]["value"] = 50
defs["enums"]["ImGuiColorEditFlags_"] = {}
defs["enums"]["ImGuiColorEditFlags_"][1] = {}
defs["enums"]["ImGuiColorEditFlags_"][1]["calc_value"] = 0
defs["enums"]["ImGuiColorEditFlags_"][1]["name"] = "ImGuiColorEditFlags_None"
defs["enums"]["ImGuiColorEditFlags_"][1]["value"] = "0"
defs["enums"]["ImGuiColorEditFlags_"][2] = {}
defs["enums"]["ImGuiColorEditFlags_"][2]["calc_value"] = 2
defs["enums"]["ImGuiColorEditFlags_"][2]["comment"] = " //              // ColorEdit, ColorPicker, ColorButton: ignore Alpha component (will only read 3 components from the input pointer)."
defs["enums"]["ImGuiColorEditFlags_"][2]["name"] = "ImGuiColorEditFlags_NoAlpha"
defs["enums"]["ImGuiColorEditFlags_"][2]["value"] = "1 << 1"
defs["enums"]["ImGuiColorEditFlags_"][3] = {}
defs["enums"]["ImGuiColorEditFlags_"][3]["calc_value"] = 4
defs["enums"]["ImGuiColorEditFlags_"][3]["comment"] = " //              // ColorEdit: disable picker when clicking on colored square."
defs["enums"]["ImGuiColorEditFlags_"][3]["name"] = "ImGuiColorEditFlags_NoPicker"
defs["enums"]["ImGuiColorEditFlags_"][3]["value"] = "1 << 2"
defs["enums"]["ImGuiColorEditFlags_"][4] = {}
defs["enums"]["ImGuiColorEditFlags_"][4]["calc_value"] = 8
defs["enums"]["ImGuiColorEditFlags_"][4]["comment"] = " //              // ColorEdit: disable toggling options menu when right-clicking on inputs/small preview."
defs["enums"]["ImGuiColorEditFlags_"][4]["name"] = "ImGuiColorEditFlags_NoOptions"
defs["enums"]["ImGuiColorEditFlags_"][4]["value"] = "1 << 3"
defs["enums"]["ImGuiColorEditFlags_"][5] = {}
defs["enums"]["ImGuiColorEditFlags_"][5]["calc_value"] = 16
defs["enums"]["ImGuiColorEditFlags_"][5]["comment"] = " //              // ColorEdit, ColorPicker: disable colored square preview next to the inputs. (e.g. to show only the inputs)"
defs["enums"]["ImGuiColorEditFlags_"][5]["name"] = "ImGuiColorEditFlags_NoSmallPreview"
defs["enums"]["ImGuiColorEditFlags_"][5]["value"] = "1 << 4"
defs["enums"]["ImGuiColorEditFlags_"][6] = {}
defs["enums"]["ImGuiColorEditFlags_"][6]["calc_value"] = 32
defs["enums"]["ImGuiColorEditFlags_"][6]["comment"] = " //              // ColorEdit, ColorPicker: disable inputs sliders/text widgets (e.g. to show only the small preview colored square)."
defs["enums"]["ImGuiColorEditFlags_"][6]["name"] = "ImGuiColorEditFlags_NoInputs"
defs["enums"]["ImGuiColorEditFlags_"][6]["value"] = "1 << 5"
defs["enums"]["ImGuiColorEditFlags_"][7] = {}
defs["enums"]["ImGuiColorEditFlags_"][7]["calc_value"] = 64
defs["enums"]["ImGuiColorEditFlags_"][7]["comment"] = " //              // ColorEdit, ColorPicker, ColorButton: disable tooltip when hovering the preview."
defs["enums"]["ImGuiColorEditFlags_"][7]["name"] = "ImGuiColorEditFlags_NoTooltip"
defs["enums"]["ImGuiColorEditFlags_"][7]["value"] = "1 << 6"
defs["enums"]["ImGuiColorEditFlags_"][8] = {}
defs["enums"]["ImGuiColorEditFlags_"][8]["calc_value"] = 128
defs["enums"]["ImGuiColorEditFlags_"][8]["comment"] = " //              // ColorEdit, ColorPicker: disable display of inline text label (the label is still forwarded to the tooltip and picker)."
defs["enums"]["ImGuiColorEditFlags_"][8]["name"] = "ImGuiColorEditFlags_NoLabel"
defs["enums"]["ImGuiColorEditFlags_"][8]["value"] = "1 << 7"
defs["enums"]["ImGuiColorEditFlags_"][9] = {}
defs["enums"]["ImGuiColorEditFlags_"][9]["calc_value"] = 256
defs["enums"]["ImGuiColorEditFlags_"][9]["comment"] = " //              // ColorPicker: disable bigger color preview on right side of the picker, use small colored square preview instead."
defs["enums"]["ImGuiColorEditFlags_"][9]["name"] = "ImGuiColorEditFlags_NoSidePreview"
defs["enums"]["ImGuiColorEditFlags_"][9]["value"] = "1 << 8"
defs["enums"]["ImGuiColorEditFlags_"][10] = {}
defs["enums"]["ImGuiColorEditFlags_"][10]["calc_value"] = 512
defs["enums"]["ImGuiColorEditFlags_"][10]["comment"] = " //              // ColorEdit: disable drag and drop target. ColorButton: disable drag and drop source."
defs["enums"]["ImGuiColorEditFlags_"][10]["name"] = "ImGuiColorEditFlags_NoDragDrop"
defs["enums"]["ImGuiColorEditFlags_"][10]["value"] = "1 << 9"
defs["enums"]["ImGuiColorEditFlags_"][11] = {}
defs["enums"]["ImGuiColorEditFlags_"][11]["calc_value"] = 1024
defs["enums"]["ImGuiColorEditFlags_"][11]["comment"] = " //              // ColorButton: disable border (which is enforced by default)"
defs["enums"]["ImGuiColorEditFlags_"][11]["name"] = "ImGuiColorEditFlags_NoBorder"
defs["enums"]["ImGuiColorEditFlags_"][11]["value"] = "1 << 10"
defs["enums"]["ImGuiColorEditFlags_"][12] = {}
defs["enums"]["ImGuiColorEditFlags_"][12]["calc_value"] = 65536
defs["enums"]["ImGuiColorEditFlags_"][12]["comment"] = " //              // ColorEdit, ColorPicker: show vertical alpha bar/gradient in picker."
defs["enums"]["ImGuiColorEditFlags_"][12]["name"] = "ImGuiColorEditFlags_AlphaBar"
defs["enums"]["ImGuiColorEditFlags_"][12]["value"] = "1 << 16"
defs["enums"]["ImGuiColorEditFlags_"][13] = {}
defs["enums"]["ImGuiColorEditFlags_"][13]["calc_value"] = 131072
defs["enums"]["ImGuiColorEditFlags_"][13]["comment"] = " //              // ColorEdit, ColorPicker, ColorButton: display preview as a transparent color over a checkerboard, instead of opaque."
defs["enums"]["ImGuiColorEditFlags_"][13]["name"] = "ImGuiColorEditFlags_AlphaPreview"
defs["enums"]["ImGuiColorEditFlags_"][13]["value"] = "1 << 17"
defs["enums"]["ImGuiColorEditFlags_"][14] = {}
defs["enums"]["ImGuiColorEditFlags_"][14]["calc_value"] = 262144
defs["enums"]["ImGuiColorEditFlags_"][14]["comment"] = " //              // ColorEdit, ColorPicker, ColorButton: display half opaque / half checkerboard, instead of opaque."
defs["enums"]["ImGuiColorEditFlags_"][14]["name"] = "ImGuiColorEditFlags_AlphaPreviewHalf"
defs["enums"]["ImGuiColorEditFlags_"][14]["value"] = "1 << 18"
defs["enums"]["ImGuiColorEditFlags_"][15] = {}
defs["enums"]["ImGuiColorEditFlags_"][15]["calc_value"] = 524288
defs["enums"]["ImGuiColorEditFlags_"][15]["comment"] = " //              // (WIP) ColorEdit: Currently only disable 0.0f..1.0f limits in RGBA edition (note: you probably want to use ImGuiColorEditFlags_Float flag as well)."
defs["enums"]["ImGuiColorEditFlags_"][15]["name"] = "ImGuiColorEditFlags_HDR"
defs["enums"]["ImGuiColorEditFlags_"][15]["value"] = "1 << 19"
defs["enums"]["ImGuiColorEditFlags_"][16] = {}
defs["enums"]["ImGuiColorEditFlags_"][16]["calc_value"] = 1048576
defs["enums"]["ImGuiColorEditFlags_"][16]["comment"] = " // [Display]    // ColorEdit: override _display_ type among RGB/HSV/Hex. ColorPicker: select any combination using one or more of RGB/HSV/Hex."
defs["enums"]["ImGuiColorEditFlags_"][16]["name"] = "ImGuiColorEditFlags_DisplayRGB"
defs["enums"]["ImGuiColorEditFlags_"][16]["value"] = "1 << 20"
defs["enums"]["ImGuiColorEditFlags_"][17] = {}
defs["enums"]["ImGuiColorEditFlags_"][17]["calc_value"] = 2097152
defs["enums"]["ImGuiColorEditFlags_"][17]["comment"] = " // [Display]    // \""
defs["enums"]["ImGuiColorEditFlags_"][17]["name"] = "ImGuiColorEditFlags_DisplayHSV"
defs["enums"]["ImGuiColorEditFlags_"][17]["value"] = "1 << 21"
defs["enums"]["ImGuiColorEditFlags_"][18] = {}
defs["enums"]["ImGuiColorEditFlags_"][18]["calc_value"] = 4194304
defs["enums"]["ImGuiColorEditFlags_"][18]["comment"] = " // [Display]    // \""
defs["enums"]["ImGuiColorEditFlags_"][18]["name"] = "ImGuiColorEditFlags_DisplayHex"
defs["enums"]["ImGuiColorEditFlags_"][18]["value"] = "1 << 22"
defs["enums"]["ImGuiColorEditFlags_"][19] = {}
defs["enums"]["ImGuiColorEditFlags_"][19]["calc_value"] = 8388608
defs["enums"]["ImGuiColorEditFlags_"][19]["comment"] = " // [DataType]   // ColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0..255."
defs["enums"]["ImGuiColorEditFlags_"][19]["name"] = "ImGuiColorEditFlags_Uint8"
defs["enums"]["ImGuiColorEditFlags_"][19]["value"] = "1 << 23"
defs["enums"]["ImGuiColorEditFlags_"][20] = {}
defs["enums"]["ImGuiColorEditFlags_"][20]["calc_value"] = 16777216
defs["enums"]["ImGuiColorEditFlags_"][20]["comment"] = " // [DataType]   // ColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0.0f..1.0f floats instead of 0..255 integers. No round-trip of value via integers."
defs["enums"]["ImGuiColorEditFlags_"][20]["name"] = "ImGuiColorEditFlags_Float"
defs["enums"]["ImGuiColorEditFlags_"][20]["value"] = "1 << 24"
defs["enums"]["ImGuiColorEditFlags_"][21] = {}
defs["enums"]["ImGuiColorEditFlags_"][21]["calc_value"] = 33554432
defs["enums"]["ImGuiColorEditFlags_"][21]["comment"] = " // [Picker]     // ColorPicker: bar for Hue, rectangle for Sat/Value."
defs["enums"]["ImGuiColorEditFlags_"][21]["name"] = "ImGuiColorEditFlags_PickerHueBar"
defs["enums"]["ImGuiColorEditFlags_"][21]["value"] = "1 << 25"
defs["enums"]["ImGuiColorEditFlags_"][22] = {}
defs["enums"]["ImGuiColorEditFlags_"][22]["calc_value"] = 67108864
defs["enums"]["ImGuiColorEditFlags_"][22]["comment"] = " // [Picker]     // ColorPicker: wheel for Hue, triangle for Sat/Value."
defs["enums"]["ImGuiColorEditFlags_"][22]["name"] = "ImGuiColorEditFlags_PickerHueWheel"
defs["enums"]["ImGuiColorEditFlags_"][22]["value"] = "1 << 26"
defs["enums"]["ImGuiColorEditFlags_"][23] = {}
defs["enums"]["ImGuiColorEditFlags_"][23]["calc_value"] = 134217728
defs["enums"]["ImGuiColorEditFlags_"][23]["comment"] = " // [Input]      // ColorEdit, ColorPicker: input and output data in RGB format."
defs["enums"]["ImGuiColorEditFlags_"][23]["name"] = "ImGuiColorEditFlags_InputRGB"
defs["enums"]["ImGuiColorEditFlags_"][23]["value"] = "1 << 27"
defs["enums"]["ImGuiColorEditFlags_"][24] = {}
defs["enums"]["ImGuiColorEditFlags_"][24]["calc_value"] = 268435456
defs["enums"]["ImGuiColorEditFlags_"][24]["comment"] = " // [Input]      // ColorEdit, ColorPicker: input and output data in HSV format."
defs["enums"]["ImGuiColorEditFlags_"][24]["name"] = "ImGuiColorEditFlags_InputHSV"
defs["enums"]["ImGuiColorEditFlags_"][24]["value"] = "1 << 28"
defs["enums"]["ImGuiColorEditFlags_"][25] = {}
defs["enums"]["ImGuiColorEditFlags_"][25]["calc_value"] = 177209344
defs["enums"]["ImGuiColorEditFlags_"][25]["name"] = "ImGuiColorEditFlags__OptionsDefault"
defs["enums"]["ImGuiColorEditFlags_"][25]["value"] = "ImGuiColorEditFlags_Uint8 | ImGuiColorEditFlags_DisplayRGB | ImGuiColorEditFlags_InputRGB | ImGuiColorEditFlags_PickerHueBar"
defs["enums"]["ImGuiColorEditFlags_"][26] = {}
defs["enums"]["ImGuiColorEditFlags_"][26]["calc_value"] = 7340032
defs["enums"]["ImGuiColorEditFlags_"][26]["name"] = "ImGuiColorEditFlags__DisplayMask"
defs["enums"]["ImGuiColorEditFlags_"][26]["value"] = "ImGuiColorEditFlags_DisplayRGB | ImGuiColorEditFlags_DisplayHSV | ImGuiColorEditFlags_DisplayHex"
defs["enums"]["ImGuiColorEditFlags_"][27] = {}
defs["enums"]["ImGuiColorEditFlags_"][27]["calc_value"] = 25165824
defs["enums"]["ImGuiColorEditFlags_"][27]["name"] = "ImGuiColorEditFlags__DataTypeMask"
defs["enums"]["ImGuiColorEditFlags_"][27]["value"] = "ImGuiColorEditFlags_Uint8 | ImGuiColorEditFlags_Float"
defs["enums"]["ImGuiColorEditFlags_"][28] = {}
defs["enums"]["ImGuiColorEditFlags_"][28]["calc_value"] = 100663296
defs["enums"]["ImGuiColorEditFlags_"][28]["name"] = "ImGuiColorEditFlags__PickerMask"
defs["enums"]["ImGuiColorEditFlags_"][28]["value"] = "ImGuiColorEditFlags_PickerHueWheel | ImGuiColorEditFlags_PickerHueBar"
defs["enums"]["ImGuiColorEditFlags_"][29] = {}
defs["enums"]["ImGuiColorEditFlags_"][29]["calc_value"] = 402653184
defs["enums"]["ImGuiColorEditFlags_"][29]["name"] = "ImGuiColorEditFlags__InputMask"
defs["enums"]["ImGuiColorEditFlags_"][29]["value"] = "ImGuiColorEditFlags_InputRGB | ImGuiColorEditFlags_InputHSV"
defs["enums"]["ImGuiColumnsFlags_"] = {}
defs["enums"]["ImGuiColumnsFlags_"][1] = {}
defs["enums"]["ImGuiColumnsFlags_"][1]["calc_value"] = 0
defs["enums"]["ImGuiColumnsFlags_"][1]["name"] = "ImGuiColumnsFlags_None"
defs["enums"]["ImGuiColumnsFlags_"][1]["value"] = "0"
defs["enums"]["ImGuiColumnsFlags_"][2] = {}
defs["enums"]["ImGuiColumnsFlags_"][2]["calc_value"] = 1
defs["enums"]["ImGuiColumnsFlags_"][2]["comment"] = " // Disable column dividers"
defs["enums"]["ImGuiColumnsFlags_"][2]["name"] = "ImGuiColumnsFlags_NoBorder"
defs["enums"]["ImGuiColumnsFlags_"][2]["value"] = "1 << 0"
defs["enums"]["ImGuiColumnsFlags_"][3] = {}
defs["enums"]["ImGuiColumnsFlags_"][3]["calc_value"] = 2
defs["enums"]["ImGuiColumnsFlags_"][3]["comment"] = " // Disable resizing columns when clicking on the dividers"
defs["enums"]["ImGuiColumnsFlags_"][3]["name"] = "ImGuiColumnsFlags_NoResize"
defs["enums"]["ImGuiColumnsFlags_"][3]["value"] = "1 << 1"
defs["enums"]["ImGuiColumnsFlags_"][4] = {}
defs["enums"]["ImGuiColumnsFlags_"][4]["calc_value"] = 4
defs["enums"]["ImGuiColumnsFlags_"][4]["comment"] = " // Disable column width preservation when adjusting columns"
defs["enums"]["ImGuiColumnsFlags_"][4]["name"] = "ImGuiColumnsFlags_NoPreserveWidths"
defs["enums"]["ImGuiColumnsFlags_"][4]["value"] = "1 << 2"
defs["enums"]["ImGuiColumnsFlags_"][5] = {}
defs["enums"]["ImGuiColumnsFlags_"][5]["calc_value"] = 8
defs["enums"]["ImGuiColumnsFlags_"][5]["comment"] = " // Disable forcing columns to fit within window"
defs["enums"]["ImGuiColumnsFlags_"][5]["name"] = "ImGuiColumnsFlags_NoForceWithinWindow"
defs["enums"]["ImGuiColumnsFlags_"][5]["value"] = "1 << 3"
defs["enums"]["ImGuiColumnsFlags_"][6] = {}
defs["enums"]["ImGuiColumnsFlags_"][6]["calc_value"] = 16
defs["enums"]["ImGuiColumnsFlags_"][6]["comment"] = " // (WIP) Restore pre-1.51 behavior of extending the parent window contents size but _without affecting the columns width at all_. Will eventually remove."
defs["enums"]["ImGuiColumnsFlags_"][6]["name"] = "ImGuiColumnsFlags_GrowParentContentsSize"
defs["enums"]["ImGuiColumnsFlags_"][6]["value"] = "1 << 4"
defs["enums"]["ImGuiComboFlags_"] = {}
defs["enums"]["ImGuiComboFlags_"][1] = {}
defs["enums"]["ImGuiComboFlags_"][1]["calc_value"] = 0
defs["enums"]["ImGuiComboFlags_"][1]["name"] = "ImGuiComboFlags_None"
defs["enums"]["ImGuiComboFlags_"][1]["value"] = "0"
defs["enums"]["ImGuiComboFlags_"][2] = {}
defs["enums"]["ImGuiComboFlags_"][2]["calc_value"] = 1
defs["enums"]["ImGuiComboFlags_"][2]["comment"] = " // Align the popup toward the left by default"
defs["enums"]["ImGuiComboFlags_"][2]["name"] = "ImGuiComboFlags_PopupAlignLeft"
defs["enums"]["ImGuiComboFlags_"][2]["value"] = "1 << 0"
defs["enums"]["ImGuiComboFlags_"][3] = {}
defs["enums"]["ImGuiComboFlags_"][3]["calc_value"] = 2
defs["enums"]["ImGuiComboFlags_"][3]["comment"] = " // Max ~4 items visible. Tip: If you want your combo popup to be a specific size you can use SetNextWindowSizeConstraints() prior to calling BeginCombo()"
defs["enums"]["ImGuiComboFlags_"][3]["name"] = "ImGuiComboFlags_HeightSmall"
defs["enums"]["ImGuiComboFlags_"][3]["value"] = "1 << 1"
defs["enums"]["ImGuiComboFlags_"][4] = {}
defs["enums"]["ImGuiComboFlags_"][4]["calc_value"] = 4
defs["enums"]["ImGuiComboFlags_"][4]["comment"] = " // Max ~8 items visible (default)"
defs["enums"]["ImGuiComboFlags_"][4]["name"] = "ImGuiComboFlags_HeightRegular"
defs["enums"]["ImGuiComboFlags_"][4]["value"] = "1 << 2"
defs["enums"]["ImGuiComboFlags_"][5] = {}
defs["enums"]["ImGuiComboFlags_"][5]["calc_value"] = 8
defs["enums"]["ImGuiComboFlags_"][5]["comment"] = " // Max ~20 items visible"
defs["enums"]["ImGuiComboFlags_"][5]["name"] = "ImGuiComboFlags_HeightLarge"
defs["enums"]["ImGuiComboFlags_"][5]["value"] = "1 << 3"
defs["enums"]["ImGuiComboFlags_"][6] = {}
defs["enums"]["ImGuiComboFlags_"][6]["calc_value"] = 16
defs["enums"]["ImGuiComboFlags_"][6]["comment"] = " // As many fitting items as possible"
defs["enums"]["ImGuiComboFlags_"][6]["name"] = "ImGuiComboFlags_HeightLargest"
defs["enums"]["ImGuiComboFlags_"][6]["value"] = "1 << 4"
defs["enums"]["ImGuiComboFlags_"][7] = {}
defs["enums"]["ImGuiComboFlags_"][7]["calc_value"] = 32
defs["enums"]["ImGuiComboFlags_"][7]["comment"] = " // Display on the preview box without the square arrow button"
defs["enums"]["ImGuiComboFlags_"][7]["name"] = "ImGuiComboFlags_NoArrowButton"
defs["enums"]["ImGuiComboFlags_"][7]["value"] = "1 << 5"
defs["enums"]["ImGuiComboFlags_"][8] = {}
defs["enums"]["ImGuiComboFlags_"][8]["calc_value"] = 64
defs["enums"]["ImGuiComboFlags_"][8]["comment"] = " // Display only a square arrow button"
defs["enums"]["ImGuiComboFlags_"][8]["name"] = "ImGuiComboFlags_NoPreview"
defs["enums"]["ImGuiComboFlags_"][8]["value"] = "1 << 6"
defs["enums"]["ImGuiComboFlags_"][9] = {}
defs["enums"]["ImGuiComboFlags_"][9]["calc_value"] = 30
defs["enums"]["ImGuiComboFlags_"][9]["name"] = "ImGuiComboFlags_HeightMask_"
defs["enums"]["ImGuiComboFlags_"][9]["value"] = "ImGuiComboFlags_HeightSmall | ImGuiComboFlags_HeightRegular | ImGuiComboFlags_HeightLarge | ImGuiComboFlags_HeightLargest"
defs["enums"]["ImGuiCond_"] = {}
defs["enums"]["ImGuiCond_"][1] = {}
defs["enums"]["ImGuiCond_"][1]["calc_value"] = 0
defs["enums"]["ImGuiCond_"][1]["comment"] = " // No condition (always set the variable), same as _Always"
defs["enums"]["ImGuiCond_"][1]["name"] = "ImGuiCond_None"
defs["enums"]["ImGuiCond_"][1]["value"] = "0"
defs["enums"]["ImGuiCond_"][2] = {}
defs["enums"]["ImGuiCond_"][2]["calc_value"] = 1
defs["enums"]["ImGuiCond_"][2]["comment"] = " // No condition (always set the variable)"
defs["enums"]["ImGuiCond_"][2]["name"] = "ImGuiCond_Always"
defs["enums"]["ImGuiCond_"][2]["value"] = "1 << 0"
defs["enums"]["ImGuiCond_"][3] = {}
defs["enums"]["ImGuiCond_"][3]["calc_value"] = 2
defs["enums"]["ImGuiCond_"][3]["comment"] = " // Set the variable once per runtime session (only the first call will succeed)"
defs["enums"]["ImGuiCond_"][3]["name"] = "ImGuiCond_Once"
defs["enums"]["ImGuiCond_"][3]["value"] = "1 << 1"
defs["enums"]["ImGuiCond_"][4] = {}
defs["enums"]["ImGuiCond_"][4]["calc_value"] = 4
defs["enums"]["ImGuiCond_"][4]["comment"] = " // Set the variable if the object/window has no persistently saved data (no entry in .ini file)"
defs["enums"]["ImGuiCond_"][4]["name"] = "ImGuiCond_FirstUseEver"
defs["enums"]["ImGuiCond_"][4]["value"] = "1 << 2"
defs["enums"]["ImGuiCond_"][5] = {}
defs["enums"]["ImGuiCond_"][5]["calc_value"] = 8
defs["enums"]["ImGuiCond_"][5]["comment"] = " // Set the variable if the object/window is appearing after being hidden/inactive (or the first time)"
defs["enums"]["ImGuiCond_"][5]["name"] = "ImGuiCond_Appearing"
defs["enums"]["ImGuiCond_"][5]["value"] = "1 << 3"
defs["enums"]["ImGuiConfigFlags_"] = {}
defs["enums"]["ImGuiConfigFlags_"][1] = {}
defs["enums"]["ImGuiConfigFlags_"][1]["calc_value"] = 0
defs["enums"]["ImGuiConfigFlags_"][1]["name"] = "ImGuiConfigFlags_None"
defs["enums"]["ImGuiConfigFlags_"][1]["value"] = "0"
defs["enums"]["ImGuiConfigFlags_"][2] = {}
defs["enums"]["ImGuiConfigFlags_"][2]["calc_value"] = 1
defs["enums"]["ImGuiConfigFlags_"][2]["comment"] = " // Master keyboard navigation enable flag. NewFrame() will automatically fill io.NavInputs[] based on io.KeysDown[]."
defs["enums"]["ImGuiConfigFlags_"][2]["name"] = "ImGuiConfigFlags_NavEnableKeyboard"
defs["enums"]["ImGuiConfigFlags_"][2]["value"] = "1 << 0"
defs["enums"]["ImGuiConfigFlags_"][3] = {}
defs["enums"]["ImGuiConfigFlags_"][3]["calc_value"] = 2
defs["enums"]["ImGuiConfigFlags_"][3]["comment"] = " // Master gamepad navigation enable flag. This is mostly to instruct your imgui back-end to fill io.NavInputs[]. Back-end also needs to set ImGuiBackendFlags_HasGamepad."
defs["enums"]["ImGuiConfigFlags_"][3]["name"] = "ImGuiConfigFlags_NavEnableGamepad"
defs["enums"]["ImGuiConfigFlags_"][3]["value"] = "1 << 1"
defs["enums"]["ImGuiConfigFlags_"][4] = {}
defs["enums"]["ImGuiConfigFlags_"][4]["calc_value"] = 4
defs["enums"]["ImGuiConfigFlags_"][4]["comment"] = " // Instruct navigation to move the mouse cursor. May be useful on TV/console systems where moving a virtual mouse is awkward. Will update io.MousePos and set io.WantSetMousePos=true. If enabled you MUST honor io.WantSetMousePos requests in your binding, otherwise ImGui will react as if the mouse is jumping around back and forth."
defs["enums"]["ImGuiConfigFlags_"][4]["name"] = "ImGuiConfigFlags_NavEnableSetMousePos"
defs["enums"]["ImGuiConfigFlags_"][4]["value"] = "1 << 2"
defs["enums"]["ImGuiConfigFlags_"][5] = {}
defs["enums"]["ImGuiConfigFlags_"][5]["calc_value"] = 8
defs["enums"]["ImGuiConfigFlags_"][5]["comment"] = " // Instruct navigation to not set the io.WantCaptureKeyboard flag when io.NavActive is set."
defs["enums"]["ImGuiConfigFlags_"][5]["name"] = "ImGuiConfigFlags_NavNoCaptureKeyboard"
defs["enums"]["ImGuiConfigFlags_"][5]["value"] = "1 << 3"
defs["enums"]["ImGuiConfigFlags_"][6] = {}
defs["enums"]["ImGuiConfigFlags_"][6]["calc_value"] = 16
defs["enums"]["ImGuiConfigFlags_"][6]["comment"] = " // Instruct imgui to clear mouse position/buttons in NewFrame(). This allows ignoring the mouse information set by the back-end."
defs["enums"]["ImGuiConfigFlags_"][6]["name"] = "ImGuiConfigFlags_NoMouse"
defs["enums"]["ImGuiConfigFlags_"][6]["value"] = "1 << 4"
defs["enums"]["ImGuiConfigFlags_"][7] = {}
defs["enums"]["ImGuiConfigFlags_"][7]["calc_value"] = 32
defs["enums"]["ImGuiConfigFlags_"][7]["comment"] = " // Instruct back-end to not alter mouse cursor shape and visibility. Use if the back-end cursor changes are interfering with yours and you don't want to use SetMouseCursor() to change mouse cursor. You may want to honor requests from imgui by reading GetMouseCursor() yourself instead."
defs["enums"]["ImGuiConfigFlags_"][7]["name"] = "ImGuiConfigFlags_NoMouseCursorChange"
defs["enums"]["ImGuiConfigFlags_"][7]["value"] = "1 << 5"
defs["enums"]["ImGuiConfigFlags_"][8] = {}
defs["enums"]["ImGuiConfigFlags_"][8]["calc_value"] = 64
defs["enums"]["ImGuiConfigFlags_"][8]["comment"] = " // Docking enable flags."
defs["enums"]["ImGuiConfigFlags_"][8]["name"] = "ImGuiConfigFlags_DockingEnable"
defs["enums"]["ImGuiConfigFlags_"][8]["value"] = "1 << 6"
defs["enums"]["ImGuiConfigFlags_"][9] = {}
defs["enums"]["ImGuiConfigFlags_"][9]["calc_value"] = 1024
defs["enums"]["ImGuiConfigFlags_"][9]["comment"] = " // Viewport enable flags (require both ImGuiConfigFlags_PlatformHasViewports + ImGuiConfigFlags_RendererHasViewports set by the respective back-ends)"
defs["enums"]["ImGuiConfigFlags_"][9]["name"] = "ImGuiConfigFlags_ViewportsEnable"
defs["enums"]["ImGuiConfigFlags_"][9]["value"] = "1 << 10"
defs["enums"]["ImGuiConfigFlags_"][10] = {}
defs["enums"]["ImGuiConfigFlags_"][10]["calc_value"] = 16384
defs["enums"]["ImGuiConfigFlags_"][10]["comment"] = " // [BETA: Don't use] FIXME-DPI: Reposition and resize imgui windows when the DpiScale of a viewport changed (mostly useful for the main viewport hosting other window). Note that resizing the main window itself is up to your application."
defs["enums"]["ImGuiConfigFlags_"][10]["name"] = "ImGuiConfigFlags_DpiEnableScaleViewports"
defs["enums"]["ImGuiConfigFlags_"][10]["value"] = "1 << 14"
defs["enums"]["ImGuiConfigFlags_"][11] = {}
defs["enums"]["ImGuiConfigFlags_"][11]["calc_value"] = 32768
defs["enums"]["ImGuiConfigFlags_"][11]["comment"] = " // [BETA: Don't use] FIXME-DPI: Request bitmap-scaled fonts to match DpiScale. This is a very low-quality workaround. The correct way to handle DPI is _currently_ to replace the atlas and/or fonts in the Platform_OnChangedViewport callback, but this is all early work in progress."
defs["enums"]["ImGuiConfigFlags_"][11]["name"] = "ImGuiConfigFlags_DpiEnableScaleFonts"
defs["enums"]["ImGuiConfigFlags_"][11]["value"] = "1 << 15"
defs["enums"]["ImGuiConfigFlags_"][12] = {}
defs["enums"]["ImGuiConfigFlags_"][12]["calc_value"] = 1048576
defs["enums"]["ImGuiConfigFlags_"][12]["comment"] = " // Application is SRGB-aware."
defs["enums"]["ImGuiConfigFlags_"][12]["name"] = "ImGuiConfigFlags_IsSRGB"
defs["enums"]["ImGuiConfigFlags_"][12]["value"] = "1 << 20"
defs["enums"]["ImGuiConfigFlags_"][13] = {}
defs["enums"]["ImGuiConfigFlags_"][13]["calc_value"] = 2097152
defs["enums"]["ImGuiConfigFlags_"][13]["comment"] = " // Application is using a touch screen instead of a mouse."
defs["enums"]["ImGuiConfigFlags_"][13]["name"] = "ImGuiConfigFlags_IsTouchScreen"
defs["enums"]["ImGuiConfigFlags_"][13]["value"] = "1 << 21"
defs["enums"]["ImGuiDataAuthority_"] = {}
defs["enums"]["ImGuiDataAuthority_"][1] = {}
defs["enums"]["ImGuiDataAuthority_"][1]["calc_value"] = 0
defs["enums"]["ImGuiDataAuthority_"][1]["name"] = "ImGuiDataAuthority_Auto"
defs["enums"]["ImGuiDataAuthority_"][1]["value"] = 0
defs["enums"]["ImGuiDataAuthority_"][2] = {}
defs["enums"]["ImGuiDataAuthority_"][2]["calc_value"] = 1
defs["enums"]["ImGuiDataAuthority_"][2]["name"] = "ImGuiDataAuthority_DockNode"
defs["enums"]["ImGuiDataAuthority_"][2]["value"] = 1
defs["enums"]["ImGuiDataAuthority_"][3] = {}
defs["enums"]["ImGuiDataAuthority_"][3]["calc_value"] = 2
defs["enums"]["ImGuiDataAuthority_"][3]["name"] = "ImGuiDataAuthority_Window"
defs["enums"]["ImGuiDataAuthority_"][3]["value"] = 2
defs["enums"]["ImGuiDataTypePrivate_"] = {}
defs["enums"]["ImGuiDataTypePrivate_"][1] = {}
defs["enums"]["ImGuiDataTypePrivate_"][1]["calc_value"] = 11
defs["enums"]["ImGuiDataTypePrivate_"][1]["name"] = "ImGuiDataType_String"
defs["enums"]["ImGuiDataTypePrivate_"][1]["value"] = "ImGuiDataType_COUNT + 1"
defs["enums"]["ImGuiDataTypePrivate_"][2] = {}
defs["enums"]["ImGuiDataTypePrivate_"][2]["calc_value"] = 12
defs["enums"]["ImGuiDataTypePrivate_"][2]["name"] = "ImGuiDataType_Pointer"
defs["enums"]["ImGuiDataTypePrivate_"][2]["value"] = "ImGuiDataType_COUNT + 1+1"
defs["enums"]["ImGuiDataTypePrivate_"][3] = {}
defs["enums"]["ImGuiDataTypePrivate_"][3]["calc_value"] = 13
defs["enums"]["ImGuiDataTypePrivate_"][3]["name"] = "ImGuiDataType_ID"
defs["enums"]["ImGuiDataTypePrivate_"][3]["value"] = "ImGuiDataType_COUNT + 1+1+1"
defs["enums"]["ImGuiDataType_"] = {}
defs["enums"]["ImGuiDataType_"][1] = {}
defs["enums"]["ImGuiDataType_"][1]["calc_value"] = 0
defs["enums"]["ImGuiDataType_"][1]["comment"] = " // signed char / char (with sensible compilers)"
defs["enums"]["ImGuiDataType_"][1]["name"] = "ImGuiDataType_S8"
defs["enums"]["ImGuiDataType_"][1]["value"] = 0
defs["enums"]["ImGuiDataType_"][2] = {}
defs["enums"]["ImGuiDataType_"][2]["calc_value"] = 1
defs["enums"]["ImGuiDataType_"][2]["comment"] = " // unsigned char"
defs["enums"]["ImGuiDataType_"][2]["name"] = "ImGuiDataType_U8"
defs["enums"]["ImGuiDataType_"][2]["value"] = 1
defs["enums"]["ImGuiDataType_"][3] = {}
defs["enums"]["ImGuiDataType_"][3]["calc_value"] = 2
defs["enums"]["ImGuiDataType_"][3]["comment"] = " // short"
defs["enums"]["ImGuiDataType_"][3]["name"] = "ImGuiDataType_S16"
defs["enums"]["ImGuiDataType_"][3]["value"] = 2
defs["enums"]["ImGuiDataType_"][4] = {}
defs["enums"]["ImGuiDataType_"][4]["calc_value"] = 3
defs["enums"]["ImGuiDataType_"][4]["comment"] = " // unsigned short"
defs["enums"]["ImGuiDataType_"][4]["name"] = "ImGuiDataType_U16"
defs["enums"]["ImGuiDataType_"][4]["value"] = 3
defs["enums"]["ImGuiDataType_"][5] = {}
defs["enums"]["ImGuiDataType_"][5]["calc_value"] = 4
defs["enums"]["ImGuiDataType_"][5]["comment"] = " // int"
defs["enums"]["ImGuiDataType_"][5]["name"] = "ImGuiDataType_S32"
defs["enums"]["ImGuiDataType_"][5]["value"] = 4
defs["enums"]["ImGuiDataType_"][6] = {}
defs["enums"]["ImGuiDataType_"][6]["calc_value"] = 5
defs["enums"]["ImGuiDataType_"][6]["comment"] = " // unsigned int"
defs["enums"]["ImGuiDataType_"][6]["name"] = "ImGuiDataType_U32"
defs["enums"]["ImGuiDataType_"][6]["value"] = 5
defs["enums"]["ImGuiDataType_"][7] = {}
defs["enums"]["ImGuiDataType_"][7]["calc_value"] = 6
defs["enums"]["ImGuiDataType_"][7]["comment"] = " // long long / __int64"
defs["enums"]["ImGuiDataType_"][7]["name"] = "ImGuiDataType_S64"
defs["enums"]["ImGuiDataType_"][7]["value"] = 6
defs["enums"]["ImGuiDataType_"][8] = {}
defs["enums"]["ImGuiDataType_"][8]["calc_value"] = 7
defs["enums"]["ImGuiDataType_"][8]["comment"] = " // unsigned long long / unsigned __int64"
defs["enums"]["ImGuiDataType_"][8]["name"] = "ImGuiDataType_U64"
defs["enums"]["ImGuiDataType_"][8]["value"] = 7
defs["enums"]["ImGuiDataType_"][9] = {}
defs["enums"]["ImGuiDataType_"][9]["calc_value"] = 8
defs["enums"]["ImGuiDataType_"][9]["comment"] = " // float"
defs["enums"]["ImGuiDataType_"][9]["name"] = "ImGuiDataType_Float"
defs["enums"]["ImGuiDataType_"][9]["value"] = 8
defs["enums"]["ImGuiDataType_"][10] = {}
defs["enums"]["ImGuiDataType_"][10]["calc_value"] = 9
defs["enums"]["ImGuiDataType_"][10]["comment"] = " // double"
defs["enums"]["ImGuiDataType_"][10]["name"] = "ImGuiDataType_Double"
defs["enums"]["ImGuiDataType_"][10]["value"] = 9
defs["enums"]["ImGuiDataType_"][11] = {}
defs["enums"]["ImGuiDataType_"][11]["calc_value"] = 10
defs["enums"]["ImGuiDataType_"][11]["name"] = "ImGuiDataType_COUNT"
defs["enums"]["ImGuiDataType_"][11]["value"] = 10
defs["enums"]["ImGuiDir_"] = {}
defs["enums"]["ImGuiDir_"][1] = {}
defs["enums"]["ImGuiDir_"][1]["calc_value"] = -1
defs["enums"]["ImGuiDir_"][1]["name"] = "ImGuiDir_None"
defs["enums"]["ImGuiDir_"][1]["value"] = "-1"
defs["enums"]["ImGuiDir_"][2] = {}
defs["enums"]["ImGuiDir_"][2]["calc_value"] = 0
defs["enums"]["ImGuiDir_"][2]["name"] = "ImGuiDir_Left"
defs["enums"]["ImGuiDir_"][2]["value"] = "0"
defs["enums"]["ImGuiDir_"][3] = {}
defs["enums"]["ImGuiDir_"][3]["calc_value"] = 1
defs["enums"]["ImGuiDir_"][3]["name"] = "ImGuiDir_Right"
defs["enums"]["ImGuiDir_"][3]["value"] = "1"
defs["enums"]["ImGuiDir_"][4] = {}
defs["enums"]["ImGuiDir_"][4]["calc_value"] = 2
defs["enums"]["ImGuiDir_"][4]["name"] = "ImGuiDir_Up"
defs["enums"]["ImGuiDir_"][4]["value"] = "2"
defs["enums"]["ImGuiDir_"][5] = {}
defs["enums"]["ImGuiDir_"][5]["calc_value"] = 3
defs["enums"]["ImGuiDir_"][5]["name"] = "ImGuiDir_Down"
defs["enums"]["ImGuiDir_"][5]["value"] = "3"
defs["enums"]["ImGuiDir_"][6] = {}
defs["enums"]["ImGuiDir_"][6]["calc_value"] = 4
defs["enums"]["ImGuiDir_"][6]["name"] = "ImGuiDir_COUNT"
defs["enums"]["ImGuiDir_"][6]["value"] = 4
defs["enums"]["ImGuiDockNodeFlagsPrivate_"] = {}
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][1] = {}
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][1]["calc_value"] = 1024
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][1]["comment"] = " // Local, Saved  // A dockspace is a node that occupy space within an existing user window. Otherwise the node is floating and create its own window."
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][1]["name"] = "ImGuiDockNodeFlags_DockSpace"
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][1]["value"] = "1 << 10"
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][2] = {}
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][2]["calc_value"] = 2048
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][2]["comment"] = " // Local, Saved  // The central node has 2 main properties: stay visible when empty, only use \"remaining\" spaces from its neighbor."
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][2]["name"] = "ImGuiDockNodeFlags_CentralNode"
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][2]["value"] = "1 << 11"
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][3] = {}
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][3]["calc_value"] = 4096
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][3]["comment"] = " // Local, Saved  // Tab bar is completely unavailable. No triangle in the corner to enable it back."
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][3]["name"] = "ImGuiDockNodeFlags_NoTabBar"
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][3]["value"] = "1 << 12"
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][4] = {}
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][4]["calc_value"] = 8192
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][4]["comment"] = " // Local, Saved  // Tab bar is hidden, with a triangle in the corner to show it again (NB: actual tab-bar instance may be destroyed as this is only used for single-window tab bar)"
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][4]["name"] = "ImGuiDockNodeFlags_HiddenTabBar"
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][4]["value"] = "1 << 13"
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][5] = {}
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][5]["calc_value"] = 16384
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][5]["comment"] = " // Local, Saved  // Disable window/docking menu (that one that appears instead of the collapse button)"
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][5]["name"] = "ImGuiDockNodeFlags_NoWindowMenuButton"
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][5]["value"] = "1 << 14"
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][6] = {}
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][6]["calc_value"] = 32768
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][6]["comment"] = " // Local, Saved  //"
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][6]["name"] = "ImGuiDockNodeFlags_NoCloseButton"
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][6]["value"] = "1 << 15"
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][7] = {}
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][7]["calc_value"] = 65536
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][7]["comment"] = " // Local, Saved  // Disable any form of docking in this dockspace or individual node. (On a whole dockspace, this pretty much defeat the purpose of using a dockspace at all). Note: when turned on, existing docked nodes will be preserved."
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][7]["name"] = "ImGuiDockNodeFlags_NoDocking"
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][7]["value"] = "1 << 16"
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][8] = {}
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][8]["calc_value"] = 131072
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][8]["comment"] = " // [EXPERIMENTAL] Prevent another window/node from splitting this node."
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][8]["name"] = "ImGuiDockNodeFlags_NoDockingSplitMe"
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][8]["value"] = "1 << 17"
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][9] = {}
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][9]["calc_value"] = 262144
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][9]["comment"] = " // [EXPERIMENTAL] Prevent this node from splitting another window/node."
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][9]["name"] = "ImGuiDockNodeFlags_NoDockingSplitOther"
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][9]["value"] = "1 << 18"
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][10] = {}
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][10]["calc_value"] = 524288
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][10]["comment"] = " // [EXPERIMENTAL] Prevent another window/node to be docked over this node."
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][10]["name"] = "ImGuiDockNodeFlags_NoDockingOverMe"
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][10]["value"] = "1 << 19"
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][11] = {}
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][11]["calc_value"] = 1048576
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][11]["comment"] = " // [EXPERIMENTAL] Prevent this node to be docked over another window/node."
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][11]["name"] = "ImGuiDockNodeFlags_NoDockingOverOther"
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][11]["value"] = "1 << 20"
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][12] = {}
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][12]["calc_value"] = 2097152
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][12]["comment"] = " // [EXPERIMENTAL]"
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][12]["name"] = "ImGuiDockNodeFlags_NoResizeX"
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][12]["value"] = "1 << 21"
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][13] = {}
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][13]["calc_value"] = 4194304
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][13]["comment"] = " // [EXPERIMENTAL]"
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][13]["name"] = "ImGuiDockNodeFlags_NoResizeY"
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][13]["value"] = "1 << 22"
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][14] = {}
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][14]["calc_value"] = -1
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][14]["name"] = "ImGuiDockNodeFlags_SharedFlagsInheritMask_"
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][14]["value"] = "~0"
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][15] = {}
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][15]["calc_value"] = 6291488
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][15]["name"] = "ImGuiDockNodeFlags_NoResizeFlagsMask_"
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][15]["value"] = "ImGuiDockNodeFlags_NoResize | ImGuiDockNodeFlags_NoResizeX | ImGuiDockNodeFlags_NoResizeY"
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][16] = {}
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][16]["calc_value"] = 6421616
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][16]["name"] = "ImGuiDockNodeFlags_LocalFlagsMask_"
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][16]["value"] = "ImGuiDockNodeFlags_NoSplit | ImGuiDockNodeFlags_NoResizeFlagsMask_ | ImGuiDockNodeFlags_AutoHideTabBar | ImGuiDockNodeFlags_DockSpace | ImGuiDockNodeFlags_CentralNode | ImGuiDockNodeFlags_NoTabBar | ImGuiDockNodeFlags_HiddenTabBar | ImGuiDockNodeFlags_NoWindowMenuButton | ImGuiDockNodeFlags_NoCloseButton | ImGuiDockNodeFlags_NoDocking"
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][17] = {}
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][17]["calc_value"] = 6420592
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][17]["comment"] = " // When splitting those flags are moved to the inheriting child, never duplicated"
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][17]["name"] = "ImGuiDockNodeFlags_LocalFlagsTransferMask_"
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][17]["value"] = "ImGuiDockNodeFlags_LocalFlagsMask_ & ~ImGuiDockNodeFlags_DockSpace"
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][18] = {}
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][18]["calc_value"] = 6421536
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][18]["name"] = "ImGuiDockNodeFlags_SavedFlagsMask_"
defs["enums"]["ImGuiDockNodeFlagsPrivate_"][18]["value"] = "ImGuiDockNodeFlags_NoResizeFlagsMask_ | ImGuiDockNodeFlags_DockSpace | ImGuiDockNodeFlags_CentralNode | ImGuiDockNodeFlags_NoTabBar | ImGuiDockNodeFlags_HiddenTabBar | ImGuiDockNodeFlags_NoWindowMenuButton | ImGuiDockNodeFlags_NoCloseButton | ImGuiDockNodeFlags_NoDocking"
defs["enums"]["ImGuiDockNodeFlags_"] = {}
defs["enums"]["ImGuiDockNodeFlags_"][1] = {}
defs["enums"]["ImGuiDockNodeFlags_"][1]["calc_value"] = 0
defs["enums"]["ImGuiDockNodeFlags_"][1]["name"] = "ImGuiDockNodeFlags_None"
defs["enums"]["ImGuiDockNodeFlags_"][1]["value"] = "0"
defs["enums"]["ImGuiDockNodeFlags_"][2] = {}
defs["enums"]["ImGuiDockNodeFlags_"][2]["calc_value"] = 1
defs["enums"]["ImGuiDockNodeFlags_"][2]["comment"] = " // Shared       // Don't display the dockspace node but keep it alive. Windows docked into this dockspace node won't be undocked."
defs["enums"]["ImGuiDockNodeFlags_"][2]["name"] = "ImGuiDockNodeFlags_KeepAliveOnly"
defs["enums"]["ImGuiDockNodeFlags_"][2]["value"] = "1 << 0"
defs["enums"]["ImGuiDockNodeFlags_"][3] = {}
defs["enums"]["ImGuiDockNodeFlags_"][3]["calc_value"] = 4
defs["enums"]["ImGuiDockNodeFlags_"][3]["comment"] = " // Shared       // Disable docking inside the Central Node, which will be always kept empty."
defs["enums"]["ImGuiDockNodeFlags_"][3]["name"] = "ImGuiDockNodeFlags_NoDockingInCentralNode"
defs["enums"]["ImGuiDockNodeFlags_"][3]["value"] = "1 << 2"
defs["enums"]["ImGuiDockNodeFlags_"][4] = {}
defs["enums"]["ImGuiDockNodeFlags_"][4]["calc_value"] = 8
defs["enums"]["ImGuiDockNodeFlags_"][4]["comment"] = " // Shared       // Enable passthru dockspace: 1) DockSpace() will render a ImGuiCol_WindowBg background covering everything excepted the Central Node when empty. Meaning the host window should probably use SetNextWindowBgAlpha(0.0f) prior to Begin() when using this. 2) When Central Node is empty: let inputs pass-through + won't display a DockingEmptyBg background. See demo for details."
defs["enums"]["ImGuiDockNodeFlags_"][4]["name"] = "ImGuiDockNodeFlags_PassthruCentralNode"
defs["enums"]["ImGuiDockNodeFlags_"][4]["value"] = "1 << 3"
defs["enums"]["ImGuiDockNodeFlags_"][5] = {}
defs["enums"]["ImGuiDockNodeFlags_"][5]["calc_value"] = 16
defs["enums"]["ImGuiDockNodeFlags_"][5]["comment"] = " // Shared/Local // Disable splitting the node into smaller nodes. Useful e.g. when embedding dockspaces into a main root one (the root one may have splitting disabled to reduce confusion). Note: when turned off, existing splits will be preserved."
defs["enums"]["ImGuiDockNodeFlags_"][5]["name"] = "ImGuiDockNodeFlags_NoSplit"
defs["enums"]["ImGuiDockNodeFlags_"][5]["value"] = "1 << 4"
defs["enums"]["ImGuiDockNodeFlags_"][6] = {}
defs["enums"]["ImGuiDockNodeFlags_"][6]["calc_value"] = 32
defs["enums"]["ImGuiDockNodeFlags_"][6]["comment"] = " // Shared/Local // Disable resizing node using the splitter/separators. Useful with programatically setup dockspaces."
defs["enums"]["ImGuiDockNodeFlags_"][6]["name"] = "ImGuiDockNodeFlags_NoResize"
defs["enums"]["ImGuiDockNodeFlags_"][6]["value"] = "1 << 5"
defs["enums"]["ImGuiDockNodeFlags_"][7] = {}
defs["enums"]["ImGuiDockNodeFlags_"][7]["calc_value"] = 64
defs["enums"]["ImGuiDockNodeFlags_"][7]["comment"] = " // Shared/Local // Tab bar will automatically hide when there is a single window in the dock node."
defs["enums"]["ImGuiDockNodeFlags_"][7]["name"] = "ImGuiDockNodeFlags_AutoHideTabBar"
defs["enums"]["ImGuiDockNodeFlags_"][7]["value"] = "1 << 6"
defs["enums"]["ImGuiDockNodeState"] = {}
defs["enums"]["ImGuiDockNodeState"][1] = {}
defs["enums"]["ImGuiDockNodeState"][1]["calc_value"] = 0
defs["enums"]["ImGuiDockNodeState"][1]["name"] = "ImGuiDockNodeState_Unknown"
defs["enums"]["ImGuiDockNodeState"][1]["value"] = 0
defs["enums"]["ImGuiDockNodeState"][2] = {}
defs["enums"]["ImGuiDockNodeState"][2]["calc_value"] = 1
defs["enums"]["ImGuiDockNodeState"][2]["name"] = "ImGuiDockNodeState_HostWindowHiddenBecauseSingleWindow"
defs["enums"]["ImGuiDockNodeState"][2]["value"] = 1
defs["enums"]["ImGuiDockNodeState"][3] = {}
defs["enums"]["ImGuiDockNodeState"][3]["calc_value"] = 2
defs["enums"]["ImGuiDockNodeState"][3]["name"] = "ImGuiDockNodeState_HostWindowHiddenBecauseWindowsAreResizing"
defs["enums"]["ImGuiDockNodeState"][3]["value"] = 2
defs["enums"]["ImGuiDockNodeState"][4] = {}
defs["enums"]["ImGuiDockNodeState"][4]["calc_value"] = 3
defs["enums"]["ImGuiDockNodeState"][4]["name"] = "ImGuiDockNodeState_HostWindowVisible"
defs["enums"]["ImGuiDockNodeState"][4]["value"] = 3
defs["enums"]["ImGuiDragDropFlags_"] = {}
defs["enums"]["ImGuiDragDropFlags_"][1] = {}
defs["enums"]["ImGuiDragDropFlags_"][1]["calc_value"] = 0
defs["enums"]["ImGuiDragDropFlags_"][1]["name"] = "ImGuiDragDropFlags_None"
defs["enums"]["ImGuiDragDropFlags_"][1]["value"] = "0"
defs["enums"]["ImGuiDragDropFlags_"][2] = {}
defs["enums"]["ImGuiDragDropFlags_"][2]["calc_value"] = 1
defs["enums"]["ImGuiDragDropFlags_"][2]["comment"] = " // By default, a successful call to BeginDragDropSource opens a tooltip so you can display a preview or description of the source contents. This flag disable this behavior."
defs["enums"]["ImGuiDragDropFlags_"][2]["name"] = "ImGuiDragDropFlags_SourceNoPreviewTooltip"
defs["enums"]["ImGuiDragDropFlags_"][2]["value"] = "1 << 0"
defs["enums"]["ImGuiDragDropFlags_"][3] = {}
defs["enums"]["ImGuiDragDropFlags_"][3]["calc_value"] = 2
defs["enums"]["ImGuiDragDropFlags_"][3]["comment"] = " // By default, when dragging we clear data so that IsItemHovered() will return false, to avoid subsequent user code submitting tooltips. This flag disable this behavior so you can still call IsItemHovered() on the source item."
defs["enums"]["ImGuiDragDropFlags_"][3]["name"] = "ImGuiDragDropFlags_SourceNoDisableHover"
defs["enums"]["ImGuiDragDropFlags_"][3]["value"] = "1 << 1"
defs["enums"]["ImGuiDragDropFlags_"][4] = {}
defs["enums"]["ImGuiDragDropFlags_"][4]["calc_value"] = 4
defs["enums"]["ImGuiDragDropFlags_"][4]["comment"] = " // Disable the behavior that allows to open tree nodes and collapsing header by holding over them while dragging a source item."
defs["enums"]["ImGuiDragDropFlags_"][4]["name"] = "ImGuiDragDropFlags_SourceNoHoldToOpenOthers"
defs["enums"]["ImGuiDragDropFlags_"][4]["value"] = "1 << 2"
defs["enums"]["ImGuiDragDropFlags_"][5] = {}
defs["enums"]["ImGuiDragDropFlags_"][5]["calc_value"] = 8
defs["enums"]["ImGuiDragDropFlags_"][5]["comment"] = " // Allow items such as Text(), Image() that have no unique identifier to be used as drag source, by manufacturing a temporary identifier based on their window-relative position. This is extremely unusual within the dear imgui ecosystem and so we made it explicit."
defs["enums"]["ImGuiDragDropFlags_"][5]["name"] = "ImGuiDragDropFlags_SourceAllowNullID"
defs["enums"]["ImGuiDragDropFlags_"][5]["value"] = "1 << 3"
defs["enums"]["ImGuiDragDropFlags_"][6] = {}
defs["enums"]["ImGuiDragDropFlags_"][6]["calc_value"] = 16
defs["enums"]["ImGuiDragDropFlags_"][6]["comment"] = " // External source (from outside of dear imgui), won't attempt to read current item/window info. Will always return true. Only one Extern source can be active simultaneously."
defs["enums"]["ImGuiDragDropFlags_"][6]["name"] = "ImGuiDragDropFlags_SourceExtern"
defs["enums"]["ImGuiDragDropFlags_"][6]["value"] = "1 << 4"
defs["enums"]["ImGuiDragDropFlags_"][7] = {}
defs["enums"]["ImGuiDragDropFlags_"][7]["calc_value"] = 32
defs["enums"]["ImGuiDragDropFlags_"][7]["comment"] = " // Automatically expire the payload if the source cease to be submitted (otherwise payloads are persisting while being dragged)"
defs["enums"]["ImGuiDragDropFlags_"][7]["name"] = "ImGuiDragDropFlags_SourceAutoExpirePayload"
defs["enums"]["ImGuiDragDropFlags_"][7]["value"] = "1 << 5"
defs["enums"]["ImGuiDragDropFlags_"][8] = {}
defs["enums"]["ImGuiDragDropFlags_"][8]["calc_value"] = 1024
defs["enums"]["ImGuiDragDropFlags_"][8]["comment"] = " // AcceptDragDropPayload() will returns true even before the mouse button is released. You can then call IsDelivery() to test if the payload needs to be delivered."
defs["enums"]["ImGuiDragDropFlags_"][8]["name"] = "ImGuiDragDropFlags_AcceptBeforeDelivery"
defs["enums"]["ImGuiDragDropFlags_"][8]["value"] = "1 << 10"
defs["enums"]["ImGuiDragDropFlags_"][9] = {}
defs["enums"]["ImGuiDragDropFlags_"][9]["calc_value"] = 2048
defs["enums"]["ImGuiDragDropFlags_"][9]["comment"] = " // Do not draw the default highlight rectangle when hovering over target."
defs["enums"]["ImGuiDragDropFlags_"][9]["name"] = "ImGuiDragDropFlags_AcceptNoDrawDefaultRect"
defs["enums"]["ImGuiDragDropFlags_"][9]["value"] = "1 << 11"
defs["enums"]["ImGuiDragDropFlags_"][10] = {}
defs["enums"]["ImGuiDragDropFlags_"][10]["calc_value"] = 4096
defs["enums"]["ImGuiDragDropFlags_"][10]["comment"] = " // Request hiding the BeginDragDropSource tooltip from the BeginDragDropTarget site."
defs["enums"]["ImGuiDragDropFlags_"][10]["name"] = "ImGuiDragDropFlags_AcceptNoPreviewTooltip"
defs["enums"]["ImGuiDragDropFlags_"][10]["value"] = "1 << 12"
defs["enums"]["ImGuiDragDropFlags_"][11] = {}
defs["enums"]["ImGuiDragDropFlags_"][11]["calc_value"] = 3072
defs["enums"]["ImGuiDragDropFlags_"][11]["comment"] = " // For peeking ahead and inspecting the payload before delivery."
defs["enums"]["ImGuiDragDropFlags_"][11]["name"] = "ImGuiDragDropFlags_AcceptPeekOnly"
defs["enums"]["ImGuiDragDropFlags_"][11]["value"] = "ImGuiDragDropFlags_AcceptBeforeDelivery | ImGuiDragDropFlags_AcceptNoDrawDefaultRect"
defs["enums"]["ImGuiFocusedFlags_"] = {}
defs["enums"]["ImGuiFocusedFlags_"][1] = {}
defs["enums"]["ImGuiFocusedFlags_"][1]["calc_value"] = 0
defs["enums"]["ImGuiFocusedFlags_"][1]["name"] = "ImGuiFocusedFlags_None"
defs["enums"]["ImGuiFocusedFlags_"][1]["value"] = "0"
defs["enums"]["ImGuiFocusedFlags_"][2] = {}
defs["enums"]["ImGuiFocusedFlags_"][2]["calc_value"] = 1
defs["enums"]["ImGuiFocusedFlags_"][2]["comment"] = " // IsWindowFocused(): Return true if any children of the window is focused"
defs["enums"]["ImGuiFocusedFlags_"][2]["name"] = "ImGuiFocusedFlags_ChildWindows"
defs["enums"]["ImGuiFocusedFlags_"][2]["value"] = "1 << 0"
defs["enums"]["ImGuiFocusedFlags_"][3] = {}
defs["enums"]["ImGuiFocusedFlags_"][3]["calc_value"] = 2
defs["enums"]["ImGuiFocusedFlags_"][3]["comment"] = " // IsWindowFocused(): Test from root window (top most parent of the current hierarchy)"
defs["enums"]["ImGuiFocusedFlags_"][3]["name"] = "ImGuiFocusedFlags_RootWindow"
defs["enums"]["ImGuiFocusedFlags_"][3]["value"] = "1 << 1"
defs["enums"]["ImGuiFocusedFlags_"][4] = {}
defs["enums"]["ImGuiFocusedFlags_"][4]["calc_value"] = 4
defs["enums"]["ImGuiFocusedFlags_"][4]["comment"] = " // IsWindowFocused(): Return true if any window is focused. Important: If you are trying to tell how to dispatch your low-level inputs, do NOT use this. Use 'io.WantCaptureMouse' instead! Please read the FAQ!"
defs["enums"]["ImGuiFocusedFlags_"][4]["name"] = "ImGuiFocusedFlags_AnyWindow"
defs["enums"]["ImGuiFocusedFlags_"][4]["value"] = "1 << 2"
defs["enums"]["ImGuiFocusedFlags_"][5] = {}
defs["enums"]["ImGuiFocusedFlags_"][5]["calc_value"] = 3
defs["enums"]["ImGuiFocusedFlags_"][5]["name"] = "ImGuiFocusedFlags_RootAndChildWindows"
defs["enums"]["ImGuiFocusedFlags_"][5]["value"] = "ImGuiFocusedFlags_RootWindow | ImGuiFocusedFlags_ChildWindows"
defs["enums"]["ImGuiHoveredFlags_"] = {}
defs["enums"]["ImGuiHoveredFlags_"][1] = {}
defs["enums"]["ImGuiHoveredFlags_"][1]["calc_value"] = 0
defs["enums"]["ImGuiHoveredFlags_"][1]["comment"] = " // Return true if directly over the item/window, not obstructed by another window, not obstructed by an active popup or modal blocking inputs under them."
defs["enums"]["ImGuiHoveredFlags_"][1]["name"] = "ImGuiHoveredFlags_None"
defs["enums"]["ImGuiHoveredFlags_"][1]["value"] = "0"
defs["enums"]["ImGuiHoveredFlags_"][2] = {}
defs["enums"]["ImGuiHoveredFlags_"][2]["calc_value"] = 1
defs["enums"]["ImGuiHoveredFlags_"][2]["comment"] = " // IsWindowHovered() only: Return true if any children of the window is hovered"
defs["enums"]["ImGuiHoveredFlags_"][2]["name"] = "ImGuiHoveredFlags_ChildWindows"
defs["enums"]["ImGuiHoveredFlags_"][2]["value"] = "1 << 0"
defs["enums"]["ImGuiHoveredFlags_"][3] = {}
defs["enums"]["ImGuiHoveredFlags_"][3]["calc_value"] = 2
defs["enums"]["ImGuiHoveredFlags_"][3]["comment"] = " // IsWindowHovered() only: Test from root window (top most parent of the current hierarchy)"
defs["enums"]["ImGuiHoveredFlags_"][3]["name"] = "ImGuiHoveredFlags_RootWindow"
defs["enums"]["ImGuiHoveredFlags_"][3]["value"] = "1 << 1"
defs["enums"]["ImGuiHoveredFlags_"][4] = {}
defs["enums"]["ImGuiHoveredFlags_"][4]["calc_value"] = 4
defs["enums"]["ImGuiHoveredFlags_"][4]["comment"] = " // IsWindowHovered() only: Return true if any window is hovered"
defs["enums"]["ImGuiHoveredFlags_"][4]["name"] = "ImGuiHoveredFlags_AnyWindow"
defs["enums"]["ImGuiHoveredFlags_"][4]["value"] = "1 << 2"
defs["enums"]["ImGuiHoveredFlags_"][5] = {}
defs["enums"]["ImGuiHoveredFlags_"][5]["calc_value"] = 8
defs["enums"]["ImGuiHoveredFlags_"][5]["comment"] = " // Return true even if a popup window is normally blocking access to this item/window"
defs["enums"]["ImGuiHoveredFlags_"][5]["name"] = "ImGuiHoveredFlags_AllowWhenBlockedByPopup"
defs["enums"]["ImGuiHoveredFlags_"][5]["value"] = "1 << 3"
defs["enums"]["ImGuiHoveredFlags_"][6] = {}
defs["enums"]["ImGuiHoveredFlags_"][6]["calc_value"] = 32
defs["enums"]["ImGuiHoveredFlags_"][6]["comment"] = " // Return true even if an active item is blocking access to this item/window. Useful for Drag and Drop patterns."
defs["enums"]["ImGuiHoveredFlags_"][6]["name"] = "ImGuiHoveredFlags_AllowWhenBlockedByActiveItem"
defs["enums"]["ImGuiHoveredFlags_"][6]["value"] = "1 << 5"
defs["enums"]["ImGuiHoveredFlags_"][7] = {}
defs["enums"]["ImGuiHoveredFlags_"][7]["calc_value"] = 64
defs["enums"]["ImGuiHoveredFlags_"][7]["comment"] = " // Return true even if the position is obstructed or overlapped by another window"
defs["enums"]["ImGuiHoveredFlags_"][7]["name"] = "ImGuiHoveredFlags_AllowWhenOverlapped"
defs["enums"]["ImGuiHoveredFlags_"][7]["value"] = "1 << 6"
defs["enums"]["ImGuiHoveredFlags_"][8] = {}
defs["enums"]["ImGuiHoveredFlags_"][8]["calc_value"] = 128
defs["enums"]["ImGuiHoveredFlags_"][8]["comment"] = " // Return true even if the item is disabled"
defs["enums"]["ImGuiHoveredFlags_"][8]["name"] = "ImGuiHoveredFlags_AllowWhenDisabled"
defs["enums"]["ImGuiHoveredFlags_"][8]["value"] = "1 << 7"
defs["enums"]["ImGuiHoveredFlags_"][9] = {}
defs["enums"]["ImGuiHoveredFlags_"][9]["calc_value"] = 104
defs["enums"]["ImGuiHoveredFlags_"][9]["name"] = "ImGuiHoveredFlags_RectOnly"
defs["enums"]["ImGuiHoveredFlags_"][9]["value"] = "ImGuiHoveredFlags_AllowWhenBlockedByPopup | ImGuiHoveredFlags_AllowWhenBlockedByActiveItem | ImGuiHoveredFlags_AllowWhenOverlapped"
defs["enums"]["ImGuiHoveredFlags_"][10] = {}
defs["enums"]["ImGuiHoveredFlags_"][10]["calc_value"] = 3
defs["enums"]["ImGuiHoveredFlags_"][10]["name"] = "ImGuiHoveredFlags_RootAndChildWindows"
defs["enums"]["ImGuiHoveredFlags_"][10]["value"] = "ImGuiHoveredFlags_RootWindow | ImGuiHoveredFlags_ChildWindows"
defs["enums"]["ImGuiInputReadMode"] = {}
defs["enums"]["ImGuiInputReadMode"][1] = {}
defs["enums"]["ImGuiInputReadMode"][1]["calc_value"] = 0
defs["enums"]["ImGuiInputReadMode"][1]["name"] = "ImGuiInputReadMode_Down"
defs["enums"]["ImGuiInputReadMode"][1]["value"] = 0
defs["enums"]["ImGuiInputReadMode"][2] = {}
defs["enums"]["ImGuiInputReadMode"][2]["calc_value"] = 1
defs["enums"]["ImGuiInputReadMode"][2]["name"] = "ImGuiInputReadMode_Pressed"
defs["enums"]["ImGuiInputReadMode"][2]["value"] = 1
defs["enums"]["ImGuiInputReadMode"][3] = {}
defs["enums"]["ImGuiInputReadMode"][3]["calc_value"] = 2
defs["enums"]["ImGuiInputReadMode"][3]["name"] = "ImGuiInputReadMode_Released"
defs["enums"]["ImGuiInputReadMode"][3]["value"] = 2
defs["enums"]["ImGuiInputReadMode"][4] = {}
defs["enums"]["ImGuiInputReadMode"][4]["calc_value"] = 3
defs["enums"]["ImGuiInputReadMode"][4]["name"] = "ImGuiInputReadMode_Repeat"
defs["enums"]["ImGuiInputReadMode"][4]["value"] = 3
defs["enums"]["ImGuiInputReadMode"][5] = {}
defs["enums"]["ImGuiInputReadMode"][5]["calc_value"] = 4
defs["enums"]["ImGuiInputReadMode"][5]["name"] = "ImGuiInputReadMode_RepeatSlow"
defs["enums"]["ImGuiInputReadMode"][5]["value"] = 4
defs["enums"]["ImGuiInputReadMode"][6] = {}
defs["enums"]["ImGuiInputReadMode"][6]["calc_value"] = 5
defs["enums"]["ImGuiInputReadMode"][6]["name"] = "ImGuiInputReadMode_RepeatFast"
defs["enums"]["ImGuiInputReadMode"][6]["value"] = 5
defs["enums"]["ImGuiInputSource"] = {}
defs["enums"]["ImGuiInputSource"][1] = {}
defs["enums"]["ImGuiInputSource"][1]["calc_value"] = 0
defs["enums"]["ImGuiInputSource"][1]["name"] = "ImGuiInputSource_None"
defs["enums"]["ImGuiInputSource"][1]["value"] = "0"
defs["enums"]["ImGuiInputSource"][2] = {}
defs["enums"]["ImGuiInputSource"][2]["calc_value"] = 1
defs["enums"]["ImGuiInputSource"][2]["name"] = "ImGuiInputSource_Mouse"
defs["enums"]["ImGuiInputSource"][2]["value"] = 1
defs["enums"]["ImGuiInputSource"][3] = {}
defs["enums"]["ImGuiInputSource"][3]["calc_value"] = 2
defs["enums"]["ImGuiInputSource"][3]["name"] = "ImGuiInputSource_Nav"
defs["enums"]["ImGuiInputSource"][3]["value"] = 2
defs["enums"]["ImGuiInputSource"][4] = {}
defs["enums"]["ImGuiInputSource"][4]["calc_value"] = 3
defs["enums"]["ImGuiInputSource"][4]["comment"] = " // Only used occasionally for storage, not tested/handled by most code"
defs["enums"]["ImGuiInputSource"][4]["name"] = "ImGuiInputSource_NavKeyboard"
defs["enums"]["ImGuiInputSource"][4]["value"] = 3
defs["enums"]["ImGuiInputSource"][5] = {}
defs["enums"]["ImGuiInputSource"][5]["calc_value"] = 4
defs["enums"]["ImGuiInputSource"][5]["comment"] = " // \""
defs["enums"]["ImGuiInputSource"][5]["name"] = "ImGuiInputSource_NavGamepad"
defs["enums"]["ImGuiInputSource"][5]["value"] = 4
defs["enums"]["ImGuiInputSource"][6] = {}
defs["enums"]["ImGuiInputSource"][6]["calc_value"] = 5
defs["enums"]["ImGuiInputSource"][6]["name"] = "ImGuiInputSource_COUNT"
defs["enums"]["ImGuiInputSource"][6]["value"] = 5
defs["enums"]["ImGuiInputTextFlags_"] = {}
defs["enums"]["ImGuiInputTextFlags_"][1] = {}
defs["enums"]["ImGuiInputTextFlags_"][1]["calc_value"] = 0
defs["enums"]["ImGuiInputTextFlags_"][1]["name"] = "ImGuiInputTextFlags_None"
defs["enums"]["ImGuiInputTextFlags_"][1]["value"] = "0"
defs["enums"]["ImGuiInputTextFlags_"][2] = {}
defs["enums"]["ImGuiInputTextFlags_"][2]["calc_value"] = 1
defs["enums"]["ImGuiInputTextFlags_"][2]["comment"] = " // Allow 0123456789.+-*/"
defs["enums"]["ImGuiInputTextFlags_"][2]["name"] = "ImGuiInputTextFlags_CharsDecimal"
defs["enums"]["ImGuiInputTextFlags_"][2]["value"] = "1 << 0"
defs["enums"]["ImGuiInputTextFlags_"][3] = {}
defs["enums"]["ImGuiInputTextFlags_"][3]["calc_value"] = 2
defs["enums"]["ImGuiInputTextFlags_"][3]["comment"] = " // Allow 0123456789ABCDEFabcdef"
defs["enums"]["ImGuiInputTextFlags_"][3]["name"] = "ImGuiInputTextFlags_CharsHexadecimal"
defs["enums"]["ImGuiInputTextFlags_"][3]["value"] = "1 << 1"
defs["enums"]["ImGuiInputTextFlags_"][4] = {}
defs["enums"]["ImGuiInputTextFlags_"][4]["calc_value"] = 4
defs["enums"]["ImGuiInputTextFlags_"][4]["comment"] = " // Turn a..z into A..Z"
defs["enums"]["ImGuiInputTextFlags_"][4]["name"] = "ImGuiInputTextFlags_CharsUppercase"
defs["enums"]["ImGuiInputTextFlags_"][4]["value"] = "1 << 2"
defs["enums"]["ImGuiInputTextFlags_"][5] = {}
defs["enums"]["ImGuiInputTextFlags_"][5]["calc_value"] = 8
defs["enums"]["ImGuiInputTextFlags_"][5]["comment"] = " // Filter out spaces, tabs"
defs["enums"]["ImGuiInputTextFlags_"][5]["name"] = "ImGuiInputTextFlags_CharsNoBlank"
defs["enums"]["ImGuiInputTextFlags_"][5]["value"] = "1 << 3"
defs["enums"]["ImGuiInputTextFlags_"][6] = {}
defs["enums"]["ImGuiInputTextFlags_"][6]["calc_value"] = 16
defs["enums"]["ImGuiInputTextFlags_"][6]["comment"] = " // Select entire text when first taking mouse focus"
defs["enums"]["ImGuiInputTextFlags_"][6]["name"] = "ImGuiInputTextFlags_AutoSelectAll"
defs["enums"]["ImGuiInputTextFlags_"][6]["value"] = "1 << 4"
defs["enums"]["ImGuiInputTextFlags_"][7] = {}
defs["enums"]["ImGuiInputTextFlags_"][7]["calc_value"] = 32
defs["enums"]["ImGuiInputTextFlags_"][7]["comment"] = " // Return 'true' when Enter is pressed (as opposed to every time the value was modified). Consider looking at the IsItemDeactivatedAfterEdit() function."
defs["enums"]["ImGuiInputTextFlags_"][7]["name"] = "ImGuiInputTextFlags_EnterReturnsTrue"
defs["enums"]["ImGuiInputTextFlags_"][7]["value"] = "1 << 5"
defs["enums"]["ImGuiInputTextFlags_"][8] = {}
defs["enums"]["ImGuiInputTextFlags_"][8]["calc_value"] = 64
defs["enums"]["ImGuiInputTextFlags_"][8]["comment"] = " // Callback on pressing TAB (for completion handling)"
defs["enums"]["ImGuiInputTextFlags_"][8]["name"] = "ImGuiInputTextFlags_CallbackCompletion"
defs["enums"]["ImGuiInputTextFlags_"][8]["value"] = "1 << 6"
defs["enums"]["ImGuiInputTextFlags_"][9] = {}
defs["enums"]["ImGuiInputTextFlags_"][9]["calc_value"] = 128
defs["enums"]["ImGuiInputTextFlags_"][9]["comment"] = " // Callback on pressing Up/Down arrows (for history handling)"
defs["enums"]["ImGuiInputTextFlags_"][9]["name"] = "ImGuiInputTextFlags_CallbackHistory"
defs["enums"]["ImGuiInputTextFlags_"][9]["value"] = "1 << 7"
defs["enums"]["ImGuiInputTextFlags_"][10] = {}
defs["enums"]["ImGuiInputTextFlags_"][10]["calc_value"] = 256
defs["enums"]["ImGuiInputTextFlags_"][10]["comment"] = " // Callback on each iteration. User code may query cursor position, modify text buffer."
defs["enums"]["ImGuiInputTextFlags_"][10]["name"] = "ImGuiInputTextFlags_CallbackAlways"
defs["enums"]["ImGuiInputTextFlags_"][10]["value"] = "1 << 8"
defs["enums"]["ImGuiInputTextFlags_"][11] = {}
defs["enums"]["ImGuiInputTextFlags_"][11]["calc_value"] = 512
defs["enums"]["ImGuiInputTextFlags_"][11]["comment"] = " // Callback on character inputs to replace or discard them. Modify 'EventChar' to replace or discard, or return 1 in callback to discard."
defs["enums"]["ImGuiInputTextFlags_"][11]["name"] = "ImGuiInputTextFlags_CallbackCharFilter"
defs["enums"]["ImGuiInputTextFlags_"][11]["value"] = "1 << 9"
defs["enums"]["ImGuiInputTextFlags_"][12] = {}
defs["enums"]["ImGuiInputTextFlags_"][12]["calc_value"] = 1024
defs["enums"]["ImGuiInputTextFlags_"][12]["comment"] = " // Pressing TAB input a '\\t' character into the text field"
defs["enums"]["ImGuiInputTextFlags_"][12]["name"] = "ImGuiInputTextFlags_AllowTabInput"
defs["enums"]["ImGuiInputTextFlags_"][12]["value"] = "1 << 10"
defs["enums"]["ImGuiInputTextFlags_"][13] = {}
defs["enums"]["ImGuiInputTextFlags_"][13]["calc_value"] = 2048
defs["enums"]["ImGuiInputTextFlags_"][13]["comment"] = " // In multi-line mode, unfocus with Enter, add new line with Ctrl+Enter (default is opposite: unfocus with Ctrl+Enter, add line with Enter)."
defs["enums"]["ImGuiInputTextFlags_"][13]["name"] = "ImGuiInputTextFlags_CtrlEnterForNewLine"
defs["enums"]["ImGuiInputTextFlags_"][13]["value"] = "1 << 11"
defs["enums"]["ImGuiInputTextFlags_"][14] = {}
defs["enums"]["ImGuiInputTextFlags_"][14]["calc_value"] = 4096
defs["enums"]["ImGuiInputTextFlags_"][14]["comment"] = " // Disable following the cursor horizontally"
defs["enums"]["ImGuiInputTextFlags_"][14]["name"] = "ImGuiInputTextFlags_NoHorizontalScroll"
defs["enums"]["ImGuiInputTextFlags_"][14]["value"] = "1 << 12"
defs["enums"]["ImGuiInputTextFlags_"][15] = {}
defs["enums"]["ImGuiInputTextFlags_"][15]["calc_value"] = 8192
defs["enums"]["ImGuiInputTextFlags_"][15]["comment"] = " // Insert mode"
defs["enums"]["ImGuiInputTextFlags_"][15]["name"] = "ImGuiInputTextFlags_AlwaysInsertMode"
defs["enums"]["ImGuiInputTextFlags_"][15]["value"] = "1 << 13"
defs["enums"]["ImGuiInputTextFlags_"][16] = {}
defs["enums"]["ImGuiInputTextFlags_"][16]["calc_value"] = 16384
defs["enums"]["ImGuiInputTextFlags_"][16]["comment"] = " // Read-only mode"
defs["enums"]["ImGuiInputTextFlags_"][16]["name"] = "ImGuiInputTextFlags_ReadOnly"
defs["enums"]["ImGuiInputTextFlags_"][16]["value"] = "1 << 14"
defs["enums"]["ImGuiInputTextFlags_"][17] = {}
defs["enums"]["ImGuiInputTextFlags_"][17]["calc_value"] = 32768
defs["enums"]["ImGuiInputTextFlags_"][17]["comment"] = " // Password mode, display all characters as '*'"
defs["enums"]["ImGuiInputTextFlags_"][17]["name"] = "ImGuiInputTextFlags_Password"
defs["enums"]["ImGuiInputTextFlags_"][17]["value"] = "1 << 15"
defs["enums"]["ImGuiInputTextFlags_"][18] = {}
defs["enums"]["ImGuiInputTextFlags_"][18]["calc_value"] = 65536
defs["enums"]["ImGuiInputTextFlags_"][18]["comment"] = " // Disable undo/redo. Note that input text owns the text data while active, if you want to provide your own undo/redo stack you need e.g. to call ClearActiveID()."
defs["enums"]["ImGuiInputTextFlags_"][18]["name"] = "ImGuiInputTextFlags_NoUndoRedo"
defs["enums"]["ImGuiInputTextFlags_"][18]["value"] = "1 << 16"
defs["enums"]["ImGuiInputTextFlags_"][19] = {}
defs["enums"]["ImGuiInputTextFlags_"][19]["calc_value"] = 131072
defs["enums"]["ImGuiInputTextFlags_"][19]["comment"] = " // Allow 0123456789.+-*/eE (Scientific notation input)"
defs["enums"]["ImGuiInputTextFlags_"][19]["name"] = "ImGuiInputTextFlags_CharsScientific"
defs["enums"]["ImGuiInputTextFlags_"][19]["value"] = "1 << 17"
defs["enums"]["ImGuiInputTextFlags_"][20] = {}
defs["enums"]["ImGuiInputTextFlags_"][20]["calc_value"] = 262144
defs["enums"]["ImGuiInputTextFlags_"][20]["comment"] = " // Callback on buffer capacity changes request (beyond 'buf_size' parameter value), allowing the string to grow. Notify when the string wants to be resized (for string types which hold a cache of their Size). You will be provided a new BufSize in the callback and NEED to honor it. (see misc/cpp/imgui_stdlib.h for an example of using this)"
defs["enums"]["ImGuiInputTextFlags_"][20]["name"] = "ImGuiInputTextFlags_CallbackResize"
defs["enums"]["ImGuiInputTextFlags_"][20]["value"] = "1 << 18"
defs["enums"]["ImGuiInputTextFlags_"][21] = {}
defs["enums"]["ImGuiInputTextFlags_"][21]["calc_value"] = 1048576
defs["enums"]["ImGuiInputTextFlags_"][21]["comment"] = " // For internal use by InputTextMultiline()"
defs["enums"]["ImGuiInputTextFlags_"][21]["name"] = "ImGuiInputTextFlags_Multiline"
defs["enums"]["ImGuiInputTextFlags_"][21]["value"] = "1 << 20"
defs["enums"]["ImGuiInputTextFlags_"][22] = {}
defs["enums"]["ImGuiInputTextFlags_"][22]["calc_value"] = 2097152
defs["enums"]["ImGuiInputTextFlags_"][22]["comment"] = " // For internal use by functions using InputText() before reformatting data"
defs["enums"]["ImGuiInputTextFlags_"][22]["name"] = "ImGuiInputTextFlags_NoMarkEdited"
defs["enums"]["ImGuiInputTextFlags_"][22]["value"] = "1 << 21"
defs["enums"]["ImGuiItemFlags_"] = {}
defs["enums"]["ImGuiItemFlags_"][1] = {}
defs["enums"]["ImGuiItemFlags_"][1]["calc_value"] = 0
defs["enums"]["ImGuiItemFlags_"][1]["name"] = "ImGuiItemFlags_None"
defs["enums"]["ImGuiItemFlags_"][1]["value"] = "0"
defs["enums"]["ImGuiItemFlags_"][2] = {}
defs["enums"]["ImGuiItemFlags_"][2]["calc_value"] = 1
defs["enums"]["ImGuiItemFlags_"][2]["comment"] = " // false"
defs["enums"]["ImGuiItemFlags_"][2]["name"] = "ImGuiItemFlags_NoTabStop"
defs["enums"]["ImGuiItemFlags_"][2]["value"] = "1 << 0"
defs["enums"]["ImGuiItemFlags_"][3] = {}
defs["enums"]["ImGuiItemFlags_"][3]["calc_value"] = 2
defs["enums"]["ImGuiItemFlags_"][3]["comment"] = " // false    // Button() will return true multiple times based on io.KeyRepeatDelay and io.KeyRepeatRate settings."
defs["enums"]["ImGuiItemFlags_"][3]["name"] = "ImGuiItemFlags_ButtonRepeat"
defs["enums"]["ImGuiItemFlags_"][3]["value"] = "1 << 1"
defs["enums"]["ImGuiItemFlags_"][4] = {}
defs["enums"]["ImGuiItemFlags_"][4]["calc_value"] = 4
defs["enums"]["ImGuiItemFlags_"][4]["comment"] = " // false    // [BETA] Disable interactions but doesn't affect visuals yet. See github.com/ocornut/imgui/issues/211"
defs["enums"]["ImGuiItemFlags_"][4]["name"] = "ImGuiItemFlags_Disabled"
defs["enums"]["ImGuiItemFlags_"][4]["value"] = "1 << 2"
defs["enums"]["ImGuiItemFlags_"][5] = {}
defs["enums"]["ImGuiItemFlags_"][5]["calc_value"] = 8
defs["enums"]["ImGuiItemFlags_"][5]["comment"] = " // false"
defs["enums"]["ImGuiItemFlags_"][5]["name"] = "ImGuiItemFlags_NoNav"
defs["enums"]["ImGuiItemFlags_"][5]["value"] = "1 << 3"
defs["enums"]["ImGuiItemFlags_"][6] = {}
defs["enums"]["ImGuiItemFlags_"][6]["calc_value"] = 16
defs["enums"]["ImGuiItemFlags_"][6]["comment"] = " // false"
defs["enums"]["ImGuiItemFlags_"][6]["name"] = "ImGuiItemFlags_NoNavDefaultFocus"
defs["enums"]["ImGuiItemFlags_"][6]["value"] = "1 << 4"
defs["enums"]["ImGuiItemFlags_"][7] = {}
defs["enums"]["ImGuiItemFlags_"][7]["calc_value"] = 32
defs["enums"]["ImGuiItemFlags_"][7]["comment"] = " // false    // MenuItem/Selectable() automatically closes current Popup window"
defs["enums"]["ImGuiItemFlags_"][7]["name"] = "ImGuiItemFlags_SelectableDontClosePopup"
defs["enums"]["ImGuiItemFlags_"][7]["value"] = "1 << 5"
defs["enums"]["ImGuiItemFlags_"][8] = {}
defs["enums"]["ImGuiItemFlags_"][8]["calc_value"] = 64
defs["enums"]["ImGuiItemFlags_"][8]["comment"] = " // false    // [BETA] Represent a mixed/indeterminate value, generally multi-selection where values differ. Currently only supported by Checkbox() (later should support all sorts of widgets)"
defs["enums"]["ImGuiItemFlags_"][8]["name"] = "ImGuiItemFlags_MixedValue"
defs["enums"]["ImGuiItemFlags_"][8]["value"] = "1 << 6"
defs["enums"]["ImGuiItemFlags_"][9] = {}
defs["enums"]["ImGuiItemFlags_"][9]["calc_value"] = 128
defs["enums"]["ImGuiItemFlags_"][9]["comment"] = " // false    // [ALPHA] Allow hovering interactions but underlying value is not changed."
defs["enums"]["ImGuiItemFlags_"][9]["name"] = "ImGuiItemFlags_ReadOnly"
defs["enums"]["ImGuiItemFlags_"][9]["value"] = "1 << 7"
defs["enums"]["ImGuiItemFlags_"][10] = {}
defs["enums"]["ImGuiItemFlags_"][10]["calc_value"] = 0
defs["enums"]["ImGuiItemFlags_"][10]["name"] = "ImGuiItemFlags_Default_"
defs["enums"]["ImGuiItemFlags_"][10]["value"] = "0"
defs["enums"]["ImGuiItemStatusFlags_"] = {}
defs["enums"]["ImGuiItemStatusFlags_"][1] = {}
defs["enums"]["ImGuiItemStatusFlags_"][1]["calc_value"] = 0
defs["enums"]["ImGuiItemStatusFlags_"][1]["name"] = "ImGuiItemStatusFlags_None"
defs["enums"]["ImGuiItemStatusFlags_"][1]["value"] = "0"
defs["enums"]["ImGuiItemStatusFlags_"][2] = {}
defs["enums"]["ImGuiItemStatusFlags_"][2]["calc_value"] = 1
defs["enums"]["ImGuiItemStatusFlags_"][2]["name"] = "ImGuiItemStatusFlags_HoveredRect"
defs["enums"]["ImGuiItemStatusFlags_"][2]["value"] = "1 << 0"
defs["enums"]["ImGuiItemStatusFlags_"][3] = {}
defs["enums"]["ImGuiItemStatusFlags_"][3]["calc_value"] = 2
defs["enums"]["ImGuiItemStatusFlags_"][3]["name"] = "ImGuiItemStatusFlags_HasDisplayRect"
defs["enums"]["ImGuiItemStatusFlags_"][3]["value"] = "1 << 1"
defs["enums"]["ImGuiItemStatusFlags_"][4] = {}
defs["enums"]["ImGuiItemStatusFlags_"][4]["calc_value"] = 4
defs["enums"]["ImGuiItemStatusFlags_"][4]["comment"] = " // Value exposed by item was edited in the current frame (should match the bool return value of most widgets)"
defs["enums"]["ImGuiItemStatusFlags_"][4]["name"] = "ImGuiItemStatusFlags_Edited"
defs["enums"]["ImGuiItemStatusFlags_"][4]["value"] = "1 << 2"
defs["enums"]["ImGuiItemStatusFlags_"][5] = {}
defs["enums"]["ImGuiItemStatusFlags_"][5]["calc_value"] = 8
defs["enums"]["ImGuiItemStatusFlags_"][5]["comment"] = " // Set when Selectable(), TreeNode() reports toggling a selection. We can't report \"Selected\" because reporting the change allows us to handle clipping with less issues."
defs["enums"]["ImGuiItemStatusFlags_"][5]["name"] = "ImGuiItemStatusFlags_ToggledSelection"
defs["enums"]["ImGuiItemStatusFlags_"][5]["value"] = "1 << 3"
defs["enums"]["ImGuiItemStatusFlags_"][6] = {}
defs["enums"]["ImGuiItemStatusFlags_"][6]["calc_value"] = 16
defs["enums"]["ImGuiItemStatusFlags_"][6]["comment"] = " // Set when TreeNode() reports toggling their open state."
defs["enums"]["ImGuiItemStatusFlags_"][6]["name"] = "ImGuiItemStatusFlags_ToggledOpen"
defs["enums"]["ImGuiItemStatusFlags_"][6]["value"] = "1 << 4"
defs["enums"]["ImGuiItemStatusFlags_"][7] = {}
defs["enums"]["ImGuiItemStatusFlags_"][7]["calc_value"] = 32
defs["enums"]["ImGuiItemStatusFlags_"][7]["comment"] = " // Set if the widget/group is able to provide data for the ImGuiItemStatusFlags_Deactivated flag."
defs["enums"]["ImGuiItemStatusFlags_"][7]["name"] = "ImGuiItemStatusFlags_HasDeactivated"
defs["enums"]["ImGuiItemStatusFlags_"][7]["value"] = "1 << 5"
defs["enums"]["ImGuiItemStatusFlags_"][8] = {}
defs["enums"]["ImGuiItemStatusFlags_"][8]["calc_value"] = 64
defs["enums"]["ImGuiItemStatusFlags_"][8]["comment"] = " // Only valid if ImGuiItemStatusFlags_HasDeactivated is set."
defs["enums"]["ImGuiItemStatusFlags_"][8]["name"] = "ImGuiItemStatusFlags_Deactivated"
defs["enums"]["ImGuiItemStatusFlags_"][8]["value"] = "1 << 6"
defs["enums"]["ImGuiKeyModFlags_"] = {}
defs["enums"]["ImGuiKeyModFlags_"][1] = {}
defs["enums"]["ImGuiKeyModFlags_"][1]["calc_value"] = 0
defs["enums"]["ImGuiKeyModFlags_"][1]["name"] = "ImGuiKeyModFlags_None"
defs["enums"]["ImGuiKeyModFlags_"][1]["value"] = "0"
defs["enums"]["ImGuiKeyModFlags_"][2] = {}
defs["enums"]["ImGuiKeyModFlags_"][2]["calc_value"] = 1
defs["enums"]["ImGuiKeyModFlags_"][2]["name"] = "ImGuiKeyModFlags_Ctrl"
defs["enums"]["ImGuiKeyModFlags_"][2]["value"] = "1 << 0"
defs["enums"]["ImGuiKeyModFlags_"][3] = {}
defs["enums"]["ImGuiKeyModFlags_"][3]["calc_value"] = 2
defs["enums"]["ImGuiKeyModFlags_"][3]["name"] = "ImGuiKeyModFlags_Shift"
defs["enums"]["ImGuiKeyModFlags_"][3]["value"] = "1 << 1"
defs["enums"]["ImGuiKeyModFlags_"][4] = {}
defs["enums"]["ImGuiKeyModFlags_"][4]["calc_value"] = 4
defs["enums"]["ImGuiKeyModFlags_"][4]["name"] = "ImGuiKeyModFlags_Alt"
defs["enums"]["ImGuiKeyModFlags_"][4]["value"] = "1 << 2"
defs["enums"]["ImGuiKeyModFlags_"][5] = {}
defs["enums"]["ImGuiKeyModFlags_"][5]["calc_value"] = 8
defs["enums"]["ImGuiKeyModFlags_"][5]["name"] = "ImGuiKeyModFlags_Super"
defs["enums"]["ImGuiKeyModFlags_"][5]["value"] = "1 << 3"
defs["enums"]["ImGuiKey_"] = {}
defs["enums"]["ImGuiKey_"][1] = {}
defs["enums"]["ImGuiKey_"][1]["calc_value"] = 0
defs["enums"]["ImGuiKey_"][1]["name"] = "ImGuiKey_Tab"
defs["enums"]["ImGuiKey_"][1]["value"] = 0
defs["enums"]["ImGuiKey_"][2] = {}
defs["enums"]["ImGuiKey_"][2]["calc_value"] = 1
defs["enums"]["ImGuiKey_"][2]["name"] = "ImGuiKey_LeftArrow"
defs["enums"]["ImGuiKey_"][2]["value"] = 1
defs["enums"]["ImGuiKey_"][3] = {}
defs["enums"]["ImGuiKey_"][3]["calc_value"] = 2
defs["enums"]["ImGuiKey_"][3]["name"] = "ImGuiKey_RightArrow"
defs["enums"]["ImGuiKey_"][3]["value"] = 2
defs["enums"]["ImGuiKey_"][4] = {}
defs["enums"]["ImGuiKey_"][4]["calc_value"] = 3
defs["enums"]["ImGuiKey_"][4]["name"] = "ImGuiKey_UpArrow"
defs["enums"]["ImGuiKey_"][4]["value"] = 3
defs["enums"]["ImGuiKey_"][5] = {}
defs["enums"]["ImGuiKey_"][5]["calc_value"] = 4
defs["enums"]["ImGuiKey_"][5]["name"] = "ImGuiKey_DownArrow"
defs["enums"]["ImGuiKey_"][5]["value"] = 4
defs["enums"]["ImGuiKey_"][6] = {}
defs["enums"]["ImGuiKey_"][6]["calc_value"] = 5
defs["enums"]["ImGuiKey_"][6]["name"] = "ImGuiKey_PageUp"
defs["enums"]["ImGuiKey_"][6]["value"] = 5
defs["enums"]["ImGuiKey_"][7] = {}
defs["enums"]["ImGuiKey_"][7]["calc_value"] = 6
defs["enums"]["ImGuiKey_"][7]["name"] = "ImGuiKey_PageDown"
defs["enums"]["ImGuiKey_"][7]["value"] = 6
defs["enums"]["ImGuiKey_"][8] = {}
defs["enums"]["ImGuiKey_"][8]["calc_value"] = 7
defs["enums"]["ImGuiKey_"][8]["name"] = "ImGuiKey_Home"
defs["enums"]["ImGuiKey_"][8]["value"] = 7
defs["enums"]["ImGuiKey_"][9] = {}
defs["enums"]["ImGuiKey_"][9]["calc_value"] = 8
defs["enums"]["ImGuiKey_"][9]["name"] = "ImGuiKey_End"
defs["enums"]["ImGuiKey_"][9]["value"] = 8
defs["enums"]["ImGuiKey_"][10] = {}
defs["enums"]["ImGuiKey_"][10]["calc_value"] = 9
defs["enums"]["ImGuiKey_"][10]["name"] = "ImGuiKey_Insert"
defs["enums"]["ImGuiKey_"][10]["value"] = 9
defs["enums"]["ImGuiKey_"][11] = {}
defs["enums"]["ImGuiKey_"][11]["calc_value"] = 10
defs["enums"]["ImGuiKey_"][11]["name"] = "ImGuiKey_Delete"
defs["enums"]["ImGuiKey_"][11]["value"] = 10
defs["enums"]["ImGuiKey_"][12] = {}
defs["enums"]["ImGuiKey_"][12]["calc_value"] = 11
defs["enums"]["ImGuiKey_"][12]["name"] = "ImGuiKey_Backspace"
defs["enums"]["ImGuiKey_"][12]["value"] = 11
defs["enums"]["ImGuiKey_"][13] = {}
defs["enums"]["ImGuiKey_"][13]["calc_value"] = 12
defs["enums"]["ImGuiKey_"][13]["name"] = "ImGuiKey_Space"
defs["enums"]["ImGuiKey_"][13]["value"] = 12
defs["enums"]["ImGuiKey_"][14] = {}
defs["enums"]["ImGuiKey_"][14]["calc_value"] = 13
defs["enums"]["ImGuiKey_"][14]["name"] = "ImGuiKey_Enter"
defs["enums"]["ImGuiKey_"][14]["value"] = 13
defs["enums"]["ImGuiKey_"][15] = {}
defs["enums"]["ImGuiKey_"][15]["calc_value"] = 14
defs["enums"]["ImGuiKey_"][15]["name"] = "ImGuiKey_Escape"
defs["enums"]["ImGuiKey_"][15]["value"] = 14
defs["enums"]["ImGuiKey_"][16] = {}
defs["enums"]["ImGuiKey_"][16]["calc_value"] = 15
defs["enums"]["ImGuiKey_"][16]["name"] = "ImGuiKey_KeyPadEnter"
defs["enums"]["ImGuiKey_"][16]["value"] = 15
defs["enums"]["ImGuiKey_"][17] = {}
defs["enums"]["ImGuiKey_"][17]["calc_value"] = 16
defs["enums"]["ImGuiKey_"][17]["comment"] = " // for text edit CTRL+A: select all"
defs["enums"]["ImGuiKey_"][17]["name"] = "ImGuiKey_A"
defs["enums"]["ImGuiKey_"][17]["value"] = 16
defs["enums"]["ImGuiKey_"][18] = {}
defs["enums"]["ImGuiKey_"][18]["calc_value"] = 17
defs["enums"]["ImGuiKey_"][18]["comment"] = " // for text edit CTRL+C: copy"
defs["enums"]["ImGuiKey_"][18]["name"] = "ImGuiKey_C"
defs["enums"]["ImGuiKey_"][18]["value"] = 17
defs["enums"]["ImGuiKey_"][19] = {}
defs["enums"]["ImGuiKey_"][19]["calc_value"] = 18
defs["enums"]["ImGuiKey_"][19]["comment"] = " // for text edit CTRL+V: paste"
defs["enums"]["ImGuiKey_"][19]["name"] = "ImGuiKey_V"
defs["enums"]["ImGuiKey_"][19]["value"] = 18
defs["enums"]["ImGuiKey_"][20] = {}
defs["enums"]["ImGuiKey_"][20]["calc_value"] = 19
defs["enums"]["ImGuiKey_"][20]["comment"] = " // for text edit CTRL+X: cut"
defs["enums"]["ImGuiKey_"][20]["name"] = "ImGuiKey_X"
defs["enums"]["ImGuiKey_"][20]["value"] = 19
defs["enums"]["ImGuiKey_"][21] = {}
defs["enums"]["ImGuiKey_"][21]["calc_value"] = 20
defs["enums"]["ImGuiKey_"][21]["comment"] = " // for text edit CTRL+Y: redo"
defs["enums"]["ImGuiKey_"][21]["name"] = "ImGuiKey_Y"
defs["enums"]["ImGuiKey_"][21]["value"] = 20
defs["enums"]["ImGuiKey_"][22] = {}
defs["enums"]["ImGuiKey_"][22]["calc_value"] = 21
defs["enums"]["ImGuiKey_"][22]["comment"] = " // for text edit CTRL+Z: undo"
defs["enums"]["ImGuiKey_"][22]["name"] = "ImGuiKey_Z"
defs["enums"]["ImGuiKey_"][22]["value"] = 21
defs["enums"]["ImGuiKey_"][23] = {}
defs["enums"]["ImGuiKey_"][23]["calc_value"] = 22
defs["enums"]["ImGuiKey_"][23]["name"] = "ImGuiKey_COUNT"
defs["enums"]["ImGuiKey_"][23]["value"] = 22
defs["enums"]["ImGuiLayoutType_"] = {}
defs["enums"]["ImGuiLayoutType_"][1] = {}
defs["enums"]["ImGuiLayoutType_"][1]["calc_value"] = 0
defs["enums"]["ImGuiLayoutType_"][1]["name"] = "ImGuiLayoutType_Horizontal"
defs["enums"]["ImGuiLayoutType_"][1]["value"] = "0"
defs["enums"]["ImGuiLayoutType_"][2] = {}
defs["enums"]["ImGuiLayoutType_"][2]["calc_value"] = 1
defs["enums"]["ImGuiLayoutType_"][2]["name"] = "ImGuiLayoutType_Vertical"
defs["enums"]["ImGuiLayoutType_"][2]["value"] = "1"
defs["enums"]["ImGuiLogType"] = {}
defs["enums"]["ImGuiLogType"][1] = {}
defs["enums"]["ImGuiLogType"][1]["calc_value"] = 0
defs["enums"]["ImGuiLogType"][1]["name"] = "ImGuiLogType_None"
defs["enums"]["ImGuiLogType"][1]["value"] = "0"
defs["enums"]["ImGuiLogType"][2] = {}
defs["enums"]["ImGuiLogType"][2]["calc_value"] = 1
defs["enums"]["ImGuiLogType"][2]["name"] = "ImGuiLogType_TTY"
defs["enums"]["ImGuiLogType"][2]["value"] = 1
defs["enums"]["ImGuiLogType"][3] = {}
defs["enums"]["ImGuiLogType"][3]["calc_value"] = 2
defs["enums"]["ImGuiLogType"][3]["name"] = "ImGuiLogType_File"
defs["enums"]["ImGuiLogType"][3]["value"] = 2
defs["enums"]["ImGuiLogType"][4] = {}
defs["enums"]["ImGuiLogType"][4]["calc_value"] = 3
defs["enums"]["ImGuiLogType"][4]["name"] = "ImGuiLogType_Buffer"
defs["enums"]["ImGuiLogType"][4]["value"] = 3
defs["enums"]["ImGuiLogType"][5] = {}
defs["enums"]["ImGuiLogType"][5]["calc_value"] = 4
defs["enums"]["ImGuiLogType"][5]["name"] = "ImGuiLogType_Clipboard"
defs["enums"]["ImGuiLogType"][5]["value"] = 4
defs["enums"]["ImGuiMouseButton_"] = {}
defs["enums"]["ImGuiMouseButton_"][1] = {}
defs["enums"]["ImGuiMouseButton_"][1]["calc_value"] = 0
defs["enums"]["ImGuiMouseButton_"][1]["name"] = "ImGuiMouseButton_Left"
defs["enums"]["ImGuiMouseButton_"][1]["value"] = "0"
defs["enums"]["ImGuiMouseButton_"][2] = {}
defs["enums"]["ImGuiMouseButton_"][2]["calc_value"] = 1
defs["enums"]["ImGuiMouseButton_"][2]["name"] = "ImGuiMouseButton_Right"
defs["enums"]["ImGuiMouseButton_"][2]["value"] = "1"
defs["enums"]["ImGuiMouseButton_"][3] = {}
defs["enums"]["ImGuiMouseButton_"][3]["calc_value"] = 2
defs["enums"]["ImGuiMouseButton_"][3]["name"] = "ImGuiMouseButton_Middle"
defs["enums"]["ImGuiMouseButton_"][3]["value"] = "2"
defs["enums"]["ImGuiMouseButton_"][4] = {}
defs["enums"]["ImGuiMouseButton_"][4]["calc_value"] = 5
defs["enums"]["ImGuiMouseButton_"][4]["name"] = "ImGuiMouseButton_COUNT"
defs["enums"]["ImGuiMouseButton_"][4]["value"] = "5"
defs["enums"]["ImGuiMouseCursor_"] = {}
defs["enums"]["ImGuiMouseCursor_"][1] = {}
defs["enums"]["ImGuiMouseCursor_"][1]["calc_value"] = -1
defs["enums"]["ImGuiMouseCursor_"][1]["name"] = "ImGuiMouseCursor_None"
defs["enums"]["ImGuiMouseCursor_"][1]["value"] = "-1"
defs["enums"]["ImGuiMouseCursor_"][2] = {}
defs["enums"]["ImGuiMouseCursor_"][2]["calc_value"] = 0
defs["enums"]["ImGuiMouseCursor_"][2]["name"] = "ImGuiMouseCursor_Arrow"
defs["enums"]["ImGuiMouseCursor_"][2]["value"] = "0"
defs["enums"]["ImGuiMouseCursor_"][3] = {}
defs["enums"]["ImGuiMouseCursor_"][3]["calc_value"] = 1
defs["enums"]["ImGuiMouseCursor_"][3]["comment"] = " // When hovering over InputText, etc."
defs["enums"]["ImGuiMouseCursor_"][3]["name"] = "ImGuiMouseCursor_TextInput"
defs["enums"]["ImGuiMouseCursor_"][3]["value"] = 1
defs["enums"]["ImGuiMouseCursor_"][4] = {}
defs["enums"]["ImGuiMouseCursor_"][4]["calc_value"] = 2
defs["enums"]["ImGuiMouseCursor_"][4]["comment"] = " // (Unused by Dear ImGui functions)"
defs["enums"]["ImGuiMouseCursor_"][4]["name"] = "ImGuiMouseCursor_ResizeAll"
defs["enums"]["ImGuiMouseCursor_"][4]["value"] = 2
defs["enums"]["ImGuiMouseCursor_"][5] = {}
defs["enums"]["ImGuiMouseCursor_"][5]["calc_value"] = 3
defs["enums"]["ImGuiMouseCursor_"][5]["comment"] = " // When hovering over an horizontal border"
defs["enums"]["ImGuiMouseCursor_"][5]["name"] = "ImGuiMouseCursor_ResizeNS"
defs["enums"]["ImGuiMouseCursor_"][5]["value"] = 3
defs["enums"]["ImGuiMouseCursor_"][6] = {}
defs["enums"]["ImGuiMouseCursor_"][6]["calc_value"] = 4
defs["enums"]["ImGuiMouseCursor_"][6]["comment"] = " // When hovering over a vertical border or a column"
defs["enums"]["ImGuiMouseCursor_"][6]["name"] = "ImGuiMouseCursor_ResizeEW"
defs["enums"]["ImGuiMouseCursor_"][6]["value"] = 4
defs["enums"]["ImGuiMouseCursor_"][7] = {}
defs["enums"]["ImGuiMouseCursor_"][7]["calc_value"] = 5
defs["enums"]["ImGuiMouseCursor_"][7]["comment"] = " // When hovering over the bottom-left corner of a window"
defs["enums"]["ImGuiMouseCursor_"][7]["name"] = "ImGuiMouseCursor_ResizeNESW"
defs["enums"]["ImGuiMouseCursor_"][7]["value"] = 5
defs["enums"]["ImGuiMouseCursor_"][8] = {}
defs["enums"]["ImGuiMouseCursor_"][8]["calc_value"] = 6
defs["enums"]["ImGuiMouseCursor_"][8]["comment"] = " // When hovering over the bottom-right corner of a window"
defs["enums"]["ImGuiMouseCursor_"][8]["name"] = "ImGuiMouseCursor_ResizeNWSE"
defs["enums"]["ImGuiMouseCursor_"][8]["value"] = 6
defs["enums"]["ImGuiMouseCursor_"][9] = {}
defs["enums"]["ImGuiMouseCursor_"][9]["calc_value"] = 7
defs["enums"]["ImGuiMouseCursor_"][9]["comment"] = " // (Unused by Dear ImGui functions. Use for e.g. hyperlinks)"
defs["enums"]["ImGuiMouseCursor_"][9]["name"] = "ImGuiMouseCursor_Hand"
defs["enums"]["ImGuiMouseCursor_"][9]["value"] = 7
defs["enums"]["ImGuiMouseCursor_"][10] = {}
defs["enums"]["ImGuiMouseCursor_"][10]["calc_value"] = 8
defs["enums"]["ImGuiMouseCursor_"][10]["comment"] = " // When hovering something with disallowed interaction. Usually a crossed circle."
defs["enums"]["ImGuiMouseCursor_"][10]["name"] = "ImGuiMouseCursor_NotAllowed"
defs["enums"]["ImGuiMouseCursor_"][10]["value"] = 8
defs["enums"]["ImGuiMouseCursor_"][11] = {}
defs["enums"]["ImGuiMouseCursor_"][11]["calc_value"] = 9
defs["enums"]["ImGuiMouseCursor_"][11]["name"] = "ImGuiMouseCursor_COUNT"
defs["enums"]["ImGuiMouseCursor_"][11]["value"] = 9
defs["enums"]["ImGuiNavDirSourceFlags_"] = {}
defs["enums"]["ImGuiNavDirSourceFlags_"][1] = {}
defs["enums"]["ImGuiNavDirSourceFlags_"][1]["calc_value"] = 0
defs["enums"]["ImGuiNavDirSourceFlags_"][1]["name"] = "ImGuiNavDirSourceFlags_None"
defs["enums"]["ImGuiNavDirSourceFlags_"][1]["value"] = "0"
defs["enums"]["ImGuiNavDirSourceFlags_"][2] = {}
defs["enums"]["ImGuiNavDirSourceFlags_"][2]["calc_value"] = 1
defs["enums"]["ImGuiNavDirSourceFlags_"][2]["name"] = "ImGuiNavDirSourceFlags_Keyboard"
defs["enums"]["ImGuiNavDirSourceFlags_"][2]["value"] = "1 << 0"
defs["enums"]["ImGuiNavDirSourceFlags_"][3] = {}
defs["enums"]["ImGuiNavDirSourceFlags_"][3]["calc_value"] = 2
defs["enums"]["ImGuiNavDirSourceFlags_"][3]["name"] = "ImGuiNavDirSourceFlags_PadDPad"
defs["enums"]["ImGuiNavDirSourceFlags_"][3]["value"] = "1 << 1"
defs["enums"]["ImGuiNavDirSourceFlags_"][4] = {}
defs["enums"]["ImGuiNavDirSourceFlags_"][4]["calc_value"] = 4
defs["enums"]["ImGuiNavDirSourceFlags_"][4]["name"] = "ImGuiNavDirSourceFlags_PadLStick"
defs["enums"]["ImGuiNavDirSourceFlags_"][4]["value"] = "1 << 2"
defs["enums"]["ImGuiNavForward"] = {}
defs["enums"]["ImGuiNavForward"][1] = {}
defs["enums"]["ImGuiNavForward"][1]["calc_value"] = 0
defs["enums"]["ImGuiNavForward"][1]["name"] = "ImGuiNavForward_None"
defs["enums"]["ImGuiNavForward"][1]["value"] = 0
defs["enums"]["ImGuiNavForward"][2] = {}
defs["enums"]["ImGuiNavForward"][2]["calc_value"] = 1
defs["enums"]["ImGuiNavForward"][2]["name"] = "ImGuiNavForward_ForwardQueued"
defs["enums"]["ImGuiNavForward"][2]["value"] = 1
defs["enums"]["ImGuiNavForward"][3] = {}
defs["enums"]["ImGuiNavForward"][3]["calc_value"] = 2
defs["enums"]["ImGuiNavForward"][3]["name"] = "ImGuiNavForward_ForwardActive"
defs["enums"]["ImGuiNavForward"][3]["value"] = 2
defs["enums"]["ImGuiNavHighlightFlags_"] = {}
defs["enums"]["ImGuiNavHighlightFlags_"][1] = {}
defs["enums"]["ImGuiNavHighlightFlags_"][1]["calc_value"] = 0
defs["enums"]["ImGuiNavHighlightFlags_"][1]["name"] = "ImGuiNavHighlightFlags_None"
defs["enums"]["ImGuiNavHighlightFlags_"][1]["value"] = "0"
defs["enums"]["ImGuiNavHighlightFlags_"][2] = {}
defs["enums"]["ImGuiNavHighlightFlags_"][2]["calc_value"] = 1
defs["enums"]["ImGuiNavHighlightFlags_"][2]["name"] = "ImGuiNavHighlightFlags_TypeDefault"
defs["enums"]["ImGuiNavHighlightFlags_"][2]["value"] = "1 << 0"
defs["enums"]["ImGuiNavHighlightFlags_"][3] = {}
defs["enums"]["ImGuiNavHighlightFlags_"][3]["calc_value"] = 2
defs["enums"]["ImGuiNavHighlightFlags_"][3]["name"] = "ImGuiNavHighlightFlags_TypeThin"
defs["enums"]["ImGuiNavHighlightFlags_"][3]["value"] = "1 << 1"
defs["enums"]["ImGuiNavHighlightFlags_"][4] = {}
defs["enums"]["ImGuiNavHighlightFlags_"][4]["calc_value"] = 4
defs["enums"]["ImGuiNavHighlightFlags_"][4]["comment"] = " // Draw rectangular highlight if (g.NavId == id) _even_ when using the mouse."
defs["enums"]["ImGuiNavHighlightFlags_"][4]["name"] = "ImGuiNavHighlightFlags_AlwaysDraw"
defs["enums"]["ImGuiNavHighlightFlags_"][4]["value"] = "1 << 2"
defs["enums"]["ImGuiNavHighlightFlags_"][5] = {}
defs["enums"]["ImGuiNavHighlightFlags_"][5]["calc_value"] = 8
defs["enums"]["ImGuiNavHighlightFlags_"][5]["name"] = "ImGuiNavHighlightFlags_NoRounding"
defs["enums"]["ImGuiNavHighlightFlags_"][5]["value"] = "1 << 3"
defs["enums"]["ImGuiNavInput_"] = {}
defs["enums"]["ImGuiNavInput_"][1] = {}
defs["enums"]["ImGuiNavInput_"][1]["calc_value"] = 0
defs["enums"]["ImGuiNavInput_"][1]["comment"] = " // activate / open / toggle / tweak value       // e.g. Cross  (PS4), A (Xbox), A (Switch), Space (Keyboard)"
defs["enums"]["ImGuiNavInput_"][1]["name"] = "ImGuiNavInput_Activate"
defs["enums"]["ImGuiNavInput_"][1]["value"] = 0
defs["enums"]["ImGuiNavInput_"][2] = {}
defs["enums"]["ImGuiNavInput_"][2]["calc_value"] = 1
defs["enums"]["ImGuiNavInput_"][2]["comment"] = " // cancel / close / exit                        // e.g. Circle (PS4), B (Xbox), B (Switch), Escape (Keyboard)"
defs["enums"]["ImGuiNavInput_"][2]["name"] = "ImGuiNavInput_Cancel"
defs["enums"]["ImGuiNavInput_"][2]["value"] = 1
defs["enums"]["ImGuiNavInput_"][3] = {}
defs["enums"]["ImGuiNavInput_"][3]["calc_value"] = 2
defs["enums"]["ImGuiNavInput_"][3]["comment"] = " // text input / on-screen keyboard              // e.g. Triang.(PS4), Y (Xbox), X (Switch), Return (Keyboard)"
defs["enums"]["ImGuiNavInput_"][3]["name"] = "ImGuiNavInput_Input"
defs["enums"]["ImGuiNavInput_"][3]["value"] = 2
defs["enums"]["ImGuiNavInput_"][4] = {}
defs["enums"]["ImGuiNavInput_"][4]["calc_value"] = 3
defs["enums"]["ImGuiNavInput_"][4]["comment"] = " // tap: toggle menu / hold: focus, move, resize // e.g. Square (PS4), X (Xbox), Y (Switch), Alt (Keyboard)"
defs["enums"]["ImGuiNavInput_"][4]["name"] = "ImGuiNavInput_Menu"
defs["enums"]["ImGuiNavInput_"][4]["value"] = 3
defs["enums"]["ImGuiNavInput_"][5] = {}
defs["enums"]["ImGuiNavInput_"][5]["calc_value"] = 4
defs["enums"]["ImGuiNavInput_"][5]["comment"] = " // move / tweak / resize window (w/ PadMenu)    // e.g. D-pad Left/Right/Up/Down (Gamepads), Arrow keys (Keyboard)"
defs["enums"]["ImGuiNavInput_"][5]["name"] = "ImGuiNavInput_DpadLeft"
defs["enums"]["ImGuiNavInput_"][5]["value"] = 4
defs["enums"]["ImGuiNavInput_"][6] = {}
defs["enums"]["ImGuiNavInput_"][6]["calc_value"] = 5
defs["enums"]["ImGuiNavInput_"][6]["comment"] = " //"
defs["enums"]["ImGuiNavInput_"][6]["name"] = "ImGuiNavInput_DpadRight"
defs["enums"]["ImGuiNavInput_"][6]["value"] = 5
defs["enums"]["ImGuiNavInput_"][7] = {}
defs["enums"]["ImGuiNavInput_"][7]["calc_value"] = 6
defs["enums"]["ImGuiNavInput_"][7]["comment"] = " //"
defs["enums"]["ImGuiNavInput_"][7]["name"] = "ImGuiNavInput_DpadUp"
defs["enums"]["ImGuiNavInput_"][7]["value"] = 6
defs["enums"]["ImGuiNavInput_"][8] = {}
defs["enums"]["ImGuiNavInput_"][8]["calc_value"] = 7
defs["enums"]["ImGuiNavInput_"][8]["comment"] = " //"
defs["enums"]["ImGuiNavInput_"][8]["name"] = "ImGuiNavInput_DpadDown"
defs["enums"]["ImGuiNavInput_"][8]["value"] = 7
defs["enums"]["ImGuiNavInput_"][9] = {}
defs["enums"]["ImGuiNavInput_"][9]["calc_value"] = 8
defs["enums"]["ImGuiNavInput_"][9]["comment"] = " // scroll / move window (w/ PadMenu)            // e.g. Left Analog Stick Left/Right/Up/Down"
defs["enums"]["ImGuiNavInput_"][9]["name"] = "ImGuiNavInput_LStickLeft"
defs["enums"]["ImGuiNavInput_"][9]["value"] = 8
defs["enums"]["ImGuiNavInput_"][10] = {}
defs["enums"]["ImGuiNavInput_"][10]["calc_value"] = 9
defs["enums"]["ImGuiNavInput_"][10]["comment"] = " //"
defs["enums"]["ImGuiNavInput_"][10]["name"] = "ImGuiNavInput_LStickRight"
defs["enums"]["ImGuiNavInput_"][10]["value"] = 9
defs["enums"]["ImGuiNavInput_"][11] = {}
defs["enums"]["ImGuiNavInput_"][11]["calc_value"] = 10
defs["enums"]["ImGuiNavInput_"][11]["comment"] = " //"
defs["enums"]["ImGuiNavInput_"][11]["name"] = "ImGuiNavInput_LStickUp"
defs["enums"]["ImGuiNavInput_"][11]["value"] = 10
defs["enums"]["ImGuiNavInput_"][12] = {}
defs["enums"]["ImGuiNavInput_"][12]["calc_value"] = 11
defs["enums"]["ImGuiNavInput_"][12]["comment"] = " //"
defs["enums"]["ImGuiNavInput_"][12]["name"] = "ImGuiNavInput_LStickDown"
defs["enums"]["ImGuiNavInput_"][12]["value"] = 11
defs["enums"]["ImGuiNavInput_"][13] = {}
defs["enums"]["ImGuiNavInput_"][13]["calc_value"] = 12
defs["enums"]["ImGuiNavInput_"][13]["comment"] = " // next window (w/ PadMenu)                     // e.g. L1 or L2 (PS4), LB or LT (Xbox), L or ZL (Switch)"
defs["enums"]["ImGuiNavInput_"][13]["name"] = "ImGuiNavInput_FocusPrev"
defs["enums"]["ImGuiNavInput_"][13]["value"] = 12
defs["enums"]["ImGuiNavInput_"][14] = {}
defs["enums"]["ImGuiNavInput_"][14]["calc_value"] = 13
defs["enums"]["ImGuiNavInput_"][14]["comment"] = " // prev window (w/ PadMenu)                     // e.g. R1 or R2 (PS4), RB or RT (Xbox), R or ZL (Switch)"
defs["enums"]["ImGuiNavInput_"][14]["name"] = "ImGuiNavInput_FocusNext"
defs["enums"]["ImGuiNavInput_"][14]["value"] = 13
defs["enums"]["ImGuiNavInput_"][15] = {}
defs["enums"]["ImGuiNavInput_"][15]["calc_value"] = 14
defs["enums"]["ImGuiNavInput_"][15]["comment"] = " // slower tweaks                                // e.g. L1 or L2 (PS4), LB or LT (Xbox), L or ZL (Switch)"
defs["enums"]["ImGuiNavInput_"][15]["name"] = "ImGuiNavInput_TweakSlow"
defs["enums"]["ImGuiNavInput_"][15]["value"] = 14
defs["enums"]["ImGuiNavInput_"][16] = {}
defs["enums"]["ImGuiNavInput_"][16]["calc_value"] = 15
defs["enums"]["ImGuiNavInput_"][16]["comment"] = " // faster tweaks                                // e.g. R1 or R2 (PS4), RB or RT (Xbox), R or ZL (Switch)"
defs["enums"]["ImGuiNavInput_"][16]["name"] = "ImGuiNavInput_TweakFast"
defs["enums"]["ImGuiNavInput_"][16]["value"] = 15
defs["enums"]["ImGuiNavInput_"][17] = {}
defs["enums"]["ImGuiNavInput_"][17]["calc_value"] = 16
defs["enums"]["ImGuiNavInput_"][17]["comment"] = " // toggle menu                                  // = io.KeyAlt"
defs["enums"]["ImGuiNavInput_"][17]["name"] = "ImGuiNavInput_KeyMenu_"
defs["enums"]["ImGuiNavInput_"][17]["value"] = 16
defs["enums"]["ImGuiNavInput_"][18] = {}
defs["enums"]["ImGuiNavInput_"][18]["calc_value"] = 17
defs["enums"]["ImGuiNavInput_"][18]["comment"] = " // move left                                    // = Arrow keys"
defs["enums"]["ImGuiNavInput_"][18]["name"] = "ImGuiNavInput_KeyLeft_"
defs["enums"]["ImGuiNavInput_"][18]["value"] = 17
defs["enums"]["ImGuiNavInput_"][19] = {}
defs["enums"]["ImGuiNavInput_"][19]["calc_value"] = 18
defs["enums"]["ImGuiNavInput_"][19]["comment"] = " // move right"
defs["enums"]["ImGuiNavInput_"][19]["name"] = "ImGuiNavInput_KeyRight_"
defs["enums"]["ImGuiNavInput_"][19]["value"] = 18
defs["enums"]["ImGuiNavInput_"][20] = {}
defs["enums"]["ImGuiNavInput_"][20]["calc_value"] = 19
defs["enums"]["ImGuiNavInput_"][20]["comment"] = " // move up"
defs["enums"]["ImGuiNavInput_"][20]["name"] = "ImGuiNavInput_KeyUp_"
defs["enums"]["ImGuiNavInput_"][20]["value"] = 19
defs["enums"]["ImGuiNavInput_"][21] = {}
defs["enums"]["ImGuiNavInput_"][21]["calc_value"] = 20
defs["enums"]["ImGuiNavInput_"][21]["comment"] = " // move down"
defs["enums"]["ImGuiNavInput_"][21]["name"] = "ImGuiNavInput_KeyDown_"
defs["enums"]["ImGuiNavInput_"][21]["value"] = 20
defs["enums"]["ImGuiNavInput_"][22] = {}
defs["enums"]["ImGuiNavInput_"][22]["calc_value"] = 21
defs["enums"]["ImGuiNavInput_"][22]["name"] = "ImGuiNavInput_COUNT"
defs["enums"]["ImGuiNavInput_"][22]["value"] = 21
defs["enums"]["ImGuiNavInput_"][23] = {}
defs["enums"]["ImGuiNavInput_"][23]["calc_value"] = 16
defs["enums"]["ImGuiNavInput_"][23]["name"] = "ImGuiNavInput_InternalStart_"
defs["enums"]["ImGuiNavInput_"][23]["value"] = "ImGuiNavInput_KeyMenu_"
defs["enums"]["ImGuiNavLayer"] = {}
defs["enums"]["ImGuiNavLayer"][1] = {}
defs["enums"]["ImGuiNavLayer"][1]["calc_value"] = 0
defs["enums"]["ImGuiNavLayer"][1]["comment"] = " // Main scrolling layer"
defs["enums"]["ImGuiNavLayer"][1]["name"] = "ImGuiNavLayer_Main"
defs["enums"]["ImGuiNavLayer"][1]["value"] = "0"
defs["enums"]["ImGuiNavLayer"][2] = {}
defs["enums"]["ImGuiNavLayer"][2]["calc_value"] = 1
defs["enums"]["ImGuiNavLayer"][2]["comment"] = " // Menu layer (access with Alt/ImGuiNavInput_Menu)"
defs["enums"]["ImGuiNavLayer"][2]["name"] = "ImGuiNavLayer_Menu"
defs["enums"]["ImGuiNavLayer"][2]["value"] = "1"
defs["enums"]["ImGuiNavLayer"][3] = {}
defs["enums"]["ImGuiNavLayer"][3]["calc_value"] = 2
defs["enums"]["ImGuiNavLayer"][3]["name"] = "ImGuiNavLayer_COUNT"
defs["enums"]["ImGuiNavLayer"][3]["value"] = 2
defs["enums"]["ImGuiNavMoveFlags_"] = {}
defs["enums"]["ImGuiNavMoveFlags_"][1] = {}
defs["enums"]["ImGuiNavMoveFlags_"][1]["calc_value"] = 0
defs["enums"]["ImGuiNavMoveFlags_"][1]["name"] = "ImGuiNavMoveFlags_None"
defs["enums"]["ImGuiNavMoveFlags_"][1]["value"] = "0"
defs["enums"]["ImGuiNavMoveFlags_"][2] = {}
defs["enums"]["ImGuiNavMoveFlags_"][2]["calc_value"] = 1
defs["enums"]["ImGuiNavMoveFlags_"][2]["comment"] = " // On failed request, restart from opposite side"
defs["enums"]["ImGuiNavMoveFlags_"][2]["name"] = "ImGuiNavMoveFlags_LoopX"
defs["enums"]["ImGuiNavMoveFlags_"][2]["value"] = "1 << 0"
defs["enums"]["ImGuiNavMoveFlags_"][3] = {}
defs["enums"]["ImGuiNavMoveFlags_"][3]["calc_value"] = 2
defs["enums"]["ImGuiNavMoveFlags_"][3]["name"] = "ImGuiNavMoveFlags_LoopY"
defs["enums"]["ImGuiNavMoveFlags_"][3]["value"] = "1 << 1"
defs["enums"]["ImGuiNavMoveFlags_"][4] = {}
defs["enums"]["ImGuiNavMoveFlags_"][4]["calc_value"] = 4
defs["enums"]["ImGuiNavMoveFlags_"][4]["comment"] = " // On failed request, request from opposite side one line down (when NavDir==right) or one line up (when NavDir==left)"
defs["enums"]["ImGuiNavMoveFlags_"][4]["name"] = "ImGuiNavMoveFlags_WrapX"
defs["enums"]["ImGuiNavMoveFlags_"][4]["value"] = "1 << 2"
defs["enums"]["ImGuiNavMoveFlags_"][5] = {}
defs["enums"]["ImGuiNavMoveFlags_"][5]["calc_value"] = 8
defs["enums"]["ImGuiNavMoveFlags_"][5]["comment"] = " // This is not super useful for provided for completeness"
defs["enums"]["ImGuiNavMoveFlags_"][5]["name"] = "ImGuiNavMoveFlags_WrapY"
defs["enums"]["ImGuiNavMoveFlags_"][5]["value"] = "1 << 3"
defs["enums"]["ImGuiNavMoveFlags_"][6] = {}
defs["enums"]["ImGuiNavMoveFlags_"][6]["calc_value"] = 16
defs["enums"]["ImGuiNavMoveFlags_"][6]["comment"] = " // Allow scoring and considering the current NavId as a move target candidate. This is used when the move source is offset (e.g. pressing PageDown actually needs to send a Up move request, if we are pressing PageDown from the bottom-most item we need to stay in place)"
defs["enums"]["ImGuiNavMoveFlags_"][6]["name"] = "ImGuiNavMoveFlags_AllowCurrentNavId"
defs["enums"]["ImGuiNavMoveFlags_"][6]["value"] = "1 << 4"
defs["enums"]["ImGuiNavMoveFlags_"][7] = {}
defs["enums"]["ImGuiNavMoveFlags_"][7]["calc_value"] = 32
defs["enums"]["ImGuiNavMoveFlags_"][7]["comment"] = " // Store alternate result in NavMoveResultLocalVisibleSet that only comprise elements that are already fully visible."
defs["enums"]["ImGuiNavMoveFlags_"][7]["name"] = "ImGuiNavMoveFlags_AlsoScoreVisibleSet"
defs["enums"]["ImGuiNavMoveFlags_"][7]["value"] = "1 << 5"
defs["enums"]["ImGuiNavMoveFlags_"][8] = {}
defs["enums"]["ImGuiNavMoveFlags_"][8]["calc_value"] = 64
defs["enums"]["ImGuiNavMoveFlags_"][8]["name"] = "ImGuiNavMoveFlags_ScrollToEdge"
defs["enums"]["ImGuiNavMoveFlags_"][8]["value"] = "1 << 6"
defs["enums"]["ImGuiNextItemDataFlags_"] = {}
defs["enums"]["ImGuiNextItemDataFlags_"][1] = {}
defs["enums"]["ImGuiNextItemDataFlags_"][1]["calc_value"] = 0
defs["enums"]["ImGuiNextItemDataFlags_"][1]["name"] = "ImGuiNextItemDataFlags_None"
defs["enums"]["ImGuiNextItemDataFlags_"][1]["value"] = "0"
defs["enums"]["ImGuiNextItemDataFlags_"][2] = {}
defs["enums"]["ImGuiNextItemDataFlags_"][2]["calc_value"] = 1
defs["enums"]["ImGuiNextItemDataFlags_"][2]["name"] = "ImGuiNextItemDataFlags_HasWidth"
defs["enums"]["ImGuiNextItemDataFlags_"][2]["value"] = "1 << 0"
defs["enums"]["ImGuiNextItemDataFlags_"][3] = {}
defs["enums"]["ImGuiNextItemDataFlags_"][3]["calc_value"] = 2
defs["enums"]["ImGuiNextItemDataFlags_"][3]["name"] = "ImGuiNextItemDataFlags_HasOpen"
defs["enums"]["ImGuiNextItemDataFlags_"][3]["value"] = "1 << 1"
defs["enums"]["ImGuiNextWindowDataFlags_"] = {}
defs["enums"]["ImGuiNextWindowDataFlags_"][1] = {}
defs["enums"]["ImGuiNextWindowDataFlags_"][1]["calc_value"] = 0
defs["enums"]["ImGuiNextWindowDataFlags_"][1]["name"] = "ImGuiNextWindowDataFlags_None"
defs["enums"]["ImGuiNextWindowDataFlags_"][1]["value"] = "0"
defs["enums"]["ImGuiNextWindowDataFlags_"][2] = {}
defs["enums"]["ImGuiNextWindowDataFlags_"][2]["calc_value"] = 1
defs["enums"]["ImGuiNextWindowDataFlags_"][2]["name"] = "ImGuiNextWindowDataFlags_HasPos"
defs["enums"]["ImGuiNextWindowDataFlags_"][2]["value"] = "1 << 0"
defs["enums"]["ImGuiNextWindowDataFlags_"][3] = {}
defs["enums"]["ImGuiNextWindowDataFlags_"][3]["calc_value"] = 2
defs["enums"]["ImGuiNextWindowDataFlags_"][3]["name"] = "ImGuiNextWindowDataFlags_HasSize"
defs["enums"]["ImGuiNextWindowDataFlags_"][3]["value"] = "1 << 1"
defs["enums"]["ImGuiNextWindowDataFlags_"][4] = {}
defs["enums"]["ImGuiNextWindowDataFlags_"][4]["calc_value"] = 4
defs["enums"]["ImGuiNextWindowDataFlags_"][4]["name"] = "ImGuiNextWindowDataFlags_HasContentSize"
defs["enums"]["ImGuiNextWindowDataFlags_"][4]["value"] = "1 << 2"
defs["enums"]["ImGuiNextWindowDataFlags_"][5] = {}
defs["enums"]["ImGuiNextWindowDataFlags_"][5]["calc_value"] = 8
defs["enums"]["ImGuiNextWindowDataFlags_"][5]["name"] = "ImGuiNextWindowDataFlags_HasCollapsed"
defs["enums"]["ImGuiNextWindowDataFlags_"][5]["value"] = "1 << 3"
defs["enums"]["ImGuiNextWindowDataFlags_"][6] = {}
defs["enums"]["ImGuiNextWindowDataFlags_"][6]["calc_value"] = 16
defs["enums"]["ImGuiNextWindowDataFlags_"][6]["name"] = "ImGuiNextWindowDataFlags_HasSizeConstraint"
defs["enums"]["ImGuiNextWindowDataFlags_"][6]["value"] = "1 << 4"
defs["enums"]["ImGuiNextWindowDataFlags_"][7] = {}
defs["enums"]["ImGuiNextWindowDataFlags_"][7]["calc_value"] = 32
defs["enums"]["ImGuiNextWindowDataFlags_"][7]["name"] = "ImGuiNextWindowDataFlags_HasFocus"
defs["enums"]["ImGuiNextWindowDataFlags_"][7]["value"] = "1 << 5"
defs["enums"]["ImGuiNextWindowDataFlags_"][8] = {}
defs["enums"]["ImGuiNextWindowDataFlags_"][8]["calc_value"] = 64
defs["enums"]["ImGuiNextWindowDataFlags_"][8]["name"] = "ImGuiNextWindowDataFlags_HasBgAlpha"
defs["enums"]["ImGuiNextWindowDataFlags_"][8]["value"] = "1 << 6"
defs["enums"]["ImGuiNextWindowDataFlags_"][9] = {}
defs["enums"]["ImGuiNextWindowDataFlags_"][9]["calc_value"] = 128
defs["enums"]["ImGuiNextWindowDataFlags_"][9]["name"] = "ImGuiNextWindowDataFlags_HasScroll"
defs["enums"]["ImGuiNextWindowDataFlags_"][9]["value"] = "1 << 7"
defs["enums"]["ImGuiNextWindowDataFlags_"][10] = {}
defs["enums"]["ImGuiNextWindowDataFlags_"][10]["calc_value"] = 256
defs["enums"]["ImGuiNextWindowDataFlags_"][10]["name"] = "ImGuiNextWindowDataFlags_HasViewport"
defs["enums"]["ImGuiNextWindowDataFlags_"][10]["value"] = "1 << 8"
defs["enums"]["ImGuiNextWindowDataFlags_"][11] = {}
defs["enums"]["ImGuiNextWindowDataFlags_"][11]["calc_value"] = 512
defs["enums"]["ImGuiNextWindowDataFlags_"][11]["name"] = "ImGuiNextWindowDataFlags_HasDock"
defs["enums"]["ImGuiNextWindowDataFlags_"][11]["value"] = "1 << 9"
defs["enums"]["ImGuiNextWindowDataFlags_"][12] = {}
defs["enums"]["ImGuiNextWindowDataFlags_"][12]["calc_value"] = 1024
defs["enums"]["ImGuiNextWindowDataFlags_"][12]["name"] = "ImGuiNextWindowDataFlags_HasWindowClass"
defs["enums"]["ImGuiNextWindowDataFlags_"][12]["value"] = "1 << 10"
defs["enums"]["ImGuiPlotType"] = {}
defs["enums"]["ImGuiPlotType"][1] = {}
defs["enums"]["ImGuiPlotType"][1]["calc_value"] = 0
defs["enums"]["ImGuiPlotType"][1]["name"] = "ImGuiPlotType_Lines"
defs["enums"]["ImGuiPlotType"][1]["value"] = 0
defs["enums"]["ImGuiPlotType"][2] = {}
defs["enums"]["ImGuiPlotType"][2]["calc_value"] = 1
defs["enums"]["ImGuiPlotType"][2]["name"] = "ImGuiPlotType_Histogram"
defs["enums"]["ImGuiPlotType"][2]["value"] = 1
defs["enums"]["ImGuiPopupFlags_"] = {}
defs["enums"]["ImGuiPopupFlags_"][1] = {}
defs["enums"]["ImGuiPopupFlags_"][1]["calc_value"] = 0
defs["enums"]["ImGuiPopupFlags_"][1]["name"] = "ImGuiPopupFlags_None"
defs["enums"]["ImGuiPopupFlags_"][1]["value"] = "0"
defs["enums"]["ImGuiPopupFlags_"][2] = {}
defs["enums"]["ImGuiPopupFlags_"][2]["calc_value"] = 0
defs["enums"]["ImGuiPopupFlags_"][2]["comment"] = " // For BeginPopupContext*(): open on Left Mouse release. Guaranted to always be == 0 (same as ImGuiMouseButton_Left)"
defs["enums"]["ImGuiPopupFlags_"][2]["name"] = "ImGuiPopupFlags_MouseButtonLeft"
defs["enums"]["ImGuiPopupFlags_"][2]["value"] = "0"
defs["enums"]["ImGuiPopupFlags_"][3] = {}
defs["enums"]["ImGuiPopupFlags_"][3]["calc_value"] = 1
defs["enums"]["ImGuiPopupFlags_"][3]["comment"] = " // For BeginPopupContext*(): open on Right Mouse release. Guaranted to always be == 1 (same as ImGuiMouseButton_Right)"
defs["enums"]["ImGuiPopupFlags_"][3]["name"] = "ImGuiPopupFlags_MouseButtonRight"
defs["enums"]["ImGuiPopupFlags_"][3]["value"] = "1"
defs["enums"]["ImGuiPopupFlags_"][4] = {}
defs["enums"]["ImGuiPopupFlags_"][4]["calc_value"] = 2
defs["enums"]["ImGuiPopupFlags_"][4]["comment"] = " // For BeginPopupContext*(): open on Middle Mouse release. Guaranted to always be == 2 (same as ImGuiMouseButton_Middle)"
defs["enums"]["ImGuiPopupFlags_"][4]["name"] = "ImGuiPopupFlags_MouseButtonMiddle"
defs["enums"]["ImGuiPopupFlags_"][4]["value"] = "2"
defs["enums"]["ImGuiPopupFlags_"][5] = {}
defs["enums"]["ImGuiPopupFlags_"][5]["calc_value"] = 31
defs["enums"]["ImGuiPopupFlags_"][5]["name"] = "ImGuiPopupFlags_MouseButtonMask_"
defs["enums"]["ImGuiPopupFlags_"][5]["value"] = "0x1F"
defs["enums"]["ImGuiPopupFlags_"][6] = {}
defs["enums"]["ImGuiPopupFlags_"][6]["calc_value"] = 1
defs["enums"]["ImGuiPopupFlags_"][6]["name"] = "ImGuiPopupFlags_MouseButtonDefault_"
defs["enums"]["ImGuiPopupFlags_"][6]["value"] = "1"
defs["enums"]["ImGuiPopupFlags_"][7] = {}
defs["enums"]["ImGuiPopupFlags_"][7]["calc_value"] = 32
defs["enums"]["ImGuiPopupFlags_"][7]["comment"] = " // For OpenPopup*(), BeginPopupContext*(): don't open if there's already a popup at the same level of the popup stack"
defs["enums"]["ImGuiPopupFlags_"][7]["name"] = "ImGuiPopupFlags_NoOpenOverExistingPopup"
defs["enums"]["ImGuiPopupFlags_"][7]["value"] = "1 << 5"
defs["enums"]["ImGuiPopupFlags_"][8] = {}
defs["enums"]["ImGuiPopupFlags_"][8]["calc_value"] = 64
defs["enums"]["ImGuiPopupFlags_"][8]["comment"] = " // For BeginPopupContextWindow(): don't return true when hovering items, only when hovering empty space"
defs["enums"]["ImGuiPopupFlags_"][8]["name"] = "ImGuiPopupFlags_NoOpenOverItems"
defs["enums"]["ImGuiPopupFlags_"][8]["value"] = "1 << 6"
defs["enums"]["ImGuiPopupFlags_"][9] = {}
defs["enums"]["ImGuiPopupFlags_"][9]["calc_value"] = 128
defs["enums"]["ImGuiPopupFlags_"][9]["comment"] = " // For IsPopupOpen(): ignore the ImGuiID parameter and test for any popup."
defs["enums"]["ImGuiPopupFlags_"][9]["name"] = "ImGuiPopupFlags_AnyPopupId"
defs["enums"]["ImGuiPopupFlags_"][9]["value"] = "1 << 7"
defs["enums"]["ImGuiPopupFlags_"][10] = {}
defs["enums"]["ImGuiPopupFlags_"][10]["calc_value"] = 256
defs["enums"]["ImGuiPopupFlags_"][10]["comment"] = " // For IsPopupOpen(): search/test at any level of the popup stack (default test in the current level)"
defs["enums"]["ImGuiPopupFlags_"][10]["name"] = "ImGuiPopupFlags_AnyPopupLevel"
defs["enums"]["ImGuiPopupFlags_"][10]["value"] = "1 << 8"
defs["enums"]["ImGuiPopupFlags_"][11] = {}
defs["enums"]["ImGuiPopupFlags_"][11]["calc_value"] = 384
defs["enums"]["ImGuiPopupFlags_"][11]["name"] = "ImGuiPopupFlags_AnyPopup"
defs["enums"]["ImGuiPopupFlags_"][11]["value"] = "ImGuiPopupFlags_AnyPopupId | ImGuiPopupFlags_AnyPopupLevel"
defs["enums"]["ImGuiPopupPositionPolicy"] = {}
defs["enums"]["ImGuiPopupPositionPolicy"][1] = {}
defs["enums"]["ImGuiPopupPositionPolicy"][1]["calc_value"] = 0
defs["enums"]["ImGuiPopupPositionPolicy"][1]["name"] = "ImGuiPopupPositionPolicy_Default"
defs["enums"]["ImGuiPopupPositionPolicy"][1]["value"] = 0
defs["enums"]["ImGuiPopupPositionPolicy"][2] = {}
defs["enums"]["ImGuiPopupPositionPolicy"][2]["calc_value"] = 1
defs["enums"]["ImGuiPopupPositionPolicy"][2]["name"] = "ImGuiPopupPositionPolicy_ComboBox"
defs["enums"]["ImGuiPopupPositionPolicy"][2]["value"] = 1
defs["enums"]["ImGuiSelectableFlagsPrivate_"] = {}
defs["enums"]["ImGuiSelectableFlagsPrivate_"][1] = {}
defs["enums"]["ImGuiSelectableFlagsPrivate_"][1]["calc_value"] = 1048576
defs["enums"]["ImGuiSelectableFlagsPrivate_"][1]["name"] = "ImGuiSelectableFlags_NoHoldingActiveID"
defs["enums"]["ImGuiSelectableFlagsPrivate_"][1]["value"] = "1 << 20"
defs["enums"]["ImGuiSelectableFlagsPrivate_"][2] = {}
defs["enums"]["ImGuiSelectableFlagsPrivate_"][2]["calc_value"] = 2097152
defs["enums"]["ImGuiSelectableFlagsPrivate_"][2]["comment"] = " // Override button behavior to react on Click (default is Click+Release)"
defs["enums"]["ImGuiSelectableFlagsPrivate_"][2]["name"] = "ImGuiSelectableFlags_SelectOnClick"
defs["enums"]["ImGuiSelectableFlagsPrivate_"][2]["value"] = "1 << 21"
defs["enums"]["ImGuiSelectableFlagsPrivate_"][3] = {}
defs["enums"]["ImGuiSelectableFlagsPrivate_"][3]["calc_value"] = 4194304
defs["enums"]["ImGuiSelectableFlagsPrivate_"][3]["comment"] = " // Override button behavior to react on Release (default is Click+Release)"
defs["enums"]["ImGuiSelectableFlagsPrivate_"][3]["name"] = "ImGuiSelectableFlags_SelectOnRelease"
defs["enums"]["ImGuiSelectableFlagsPrivate_"][3]["value"] = "1 << 22"
defs["enums"]["ImGuiSelectableFlagsPrivate_"][4] = {}
defs["enums"]["ImGuiSelectableFlagsPrivate_"][4]["calc_value"] = 8388608
defs["enums"]["ImGuiSelectableFlagsPrivate_"][4]["comment"] = " // Span all avail width even if we declared less for layout purpose. FIXME: We may be able to remove this (added in 6251d379, 2bcafc86 for menus)"
defs["enums"]["ImGuiSelectableFlagsPrivate_"][4]["name"] = "ImGuiSelectableFlags_SpanAvailWidth"
defs["enums"]["ImGuiSelectableFlagsPrivate_"][4]["value"] = "1 << 23"
defs["enums"]["ImGuiSelectableFlagsPrivate_"][5] = {}
defs["enums"]["ImGuiSelectableFlagsPrivate_"][5]["calc_value"] = 16777216
defs["enums"]["ImGuiSelectableFlagsPrivate_"][5]["comment"] = " // Always show active when held, even is not hovered. This concept could probably be renamed/formalized somehow."
defs["enums"]["ImGuiSelectableFlagsPrivate_"][5]["name"] = "ImGuiSelectableFlags_DrawHoveredWhenHeld"
defs["enums"]["ImGuiSelectableFlagsPrivate_"][5]["value"] = "1 << 24"
defs["enums"]["ImGuiSelectableFlagsPrivate_"][6] = {}
defs["enums"]["ImGuiSelectableFlagsPrivate_"][6]["calc_value"] = 33554432
defs["enums"]["ImGuiSelectableFlagsPrivate_"][6]["name"] = "ImGuiSelectableFlags_SetNavIdOnHover"
defs["enums"]["ImGuiSelectableFlagsPrivate_"][6]["value"] = "1 << 25"
defs["enums"]["ImGuiSelectableFlags_"] = {}
defs["enums"]["ImGuiSelectableFlags_"][1] = {}
defs["enums"]["ImGuiSelectableFlags_"][1]["calc_value"] = 0
defs["enums"]["ImGuiSelectableFlags_"][1]["name"] = "ImGuiSelectableFlags_None"
defs["enums"]["ImGuiSelectableFlags_"][1]["value"] = "0"
defs["enums"]["ImGuiSelectableFlags_"][2] = {}
defs["enums"]["ImGuiSelectableFlags_"][2]["calc_value"] = 1
defs["enums"]["ImGuiSelectableFlags_"][2]["comment"] = " // Clicking this don't close parent popup window"
defs["enums"]["ImGuiSelectableFlags_"][2]["name"] = "ImGuiSelectableFlags_DontClosePopups"
defs["enums"]["ImGuiSelectableFlags_"][2]["value"] = "1 << 0"
defs["enums"]["ImGuiSelectableFlags_"][3] = {}
defs["enums"]["ImGuiSelectableFlags_"][3]["calc_value"] = 2
defs["enums"]["ImGuiSelectableFlags_"][3]["comment"] = " // Selectable frame can span all columns (text will still fit in current column)"
defs["enums"]["ImGuiSelectableFlags_"][3]["name"] = "ImGuiSelectableFlags_SpanAllColumns"
defs["enums"]["ImGuiSelectableFlags_"][3]["value"] = "1 << 1"
defs["enums"]["ImGuiSelectableFlags_"][4] = {}
defs["enums"]["ImGuiSelectableFlags_"][4]["calc_value"] = 4
defs["enums"]["ImGuiSelectableFlags_"][4]["comment"] = " // Generate press events on double clicks too"
defs["enums"]["ImGuiSelectableFlags_"][4]["name"] = "ImGuiSelectableFlags_AllowDoubleClick"
defs["enums"]["ImGuiSelectableFlags_"][4]["value"] = "1 << 2"
defs["enums"]["ImGuiSelectableFlags_"][5] = {}
defs["enums"]["ImGuiSelectableFlags_"][5]["calc_value"] = 8
defs["enums"]["ImGuiSelectableFlags_"][5]["comment"] = " // Cannot be selected, display grayed out text"
defs["enums"]["ImGuiSelectableFlags_"][5]["name"] = "ImGuiSelectableFlags_Disabled"
defs["enums"]["ImGuiSelectableFlags_"][5]["value"] = "1 << 3"
defs["enums"]["ImGuiSelectableFlags_"][6] = {}
defs["enums"]["ImGuiSelectableFlags_"][6]["calc_value"] = 16
defs["enums"]["ImGuiSelectableFlags_"][6]["comment"] = " // (WIP) Hit testing to allow subsequent widgets to overlap this one"
defs["enums"]["ImGuiSelectableFlags_"][6]["name"] = "ImGuiSelectableFlags_AllowItemOverlap"
defs["enums"]["ImGuiSelectableFlags_"][6]["value"] = "1 << 4"
defs["enums"]["ImGuiSeparatorFlags_"] = {}
defs["enums"]["ImGuiSeparatorFlags_"][1] = {}
defs["enums"]["ImGuiSeparatorFlags_"][1]["calc_value"] = 0
defs["enums"]["ImGuiSeparatorFlags_"][1]["name"] = "ImGuiSeparatorFlags_None"
defs["enums"]["ImGuiSeparatorFlags_"][1]["value"] = "0"
defs["enums"]["ImGuiSeparatorFlags_"][2] = {}
defs["enums"]["ImGuiSeparatorFlags_"][2]["calc_value"] = 1
defs["enums"]["ImGuiSeparatorFlags_"][2]["comment"] = " // Axis default to current layout type, so generally Horizontal unless e.g. in a menu bar"
defs["enums"]["ImGuiSeparatorFlags_"][2]["name"] = "ImGuiSeparatorFlags_Horizontal"
defs["enums"]["ImGuiSeparatorFlags_"][2]["value"] = "1 << 0"
defs["enums"]["ImGuiSeparatorFlags_"][3] = {}
defs["enums"]["ImGuiSeparatorFlags_"][3]["calc_value"] = 2
defs["enums"]["ImGuiSeparatorFlags_"][3]["name"] = "ImGuiSeparatorFlags_Vertical"
defs["enums"]["ImGuiSeparatorFlags_"][3]["value"] = "1 << 1"
defs["enums"]["ImGuiSeparatorFlags_"][4] = {}
defs["enums"]["ImGuiSeparatorFlags_"][4]["calc_value"] = 4
defs["enums"]["ImGuiSeparatorFlags_"][4]["name"] = "ImGuiSeparatorFlags_SpanAllColumns"
defs["enums"]["ImGuiSeparatorFlags_"][4]["value"] = "1 << 2"
defs["enums"]["ImGuiSliderFlagsPrivate_"] = {}
defs["enums"]["ImGuiSliderFlagsPrivate_"][1] = {}
defs["enums"]["ImGuiSliderFlagsPrivate_"][1]["calc_value"] = 1048576
defs["enums"]["ImGuiSliderFlagsPrivate_"][1]["comment"] = " // Should this slider be orientated vertically?"
defs["enums"]["ImGuiSliderFlagsPrivate_"][1]["name"] = "ImGuiSliderFlags_Vertical"
defs["enums"]["ImGuiSliderFlagsPrivate_"][1]["value"] = "1 << 20"
defs["enums"]["ImGuiSliderFlagsPrivate_"][2] = {}
defs["enums"]["ImGuiSliderFlagsPrivate_"][2]["calc_value"] = 2097152
defs["enums"]["ImGuiSliderFlagsPrivate_"][2]["name"] = "ImGuiSliderFlags_ReadOnly"
defs["enums"]["ImGuiSliderFlagsPrivate_"][2]["value"] = "1 << 21"
defs["enums"]["ImGuiSliderFlags_"] = {}
defs["enums"]["ImGuiSliderFlags_"][1] = {}
defs["enums"]["ImGuiSliderFlags_"][1]["calc_value"] = 0
defs["enums"]["ImGuiSliderFlags_"][1]["name"] = "ImGuiSliderFlags_None"
defs["enums"]["ImGuiSliderFlags_"][1]["value"] = "0"
defs["enums"]["ImGuiSliderFlags_"][2] = {}
defs["enums"]["ImGuiSliderFlags_"][2]["calc_value"] = 16
defs["enums"]["ImGuiSliderFlags_"][2]["comment"] = " // Clamp value to min/max bounds when input manually with CTRL+Click. By default CTRL+Click allows going out of bounds."
defs["enums"]["ImGuiSliderFlags_"][2]["name"] = "ImGuiSliderFlags_ClampOnInput"
defs["enums"]["ImGuiSliderFlags_"][2]["value"] = "1 << 4"
defs["enums"]["ImGuiSliderFlags_"][3] = {}
defs["enums"]["ImGuiSliderFlags_"][3]["calc_value"] = 32
defs["enums"]["ImGuiSliderFlags_"][3]["comment"] = " // Make the widget logarithmic (linear otherwise). Consider using ImGuiSliderFlags_NoRoundToFormat with this if using a format-string with small amount of digits."
defs["enums"]["ImGuiSliderFlags_"][3]["name"] = "ImGuiSliderFlags_Logarithmic"
defs["enums"]["ImGuiSliderFlags_"][3]["value"] = "1 << 5"
defs["enums"]["ImGuiSliderFlags_"][4] = {}
defs["enums"]["ImGuiSliderFlags_"][4]["calc_value"] = 64
defs["enums"]["ImGuiSliderFlags_"][4]["comment"] = " // Disable rounding underlying value to match precision of the display format string (e.g. %.3f values are rounded to those 3 digits)"
defs["enums"]["ImGuiSliderFlags_"][4]["name"] = "ImGuiSliderFlags_NoRoundToFormat"
defs["enums"]["ImGuiSliderFlags_"][4]["value"] = "1 << 6"
defs["enums"]["ImGuiSliderFlags_"][5] = {}
defs["enums"]["ImGuiSliderFlags_"][5]["calc_value"] = 128
defs["enums"]["ImGuiSliderFlags_"][5]["comment"] = " // Disable CTRL+Click or Enter key allowing to input text directly into the widget"
defs["enums"]["ImGuiSliderFlags_"][5]["name"] = "ImGuiSliderFlags_NoInput"
defs["enums"]["ImGuiSliderFlags_"][5]["value"] = "1 << 7"
defs["enums"]["ImGuiSliderFlags_"][6] = {}
defs["enums"]["ImGuiSliderFlags_"][6]["calc_value"] = 1879048207
defs["enums"]["ImGuiSliderFlags_"][6]["comment"] = " // [Internal] We treat using those bits as being potentially a 'float power' argument from the previous API that has got miscast to this enum, and will trigger an assert if needed."
defs["enums"]["ImGuiSliderFlags_"][6]["name"] = "ImGuiSliderFlags_InvalidMask_"
defs["enums"]["ImGuiSliderFlags_"][6]["value"] = "0x7000000F"
defs["enums"]["ImGuiStyleVar_"] = {}
defs["enums"]["ImGuiStyleVar_"][1] = {}
defs["enums"]["ImGuiStyleVar_"][1]["calc_value"] = 0
defs["enums"]["ImGuiStyleVar_"][1]["comment"] = " // float     Alpha"
defs["enums"]["ImGuiStyleVar_"][1]["name"] = "ImGuiStyleVar_Alpha"
defs["enums"]["ImGuiStyleVar_"][1]["value"] = 0
defs["enums"]["ImGuiStyleVar_"][2] = {}
defs["enums"]["ImGuiStyleVar_"][2]["calc_value"] = 1
defs["enums"]["ImGuiStyleVar_"][2]["comment"] = " // ImVec2    WindowPadding"
defs["enums"]["ImGuiStyleVar_"][2]["name"] = "ImGuiStyleVar_WindowPadding"
defs["enums"]["ImGuiStyleVar_"][2]["value"] = 1
defs["enums"]["ImGuiStyleVar_"][3] = {}
defs["enums"]["ImGuiStyleVar_"][3]["calc_value"] = 2
defs["enums"]["ImGuiStyleVar_"][3]["comment"] = " // float     WindowRounding"
defs["enums"]["ImGuiStyleVar_"][3]["name"] = "ImGuiStyleVar_WindowRounding"
defs["enums"]["ImGuiStyleVar_"][3]["value"] = 2
defs["enums"]["ImGuiStyleVar_"][4] = {}
defs["enums"]["ImGuiStyleVar_"][4]["calc_value"] = 3
defs["enums"]["ImGuiStyleVar_"][4]["comment"] = " // float     WindowBorderSize"
defs["enums"]["ImGuiStyleVar_"][4]["name"] = "ImGuiStyleVar_WindowBorderSize"
defs["enums"]["ImGuiStyleVar_"][4]["value"] = 3
defs["enums"]["ImGuiStyleVar_"][5] = {}
defs["enums"]["ImGuiStyleVar_"][5]["calc_value"] = 4
defs["enums"]["ImGuiStyleVar_"][5]["comment"] = " // ImVec2    WindowMinSize"
defs["enums"]["ImGuiStyleVar_"][5]["name"] = "ImGuiStyleVar_WindowMinSize"
defs["enums"]["ImGuiStyleVar_"][5]["value"] = 4
defs["enums"]["ImGuiStyleVar_"][6] = {}
defs["enums"]["ImGuiStyleVar_"][6]["calc_value"] = 5
defs["enums"]["ImGuiStyleVar_"][6]["comment"] = " // ImVec2    WindowTitleAlign"
defs["enums"]["ImGuiStyleVar_"][6]["name"] = "ImGuiStyleVar_WindowTitleAlign"
defs["enums"]["ImGuiStyleVar_"][6]["value"] = 5
defs["enums"]["ImGuiStyleVar_"][7] = {}
defs["enums"]["ImGuiStyleVar_"][7]["calc_value"] = 6
defs["enums"]["ImGuiStyleVar_"][7]["comment"] = " // float     ChildRounding"
defs["enums"]["ImGuiStyleVar_"][7]["name"] = "ImGuiStyleVar_ChildRounding"
defs["enums"]["ImGuiStyleVar_"][7]["value"] = 6
defs["enums"]["ImGuiStyleVar_"][8] = {}
defs["enums"]["ImGuiStyleVar_"][8]["calc_value"] = 7
defs["enums"]["ImGuiStyleVar_"][8]["comment"] = " // float     ChildBorderSize"
defs["enums"]["ImGuiStyleVar_"][8]["name"] = "ImGuiStyleVar_ChildBorderSize"
defs["enums"]["ImGuiStyleVar_"][8]["value"] = 7
defs["enums"]["ImGuiStyleVar_"][9] = {}
defs["enums"]["ImGuiStyleVar_"][9]["calc_value"] = 8
defs["enums"]["ImGuiStyleVar_"][9]["comment"] = " // float     PopupRounding"
defs["enums"]["ImGuiStyleVar_"][9]["name"] = "ImGuiStyleVar_PopupRounding"
defs["enums"]["ImGuiStyleVar_"][9]["value"] = 8
defs["enums"]["ImGuiStyleVar_"][10] = {}
defs["enums"]["ImGuiStyleVar_"][10]["calc_value"] = 9
defs["enums"]["ImGuiStyleVar_"][10]["comment"] = " // float     PopupBorderSize"
defs["enums"]["ImGuiStyleVar_"][10]["name"] = "ImGuiStyleVar_PopupBorderSize"
defs["enums"]["ImGuiStyleVar_"][10]["value"] = 9
defs["enums"]["ImGuiStyleVar_"][11] = {}
defs["enums"]["ImGuiStyleVar_"][11]["calc_value"] = 10
defs["enums"]["ImGuiStyleVar_"][11]["comment"] = " // ImVec2    FramePadding"
defs["enums"]["ImGuiStyleVar_"][11]["name"] = "ImGuiStyleVar_FramePadding"
defs["enums"]["ImGuiStyleVar_"][11]["value"] = 10
defs["enums"]["ImGuiStyleVar_"][12] = {}
defs["enums"]["ImGuiStyleVar_"][12]["calc_value"] = 11
defs["enums"]["ImGuiStyleVar_"][12]["comment"] = " // float     FrameRounding"
defs["enums"]["ImGuiStyleVar_"][12]["name"] = "ImGuiStyleVar_FrameRounding"
defs["enums"]["ImGuiStyleVar_"][12]["value"] = 11
defs["enums"]["ImGuiStyleVar_"][13] = {}
defs["enums"]["ImGuiStyleVar_"][13]["calc_value"] = 12
defs["enums"]["ImGuiStyleVar_"][13]["comment"] = " // float     FrameBorderSize"
defs["enums"]["ImGuiStyleVar_"][13]["name"] = "ImGuiStyleVar_FrameBorderSize"
defs["enums"]["ImGuiStyleVar_"][13]["value"] = 12
defs["enums"]["ImGuiStyleVar_"][14] = {}
defs["enums"]["ImGuiStyleVar_"][14]["calc_value"] = 13
defs["enums"]["ImGuiStyleVar_"][14]["comment"] = " // ImVec2    ItemSpacing"
defs["enums"]["ImGuiStyleVar_"][14]["name"] = "ImGuiStyleVar_ItemSpacing"
defs["enums"]["ImGuiStyleVar_"][14]["value"] = 13
defs["enums"]["ImGuiStyleVar_"][15] = {}
defs["enums"]["ImGuiStyleVar_"][15]["calc_value"] = 14
defs["enums"]["ImGuiStyleVar_"][15]["comment"] = " // ImVec2    ItemInnerSpacing"
defs["enums"]["ImGuiStyleVar_"][15]["name"] = "ImGuiStyleVar_ItemInnerSpacing"
defs["enums"]["ImGuiStyleVar_"][15]["value"] = 14
defs["enums"]["ImGuiStyleVar_"][16] = {}
defs["enums"]["ImGuiStyleVar_"][16]["calc_value"] = 15
defs["enums"]["ImGuiStyleVar_"][16]["comment"] = " // float     IndentSpacing"
defs["enums"]["ImGuiStyleVar_"][16]["name"] = "ImGuiStyleVar_IndentSpacing"
defs["enums"]["ImGuiStyleVar_"][16]["value"] = 15
defs["enums"]["ImGuiStyleVar_"][17] = {}
defs["enums"]["ImGuiStyleVar_"][17]["calc_value"] = 16
defs["enums"]["ImGuiStyleVar_"][17]["comment"] = " // float     ScrollbarSize"
defs["enums"]["ImGuiStyleVar_"][17]["name"] = "ImGuiStyleVar_ScrollbarSize"
defs["enums"]["ImGuiStyleVar_"][17]["value"] = 16
defs["enums"]["ImGuiStyleVar_"][18] = {}
defs["enums"]["ImGuiStyleVar_"][18]["calc_value"] = 17
defs["enums"]["ImGuiStyleVar_"][18]["comment"] = " // float     ScrollbarRounding"
defs["enums"]["ImGuiStyleVar_"][18]["name"] = "ImGuiStyleVar_ScrollbarRounding"
defs["enums"]["ImGuiStyleVar_"][18]["value"] = 17
defs["enums"]["ImGuiStyleVar_"][19] = {}
defs["enums"]["ImGuiStyleVar_"][19]["calc_value"] = 18
defs["enums"]["ImGuiStyleVar_"][19]["comment"] = " // float     GrabMinSize"
defs["enums"]["ImGuiStyleVar_"][19]["name"] = "ImGuiStyleVar_GrabMinSize"
defs["enums"]["ImGuiStyleVar_"][19]["value"] = 18
defs["enums"]["ImGuiStyleVar_"][20] = {}
defs["enums"]["ImGuiStyleVar_"][20]["calc_value"] = 19
defs["enums"]["ImGuiStyleVar_"][20]["comment"] = " // float     GrabRounding"
defs["enums"]["ImGuiStyleVar_"][20]["name"] = "ImGuiStyleVar_GrabRounding"
defs["enums"]["ImGuiStyleVar_"][20]["value"] = 19
defs["enums"]["ImGuiStyleVar_"][21] = {}
defs["enums"]["ImGuiStyleVar_"][21]["calc_value"] = 20
defs["enums"]["ImGuiStyleVar_"][21]["comment"] = " // float     TabRounding"
defs["enums"]["ImGuiStyleVar_"][21]["name"] = "ImGuiStyleVar_TabRounding"
defs["enums"]["ImGuiStyleVar_"][21]["value"] = 20
defs["enums"]["ImGuiStyleVar_"][22] = {}
defs["enums"]["ImGuiStyleVar_"][22]["calc_value"] = 21
defs["enums"]["ImGuiStyleVar_"][22]["comment"] = " // ImVec2    ButtonTextAlign"
defs["enums"]["ImGuiStyleVar_"][22]["name"] = "ImGuiStyleVar_ButtonTextAlign"
defs["enums"]["ImGuiStyleVar_"][22]["value"] = 21
defs["enums"]["ImGuiStyleVar_"][23] = {}
defs["enums"]["ImGuiStyleVar_"][23]["calc_value"] = 22
defs["enums"]["ImGuiStyleVar_"][23]["comment"] = " // ImVec2    SelectableTextAlign"
defs["enums"]["ImGuiStyleVar_"][23]["name"] = "ImGuiStyleVar_SelectableTextAlign"
defs["enums"]["ImGuiStyleVar_"][23]["value"] = 22
defs["enums"]["ImGuiStyleVar_"][24] = {}
defs["enums"]["ImGuiStyleVar_"][24]["calc_value"] = 23
defs["enums"]["ImGuiStyleVar_"][24]["name"] = "ImGuiStyleVar_COUNT"
defs["enums"]["ImGuiStyleVar_"][24]["value"] = 23
defs["enums"]["ImGuiTabBarFlagsPrivate_"] = {}
defs["enums"]["ImGuiTabBarFlagsPrivate_"][1] = {}
defs["enums"]["ImGuiTabBarFlagsPrivate_"][1]["calc_value"] = 1048576
defs["enums"]["ImGuiTabBarFlagsPrivate_"][1]["comment"] = " // Part of a dock node [we don't use this in the master branch but it facilitate branch syncing to keep this around]"
defs["enums"]["ImGuiTabBarFlagsPrivate_"][1]["name"] = "ImGuiTabBarFlags_DockNode"
defs["enums"]["ImGuiTabBarFlagsPrivate_"][1]["value"] = "1 << 20"
defs["enums"]["ImGuiTabBarFlagsPrivate_"][2] = {}
defs["enums"]["ImGuiTabBarFlagsPrivate_"][2]["calc_value"] = 2097152
defs["enums"]["ImGuiTabBarFlagsPrivate_"][2]["name"] = "ImGuiTabBarFlags_IsFocused"
defs["enums"]["ImGuiTabBarFlagsPrivate_"][2]["value"] = "1 << 21"
defs["enums"]["ImGuiTabBarFlagsPrivate_"][3] = {}
defs["enums"]["ImGuiTabBarFlagsPrivate_"][3]["calc_value"] = 4194304
defs["enums"]["ImGuiTabBarFlagsPrivate_"][3]["comment"] = " // FIXME: Settings are handled by the docking system, this only request the tab bar to mark settings dirty when reordering tabs"
defs["enums"]["ImGuiTabBarFlagsPrivate_"][3]["name"] = "ImGuiTabBarFlags_SaveSettings"
defs["enums"]["ImGuiTabBarFlagsPrivate_"][3]["value"] = "1 << 22"
defs["enums"]["ImGuiTabBarFlags_"] = {}
defs["enums"]["ImGuiTabBarFlags_"][1] = {}
defs["enums"]["ImGuiTabBarFlags_"][1]["calc_value"] = 0
defs["enums"]["ImGuiTabBarFlags_"][1]["name"] = "ImGuiTabBarFlags_None"
defs["enums"]["ImGuiTabBarFlags_"][1]["value"] = "0"
defs["enums"]["ImGuiTabBarFlags_"][2] = {}
defs["enums"]["ImGuiTabBarFlags_"][2]["calc_value"] = 1
defs["enums"]["ImGuiTabBarFlags_"][2]["comment"] = " // Allow manually dragging tabs to re-order them + New tabs are appended at the end of list"
defs["enums"]["ImGuiTabBarFlags_"][2]["name"] = "ImGuiTabBarFlags_Reorderable"
defs["enums"]["ImGuiTabBarFlags_"][2]["value"] = "1 << 0"
defs["enums"]["ImGuiTabBarFlags_"][3] = {}
defs["enums"]["ImGuiTabBarFlags_"][3]["calc_value"] = 2
defs["enums"]["ImGuiTabBarFlags_"][3]["comment"] = " // Automatically select new tabs when they appear"
defs["enums"]["ImGuiTabBarFlags_"][3]["name"] = "ImGuiTabBarFlags_AutoSelectNewTabs"
defs["enums"]["ImGuiTabBarFlags_"][3]["value"] = "1 << 1"
defs["enums"]["ImGuiTabBarFlags_"][4] = {}
defs["enums"]["ImGuiTabBarFlags_"][4]["calc_value"] = 4
defs["enums"]["ImGuiTabBarFlags_"][4]["comment"] = " // Disable buttons to open the tab list popup"
defs["enums"]["ImGuiTabBarFlags_"][4]["name"] = "ImGuiTabBarFlags_TabListPopupButton"
defs["enums"]["ImGuiTabBarFlags_"][4]["value"] = "1 << 2"
defs["enums"]["ImGuiTabBarFlags_"][5] = {}
defs["enums"]["ImGuiTabBarFlags_"][5]["calc_value"] = 8
defs["enums"]["ImGuiTabBarFlags_"][5]["comment"] = " // Disable behavior of closing tabs (that are submitted with p_open != NULL) with middle mouse button. You can still repro this behavior on user's side with if (IsItemHovered() && IsMouseClicked(2)) *p_open = false."
defs["enums"]["ImGuiTabBarFlags_"][5]["name"] = "ImGuiTabBarFlags_NoCloseWithMiddleMouseButton"
defs["enums"]["ImGuiTabBarFlags_"][5]["value"] = "1 << 3"
defs["enums"]["ImGuiTabBarFlags_"][6] = {}
defs["enums"]["ImGuiTabBarFlags_"][6]["calc_value"] = 16
defs["enums"]["ImGuiTabBarFlags_"][6]["comment"] = " // Disable scrolling buttons (apply when fitting policy is ImGuiTabBarFlags_FittingPolicyScroll)"
defs["enums"]["ImGuiTabBarFlags_"][6]["name"] = "ImGuiTabBarFlags_NoTabListScrollingButtons"
defs["enums"]["ImGuiTabBarFlags_"][6]["value"] = "1 << 4"
defs["enums"]["ImGuiTabBarFlags_"][7] = {}
defs["enums"]["ImGuiTabBarFlags_"][7]["calc_value"] = 32
defs["enums"]["ImGuiTabBarFlags_"][7]["comment"] = " // Disable tooltips when hovering a tab"
defs["enums"]["ImGuiTabBarFlags_"][7]["name"] = "ImGuiTabBarFlags_NoTooltip"
defs["enums"]["ImGuiTabBarFlags_"][7]["value"] = "1 << 5"
defs["enums"]["ImGuiTabBarFlags_"][8] = {}
defs["enums"]["ImGuiTabBarFlags_"][8]["calc_value"] = 64
defs["enums"]["ImGuiTabBarFlags_"][8]["comment"] = " // Resize tabs when they don't fit"
defs["enums"]["ImGuiTabBarFlags_"][8]["name"] = "ImGuiTabBarFlags_FittingPolicyResizeDown"
defs["enums"]["ImGuiTabBarFlags_"][8]["value"] = "1 << 6"
defs["enums"]["ImGuiTabBarFlags_"][9] = {}
defs["enums"]["ImGuiTabBarFlags_"][9]["calc_value"] = 128
defs["enums"]["ImGuiTabBarFlags_"][9]["comment"] = " // Add scroll buttons when tabs don't fit"
defs["enums"]["ImGuiTabBarFlags_"][9]["name"] = "ImGuiTabBarFlags_FittingPolicyScroll"
defs["enums"]["ImGuiTabBarFlags_"][9]["value"] = "1 << 7"
defs["enums"]["ImGuiTabBarFlags_"][10] = {}
defs["enums"]["ImGuiTabBarFlags_"][10]["calc_value"] = 192
defs["enums"]["ImGuiTabBarFlags_"][10]["name"] = "ImGuiTabBarFlags_FittingPolicyMask_"
defs["enums"]["ImGuiTabBarFlags_"][10]["value"] = "ImGuiTabBarFlags_FittingPolicyResizeDown | ImGuiTabBarFlags_FittingPolicyScroll"
defs["enums"]["ImGuiTabBarFlags_"][11] = {}
defs["enums"]["ImGuiTabBarFlags_"][11]["calc_value"] = 64
defs["enums"]["ImGuiTabBarFlags_"][11]["name"] = "ImGuiTabBarFlags_FittingPolicyDefault_"
defs["enums"]["ImGuiTabBarFlags_"][11]["value"] = "ImGuiTabBarFlags_FittingPolicyResizeDown"
defs["enums"]["ImGuiTabItemFlagsPrivate_"] = {}
defs["enums"]["ImGuiTabItemFlagsPrivate_"][1] = {}
defs["enums"]["ImGuiTabItemFlagsPrivate_"][1]["calc_value"] = 1048576
defs["enums"]["ImGuiTabItemFlagsPrivate_"][1]["comment"] = " // Track whether p_open was set or not (we'll need this info on the next frame to recompute ContentWidth during layout)"
defs["enums"]["ImGuiTabItemFlagsPrivate_"][1]["name"] = "ImGuiTabItemFlags_NoCloseButton"
defs["enums"]["ImGuiTabItemFlagsPrivate_"][1]["value"] = "1 << 20"
defs["enums"]["ImGuiTabItemFlagsPrivate_"][2] = {}
defs["enums"]["ImGuiTabItemFlagsPrivate_"][2]["calc_value"] = 2097152
defs["enums"]["ImGuiTabItemFlagsPrivate_"][2]["comment"] = " // [Docking] Trailing tabs with the _Unsorted flag will be sorted based on the DockOrder of their Window."
defs["enums"]["ImGuiTabItemFlagsPrivate_"][2]["name"] = "ImGuiTabItemFlags_Unsorted"
defs["enums"]["ImGuiTabItemFlagsPrivate_"][2]["value"] = "1 << 21"
defs["enums"]["ImGuiTabItemFlagsPrivate_"][3] = {}
defs["enums"]["ImGuiTabItemFlagsPrivate_"][3]["calc_value"] = 4194304
defs["enums"]["ImGuiTabItemFlagsPrivate_"][3]["comment"] = " // [Docking] Display tab shape for docking preview (height is adjusted slightly to compensate for the yet missing tab bar)"
defs["enums"]["ImGuiTabItemFlagsPrivate_"][3]["name"] = "ImGuiTabItemFlags_Preview"
defs["enums"]["ImGuiTabItemFlagsPrivate_"][3]["value"] = "1 << 22"
defs["enums"]["ImGuiTabItemFlags_"] = {}
defs["enums"]["ImGuiTabItemFlags_"][1] = {}
defs["enums"]["ImGuiTabItemFlags_"][1]["calc_value"] = 0
defs["enums"]["ImGuiTabItemFlags_"][1]["name"] = "ImGuiTabItemFlags_None"
defs["enums"]["ImGuiTabItemFlags_"][1]["value"] = "0"
defs["enums"]["ImGuiTabItemFlags_"][2] = {}
defs["enums"]["ImGuiTabItemFlags_"][2]["calc_value"] = 1
defs["enums"]["ImGuiTabItemFlags_"][2]["comment"] = " // Append '*' to title without affecting the ID, as a convenience to avoid using the ### operator. Also: tab is selected on closure and closure is deferred by one frame to allow code to undo it without flicker."
defs["enums"]["ImGuiTabItemFlags_"][2]["name"] = "ImGuiTabItemFlags_UnsavedDocument"
defs["enums"]["ImGuiTabItemFlags_"][2]["value"] = "1 << 0"
defs["enums"]["ImGuiTabItemFlags_"][3] = {}
defs["enums"]["ImGuiTabItemFlags_"][3]["calc_value"] = 2
defs["enums"]["ImGuiTabItemFlags_"][3]["comment"] = " // Trigger flag to programmatically make the tab selected when calling BeginTabItem()"
defs["enums"]["ImGuiTabItemFlags_"][3]["name"] = "ImGuiTabItemFlags_SetSelected"
defs["enums"]["ImGuiTabItemFlags_"][3]["value"] = "1 << 1"
defs["enums"]["ImGuiTabItemFlags_"][4] = {}
defs["enums"]["ImGuiTabItemFlags_"][4]["calc_value"] = 4
defs["enums"]["ImGuiTabItemFlags_"][4]["comment"] = " // Disable behavior of closing tabs (that are submitted with p_open != NULL) with middle mouse button. You can still repro this behavior on user's side with if (IsItemHovered() && IsMouseClicked(2)) *p_open = false."
defs["enums"]["ImGuiTabItemFlags_"][4]["name"] = "ImGuiTabItemFlags_NoCloseWithMiddleMouseButton"
defs["enums"]["ImGuiTabItemFlags_"][4]["value"] = "1 << 2"
defs["enums"]["ImGuiTabItemFlags_"][5] = {}
defs["enums"]["ImGuiTabItemFlags_"][5]["calc_value"] = 8
defs["enums"]["ImGuiTabItemFlags_"][5]["comment"] = " // Don't call PushID(tab->ID)/PopID() on BeginTabItem()/EndTabItem()"
defs["enums"]["ImGuiTabItemFlags_"][5]["name"] = "ImGuiTabItemFlags_NoPushId"
defs["enums"]["ImGuiTabItemFlags_"][5]["value"] = "1 << 3"
defs["enums"]["ImGuiTabItemFlags_"][6] = {}
defs["enums"]["ImGuiTabItemFlags_"][6]["calc_value"] = 16
defs["enums"]["ImGuiTabItemFlags_"][6]["comment"] = " // Disable tooltip for the given tab"
defs["enums"]["ImGuiTabItemFlags_"][6]["name"] = "ImGuiTabItemFlags_NoTooltip"
defs["enums"]["ImGuiTabItemFlags_"][6]["value"] = "1 << 4"
defs["enums"]["ImGuiTextFlags_"] = {}
defs["enums"]["ImGuiTextFlags_"][1] = {}
defs["enums"]["ImGuiTextFlags_"][1]["calc_value"] = 0
defs["enums"]["ImGuiTextFlags_"][1]["name"] = "ImGuiTextFlags_None"
defs["enums"]["ImGuiTextFlags_"][1]["value"] = "0"
defs["enums"]["ImGuiTextFlags_"][2] = {}
defs["enums"]["ImGuiTextFlags_"][2]["calc_value"] = 1
defs["enums"]["ImGuiTextFlags_"][2]["name"] = "ImGuiTextFlags_NoWidthForLargeClippedText"
defs["enums"]["ImGuiTextFlags_"][2]["value"] = "1 << 0"
defs["enums"]["ImGuiTooltipFlags_"] = {}
defs["enums"]["ImGuiTooltipFlags_"][1] = {}
defs["enums"]["ImGuiTooltipFlags_"][1]["calc_value"] = 0
defs["enums"]["ImGuiTooltipFlags_"][1]["name"] = "ImGuiTooltipFlags_None"
defs["enums"]["ImGuiTooltipFlags_"][1]["value"] = "0"
defs["enums"]["ImGuiTooltipFlags_"][2] = {}
defs["enums"]["ImGuiTooltipFlags_"][2]["calc_value"] = 1
defs["enums"]["ImGuiTooltipFlags_"][2]["comment"] = " // Override will clear/ignore previously submitted tooltip (defaults to append)"
defs["enums"]["ImGuiTooltipFlags_"][2]["name"] = "ImGuiTooltipFlags_OverridePreviousTooltip"
defs["enums"]["ImGuiTooltipFlags_"][2]["value"] = "1 << 0"
defs["enums"]["ImGuiTreeNodeFlagsPrivate_"] = {}
defs["enums"]["ImGuiTreeNodeFlagsPrivate_"][1] = {}
defs["enums"]["ImGuiTreeNodeFlagsPrivate_"][1]["calc_value"] = 1048576
defs["enums"]["ImGuiTreeNodeFlagsPrivate_"][1]["name"] = "ImGuiTreeNodeFlags_ClipLabelForTrailingButton"
defs["enums"]["ImGuiTreeNodeFlagsPrivate_"][1]["value"] = "1 << 20"
defs["enums"]["ImGuiTreeNodeFlags_"] = {}
defs["enums"]["ImGuiTreeNodeFlags_"][1] = {}
defs["enums"]["ImGuiTreeNodeFlags_"][1]["calc_value"] = 0
defs["enums"]["ImGuiTreeNodeFlags_"][1]["name"] = "ImGuiTreeNodeFlags_None"
defs["enums"]["ImGuiTreeNodeFlags_"][1]["value"] = "0"
defs["enums"]["ImGuiTreeNodeFlags_"][2] = {}
defs["enums"]["ImGuiTreeNodeFlags_"][2]["calc_value"] = 1
defs["enums"]["ImGuiTreeNodeFlags_"][2]["comment"] = " // Draw as selected"
defs["enums"]["ImGuiTreeNodeFlags_"][2]["name"] = "ImGuiTreeNodeFlags_Selected"
defs["enums"]["ImGuiTreeNodeFlags_"][2]["value"] = "1 << 0"
defs["enums"]["ImGuiTreeNodeFlags_"][3] = {}
defs["enums"]["ImGuiTreeNodeFlags_"][3]["calc_value"] = 2
defs["enums"]["ImGuiTreeNodeFlags_"][3]["comment"] = " // Full colored frame (e.g. for CollapsingHeader)"
defs["enums"]["ImGuiTreeNodeFlags_"][3]["name"] = "ImGuiTreeNodeFlags_Framed"
defs["enums"]["ImGuiTreeNodeFlags_"][3]["value"] = "1 << 1"
defs["enums"]["ImGuiTreeNodeFlags_"][4] = {}
defs["enums"]["ImGuiTreeNodeFlags_"][4]["calc_value"] = 4
defs["enums"]["ImGuiTreeNodeFlags_"][4]["comment"] = " // Hit testing to allow subsequent widgets to overlap this one"
defs["enums"]["ImGuiTreeNodeFlags_"][4]["name"] = "ImGuiTreeNodeFlags_AllowItemOverlap"
defs["enums"]["ImGuiTreeNodeFlags_"][4]["value"] = "1 << 2"
defs["enums"]["ImGuiTreeNodeFlags_"][5] = {}
defs["enums"]["ImGuiTreeNodeFlags_"][5]["calc_value"] = 8
defs["enums"]["ImGuiTreeNodeFlags_"][5]["comment"] = " // Don't do a TreePush() when open (e.g. for CollapsingHeader) = no extra indent nor pushing on ID stack"
defs["enums"]["ImGuiTreeNodeFlags_"][5]["name"] = "ImGuiTreeNodeFlags_NoTreePushOnOpen"
defs["enums"]["ImGuiTreeNodeFlags_"][5]["value"] = "1 << 3"
defs["enums"]["ImGuiTreeNodeFlags_"][6] = {}
defs["enums"]["ImGuiTreeNodeFlags_"][6]["calc_value"] = 16
defs["enums"]["ImGuiTreeNodeFlags_"][6]["comment"] = " // Don't automatically and temporarily open node when Logging is active (by default logging will automatically open tree nodes)"
defs["enums"]["ImGuiTreeNodeFlags_"][6]["name"] = "ImGuiTreeNodeFlags_NoAutoOpenOnLog"
defs["enums"]["ImGuiTreeNodeFlags_"][6]["value"] = "1 << 4"
defs["enums"]["ImGuiTreeNodeFlags_"][7] = {}
defs["enums"]["ImGuiTreeNodeFlags_"][7]["calc_value"] = 32
defs["enums"]["ImGuiTreeNodeFlags_"][7]["comment"] = " // Default node to be open"
defs["enums"]["ImGuiTreeNodeFlags_"][7]["name"] = "ImGuiTreeNodeFlags_DefaultOpen"
defs["enums"]["ImGuiTreeNodeFlags_"][7]["value"] = "1 << 5"
defs["enums"]["ImGuiTreeNodeFlags_"][8] = {}
defs["enums"]["ImGuiTreeNodeFlags_"][8]["calc_value"] = 64
defs["enums"]["ImGuiTreeNodeFlags_"][8]["comment"] = " // Need double-click to open node"
defs["enums"]["ImGuiTreeNodeFlags_"][8]["name"] = "ImGuiTreeNodeFlags_OpenOnDoubleClick"
defs["enums"]["ImGuiTreeNodeFlags_"][8]["value"] = "1 << 6"
defs["enums"]["ImGuiTreeNodeFlags_"][9] = {}
defs["enums"]["ImGuiTreeNodeFlags_"][9]["calc_value"] = 128
defs["enums"]["ImGuiTreeNodeFlags_"][9]["comment"] = " // Only open when clicking on the arrow part. If ImGuiTreeNodeFlags_OpenOnDoubleClick is also set, single-click arrow or double-click all box to open."
defs["enums"]["ImGuiTreeNodeFlags_"][9]["name"] = "ImGuiTreeNodeFlags_OpenOnArrow"
defs["enums"]["ImGuiTreeNodeFlags_"][9]["value"] = "1 << 7"
defs["enums"]["ImGuiTreeNodeFlags_"][10] = {}
defs["enums"]["ImGuiTreeNodeFlags_"][10]["calc_value"] = 256
defs["enums"]["ImGuiTreeNodeFlags_"][10]["comment"] = " // No collapsing, no arrow (use as a convenience for leaf nodes)."
defs["enums"]["ImGuiTreeNodeFlags_"][10]["name"] = "ImGuiTreeNodeFlags_Leaf"
defs["enums"]["ImGuiTreeNodeFlags_"][10]["value"] = "1 << 8"
defs["enums"]["ImGuiTreeNodeFlags_"][11] = {}
defs["enums"]["ImGuiTreeNodeFlags_"][11]["calc_value"] = 512
defs["enums"]["ImGuiTreeNodeFlags_"][11]["comment"] = " // Display a bullet instead of arrow"
defs["enums"]["ImGuiTreeNodeFlags_"][11]["name"] = "ImGuiTreeNodeFlags_Bullet"
defs["enums"]["ImGuiTreeNodeFlags_"][11]["value"] = "1 << 9"
defs["enums"]["ImGuiTreeNodeFlags_"][12] = {}
defs["enums"]["ImGuiTreeNodeFlags_"][12]["calc_value"] = 1024
defs["enums"]["ImGuiTreeNodeFlags_"][12]["comment"] = " // Use FramePadding (even for an unframed text node) to vertically align text baseline to regular widget height. Equivalent to calling AlignTextToFramePadding()."
defs["enums"]["ImGuiTreeNodeFlags_"][12]["name"] = "ImGuiTreeNodeFlags_FramePadding"
defs["enums"]["ImGuiTreeNodeFlags_"][12]["value"] = "1 << 10"
defs["enums"]["ImGuiTreeNodeFlags_"][13] = {}
defs["enums"]["ImGuiTreeNodeFlags_"][13]["calc_value"] = 2048
defs["enums"]["ImGuiTreeNodeFlags_"][13]["comment"] = " // Extend hit box to the right-most edge, even if not framed. This is not the default in order to allow adding other items on the same line. In the future we may refactor the hit system to be front-to-back, allowing natural overlaps and then this can become the default."
defs["enums"]["ImGuiTreeNodeFlags_"][13]["name"] = "ImGuiTreeNodeFlags_SpanAvailWidth"
defs["enums"]["ImGuiTreeNodeFlags_"][13]["value"] = "1 << 11"
defs["enums"]["ImGuiTreeNodeFlags_"][14] = {}
defs["enums"]["ImGuiTreeNodeFlags_"][14]["calc_value"] = 4096
defs["enums"]["ImGuiTreeNodeFlags_"][14]["comment"] = " // Extend hit box to the left-most and right-most edges (bypass the indented area)."
defs["enums"]["ImGuiTreeNodeFlags_"][14]["name"] = "ImGuiTreeNodeFlags_SpanFullWidth"
defs["enums"]["ImGuiTreeNodeFlags_"][14]["value"] = "1 << 12"
defs["enums"]["ImGuiTreeNodeFlags_"][15] = {}
defs["enums"]["ImGuiTreeNodeFlags_"][15]["calc_value"] = 8192
defs["enums"]["ImGuiTreeNodeFlags_"][15]["comment"] = " // (WIP) Nav: left direction may move to this TreeNode() from any of its child (items submitted between TreeNode and TreePop)"
defs["enums"]["ImGuiTreeNodeFlags_"][15]["name"] = "ImGuiTreeNodeFlags_NavLeftJumpsBackHere"
defs["enums"]["ImGuiTreeNodeFlags_"][15]["value"] = "1 << 13"
defs["enums"]["ImGuiTreeNodeFlags_"][16] = {}
defs["enums"]["ImGuiTreeNodeFlags_"][16]["calc_value"] = 26
defs["enums"]["ImGuiTreeNodeFlags_"][16]["name"] = "ImGuiTreeNodeFlags_CollapsingHeader"
defs["enums"]["ImGuiTreeNodeFlags_"][16]["value"] = "ImGuiTreeNodeFlags_Framed | ImGuiTreeNodeFlags_NoTreePushOnOpen | ImGuiTreeNodeFlags_NoAutoOpenOnLog"
defs["enums"]["ImGuiViewportFlags_"] = {}
defs["enums"]["ImGuiViewportFlags_"][1] = {}
defs["enums"]["ImGuiViewportFlags_"][1]["calc_value"] = 0
defs["enums"]["ImGuiViewportFlags_"][1]["name"] = "ImGuiViewportFlags_None"
defs["enums"]["ImGuiViewportFlags_"][1]["value"] = "0"
defs["enums"]["ImGuiViewportFlags_"][2] = {}
defs["enums"]["ImGuiViewportFlags_"][2]["calc_value"] = 1
defs["enums"]["ImGuiViewportFlags_"][2]["comment"] = " // Platform Window: Disable platform decorations: title bar, borders, etc. (generally set all windows, but if ImGuiConfigFlags_ViewportsDecoration is set we only set this on popups/tooltips)"
defs["enums"]["ImGuiViewportFlags_"][2]["name"] = "ImGuiViewportFlags_NoDecoration"
defs["enums"]["ImGuiViewportFlags_"][2]["value"] = "1 << 0"
defs["enums"]["ImGuiViewportFlags_"][3] = {}
defs["enums"]["ImGuiViewportFlags_"][3]["calc_value"] = 2
defs["enums"]["ImGuiViewportFlags_"][3]["comment"] = " // Platform Window: Disable platform task bar icon (generally set on popups/tooltips, or all windows if ImGuiConfigFlags_ViewportsNoTaskBarIcon is set)"
defs["enums"]["ImGuiViewportFlags_"][3]["name"] = "ImGuiViewportFlags_NoTaskBarIcon"
defs["enums"]["ImGuiViewportFlags_"][3]["value"] = "1 << 1"
defs["enums"]["ImGuiViewportFlags_"][4] = {}
defs["enums"]["ImGuiViewportFlags_"][4]["calc_value"] = 4
defs["enums"]["ImGuiViewportFlags_"][4]["comment"] = " // Platform Window: Don't take focus when created."
defs["enums"]["ImGuiViewportFlags_"][4]["name"] = "ImGuiViewportFlags_NoFocusOnAppearing"
defs["enums"]["ImGuiViewportFlags_"][4]["value"] = "1 << 2"
defs["enums"]["ImGuiViewportFlags_"][5] = {}
defs["enums"]["ImGuiViewportFlags_"][5]["calc_value"] = 8
defs["enums"]["ImGuiViewportFlags_"][5]["comment"] = " // Platform Window: Don't take focus when clicked on."
defs["enums"]["ImGuiViewportFlags_"][5]["name"] = "ImGuiViewportFlags_NoFocusOnClick"
defs["enums"]["ImGuiViewportFlags_"][5]["value"] = "1 << 3"
defs["enums"]["ImGuiViewportFlags_"][6] = {}
defs["enums"]["ImGuiViewportFlags_"][6]["calc_value"] = 16
defs["enums"]["ImGuiViewportFlags_"][6]["comment"] = " // Platform Window: Make mouse pass through so we can drag this window while peaking behind it."
defs["enums"]["ImGuiViewportFlags_"][6]["name"] = "ImGuiViewportFlags_NoInputs"
defs["enums"]["ImGuiViewportFlags_"][6]["value"] = "1 << 4"
defs["enums"]["ImGuiViewportFlags_"][7] = {}
defs["enums"]["ImGuiViewportFlags_"][7]["calc_value"] = 32
defs["enums"]["ImGuiViewportFlags_"][7]["comment"] = " // Platform Window: Renderer doesn't need to clear the framebuffer ahead (because we will fill it entirely)."
defs["enums"]["ImGuiViewportFlags_"][7]["name"] = "ImGuiViewportFlags_NoRendererClear"
defs["enums"]["ImGuiViewportFlags_"][7]["value"] = "1 << 5"
defs["enums"]["ImGuiViewportFlags_"][8] = {}
defs["enums"]["ImGuiViewportFlags_"][8]["calc_value"] = 64
defs["enums"]["ImGuiViewportFlags_"][8]["comment"] = " // Platform Window: Display on top (for tooltips only)."
defs["enums"]["ImGuiViewportFlags_"][8]["name"] = "ImGuiViewportFlags_TopMost"
defs["enums"]["ImGuiViewportFlags_"][8]["value"] = "1 << 6"
defs["enums"]["ImGuiViewportFlags_"][9] = {}
defs["enums"]["ImGuiViewportFlags_"][9]["calc_value"] = 128
defs["enums"]["ImGuiViewportFlags_"][9]["comment"] = " // Platform Window: Window is minimized, can skip render. When minimized we tend to avoid using the viewport pos/size for clipping window or testing if they are contained in the viewport."
defs["enums"]["ImGuiViewportFlags_"][9]["name"] = "ImGuiViewportFlags_Minimized"
defs["enums"]["ImGuiViewportFlags_"][9]["value"] = "1 << 7"
defs["enums"]["ImGuiViewportFlags_"][10] = {}
defs["enums"]["ImGuiViewportFlags_"][10]["calc_value"] = 256
defs["enums"]["ImGuiViewportFlags_"][10]["comment"] = " // Platform Window: Avoid merging this window into another host window. This can only be set via ImGuiWindowClass viewport flags override (because we need to now ahead if we are going to create a viewport in the first place!)."
defs["enums"]["ImGuiViewportFlags_"][10]["name"] = "ImGuiViewportFlags_NoAutoMerge"
defs["enums"]["ImGuiViewportFlags_"][10]["value"] = "1 << 8"
defs["enums"]["ImGuiViewportFlags_"][11] = {}
defs["enums"]["ImGuiViewportFlags_"][11]["calc_value"] = 512
defs["enums"]["ImGuiViewportFlags_"][11]["comment"] = " // Main viewport: can host multiple imgui windows (secondary viewports are associated to a single window)."
defs["enums"]["ImGuiViewportFlags_"][11]["name"] = "ImGuiViewportFlags_CanHostOtherWindows"
defs["enums"]["ImGuiViewportFlags_"][11]["value"] = "1 << 9"
defs["enums"]["ImGuiWindowFlags_"] = {}
defs["enums"]["ImGuiWindowFlags_"][1] = {}
defs["enums"]["ImGuiWindowFlags_"][1]["calc_value"] = 0
defs["enums"]["ImGuiWindowFlags_"][1]["name"] = "ImGuiWindowFlags_None"
defs["enums"]["ImGuiWindowFlags_"][1]["value"] = "0"
defs["enums"]["ImGuiWindowFlags_"][2] = {}
defs["enums"]["ImGuiWindowFlags_"][2]["calc_value"] = 1
defs["enums"]["ImGuiWindowFlags_"][2]["comment"] = " // Disable title-bar"
defs["enums"]["ImGuiWindowFlags_"][2]["name"] = "ImGuiWindowFlags_NoTitleBar"
defs["enums"]["ImGuiWindowFlags_"][2]["value"] = "1 << 0"
defs["enums"]["ImGuiWindowFlags_"][3] = {}
defs["enums"]["ImGuiWindowFlags_"][3]["calc_value"] = 2
defs["enums"]["ImGuiWindowFlags_"][3]["comment"] = " // Disable user resizing with the lower-right grip"
defs["enums"]["ImGuiWindowFlags_"][3]["name"] = "ImGuiWindowFlags_NoResize"
defs["enums"]["ImGuiWindowFlags_"][3]["value"] = "1 << 1"
defs["enums"]["ImGuiWindowFlags_"][4] = {}
defs["enums"]["ImGuiWindowFlags_"][4]["calc_value"] = 4
defs["enums"]["ImGuiWindowFlags_"][4]["comment"] = " // Disable user moving the window"
defs["enums"]["ImGuiWindowFlags_"][4]["name"] = "ImGuiWindowFlags_NoMove"
defs["enums"]["ImGuiWindowFlags_"][4]["value"] = "1 << 2"
defs["enums"]["ImGuiWindowFlags_"][5] = {}
defs["enums"]["ImGuiWindowFlags_"][5]["calc_value"] = 8
defs["enums"]["ImGuiWindowFlags_"][5]["comment"] = " // Disable scrollbars (window can still scroll with mouse or programmatically)"
defs["enums"]["ImGuiWindowFlags_"][5]["name"] = "ImGuiWindowFlags_NoScrollbar"
defs["enums"]["ImGuiWindowFlags_"][5]["value"] = "1 << 3"
defs["enums"]["ImGuiWindowFlags_"][6] = {}
defs["enums"]["ImGuiWindowFlags_"][6]["calc_value"] = 16
defs["enums"]["ImGuiWindowFlags_"][6]["comment"] = " // Disable user vertically scrolling with mouse wheel. On child window, mouse wheel will be forwarded to the parent unless NoScrollbar is also set."
defs["enums"]["ImGuiWindowFlags_"][6]["name"] = "ImGuiWindowFlags_NoScrollWithMouse"
defs["enums"]["ImGuiWindowFlags_"][6]["value"] = "1 << 4"
defs["enums"]["ImGuiWindowFlags_"][7] = {}
defs["enums"]["ImGuiWindowFlags_"][7]["calc_value"] = 32
defs["enums"]["ImGuiWindowFlags_"][7]["comment"] = " // Disable user collapsing window by double-clicking on it. Also referred to as \"window menu button\" within a docking node."
defs["enums"]["ImGuiWindowFlags_"][7]["name"] = "ImGuiWindowFlags_NoCollapse"
defs["enums"]["ImGuiWindowFlags_"][7]["value"] = "1 << 5"
defs["enums"]["ImGuiWindowFlags_"][8] = {}
defs["enums"]["ImGuiWindowFlags_"][8]["calc_value"] = 64
defs["enums"]["ImGuiWindowFlags_"][8]["comment"] = " // Resize every window to its content every frame"
defs["enums"]["ImGuiWindowFlags_"][8]["name"] = "ImGuiWindowFlags_AlwaysAutoResize"
defs["enums"]["ImGuiWindowFlags_"][8]["value"] = "1 << 6"
defs["enums"]["ImGuiWindowFlags_"][9] = {}
defs["enums"]["ImGuiWindowFlags_"][9]["calc_value"] = 128
defs["enums"]["ImGuiWindowFlags_"][9]["comment"] = " // Disable drawing background color (WindowBg, etc.) and outside border. Similar as using SetNextWindowBgAlpha(0.0f)."
defs["enums"]["ImGuiWindowFlags_"][9]["name"] = "ImGuiWindowFlags_NoBackground"
defs["enums"]["ImGuiWindowFlags_"][9]["value"] = "1 << 7"
defs["enums"]["ImGuiWindowFlags_"][10] = {}
defs["enums"]["ImGuiWindowFlags_"][10]["calc_value"] = 256
defs["enums"]["ImGuiWindowFlags_"][10]["comment"] = " // Never load/save settings in .ini file"
defs["enums"]["ImGuiWindowFlags_"][10]["name"] = "ImGuiWindowFlags_NoSavedSettings"
defs["enums"]["ImGuiWindowFlags_"][10]["value"] = "1 << 8"
defs["enums"]["ImGuiWindowFlags_"][11] = {}
defs["enums"]["ImGuiWindowFlags_"][11]["calc_value"] = 512
defs["enums"]["ImGuiWindowFlags_"][11]["comment"] = " // Disable catching mouse, hovering test with pass through."
defs["enums"]["ImGuiWindowFlags_"][11]["name"] = "ImGuiWindowFlags_NoMouseInputs"
defs["enums"]["ImGuiWindowFlags_"][11]["value"] = "1 << 9"
defs["enums"]["ImGuiWindowFlags_"][12] = {}
defs["enums"]["ImGuiWindowFlags_"][12]["calc_value"] = 1024
defs["enums"]["ImGuiWindowFlags_"][12]["comment"] = " // Has a menu-bar"
defs["enums"]["ImGuiWindowFlags_"][12]["name"] = "ImGuiWindowFlags_MenuBar"
defs["enums"]["ImGuiWindowFlags_"][12]["value"] = "1 << 10"
defs["enums"]["ImGuiWindowFlags_"][13] = {}
defs["enums"]["ImGuiWindowFlags_"][13]["calc_value"] = 2048
defs["enums"]["ImGuiWindowFlags_"][13]["comment"] = " // Allow horizontal scrollbar to appear (off by default). You may use SetNextWindowContentSize(ImVec2(width,0.0f)); prior to calling Begin() to specify width. Read code in imgui_demo in the \"Horizontal Scrolling\" section."
defs["enums"]["ImGuiWindowFlags_"][13]["name"] = "ImGuiWindowFlags_HorizontalScrollbar"
defs["enums"]["ImGuiWindowFlags_"][13]["value"] = "1 << 11"
defs["enums"]["ImGuiWindowFlags_"][14] = {}
defs["enums"]["ImGuiWindowFlags_"][14]["calc_value"] = 4096
defs["enums"]["ImGuiWindowFlags_"][14]["comment"] = " // Disable taking focus when transitioning from hidden to visible state"
defs["enums"]["ImGuiWindowFlags_"][14]["name"] = "ImGuiWindowFlags_NoFocusOnAppearing"
defs["enums"]["ImGuiWindowFlags_"][14]["value"] = "1 << 12"
defs["enums"]["ImGuiWindowFlags_"][15] = {}
defs["enums"]["ImGuiWindowFlags_"][15]["calc_value"] = 8192
defs["enums"]["ImGuiWindowFlags_"][15]["comment"] = " // Disable bringing window to front when taking focus (e.g. clicking on it or programmatically giving it focus)"
defs["enums"]["ImGuiWindowFlags_"][15]["name"] = "ImGuiWindowFlags_NoBringToFrontOnFocus"
defs["enums"]["ImGuiWindowFlags_"][15]["value"] = "1 << 13"
defs["enums"]["ImGuiWindowFlags_"][16] = {}
defs["enums"]["ImGuiWindowFlags_"][16]["calc_value"] = 16384
defs["enums"]["ImGuiWindowFlags_"][16]["comment"] = " // Always show vertical scrollbar (even if ContentSize.y < Size.y)"
defs["enums"]["ImGuiWindowFlags_"][16]["name"] = "ImGuiWindowFlags_AlwaysVerticalScrollbar"
defs["enums"]["ImGuiWindowFlags_"][16]["value"] = "1 << 14"
defs["enums"]["ImGuiWindowFlags_"][17] = {}
defs["enums"]["ImGuiWindowFlags_"][17]["calc_value"] = 32768
defs["enums"]["ImGuiWindowFlags_"][17]["comment"] = " // Always show horizontal scrollbar (even if ContentSize.x < Size.x)"
defs["enums"]["ImGuiWindowFlags_"][17]["name"] = "ImGuiWindowFlags_AlwaysHorizontalScrollbar"
defs["enums"]["ImGuiWindowFlags_"][17]["value"] = "1<< 15"
defs["enums"]["ImGuiWindowFlags_"][18] = {}
defs["enums"]["ImGuiWindowFlags_"][18]["calc_value"] = 65536
defs["enums"]["ImGuiWindowFlags_"][18]["comment"] = " // Ensure child windows without border uses style.WindowPadding (ignored by default for non-bordered child windows, because more convenient)"
defs["enums"]["ImGuiWindowFlags_"][18]["name"] = "ImGuiWindowFlags_AlwaysUseWindowPadding"
defs["enums"]["ImGuiWindowFlags_"][18]["value"] = "1 << 16"
defs["enums"]["ImGuiWindowFlags_"][19] = {}
defs["enums"]["ImGuiWindowFlags_"][19]["calc_value"] = 262144
defs["enums"]["ImGuiWindowFlags_"][19]["comment"] = " // No gamepad/keyboard navigation within the window"
defs["enums"]["ImGuiWindowFlags_"][19]["name"] = "ImGuiWindowFlags_NoNavInputs"
defs["enums"]["ImGuiWindowFlags_"][19]["value"] = "1 << 18"
defs["enums"]["ImGuiWindowFlags_"][20] = {}
defs["enums"]["ImGuiWindowFlags_"][20]["calc_value"] = 524288
defs["enums"]["ImGuiWindowFlags_"][20]["comment"] = " // No focusing toward this window with gamepad/keyboard navigation (e.g. skipped by CTRL+TAB)"
defs["enums"]["ImGuiWindowFlags_"][20]["name"] = "ImGuiWindowFlags_NoNavFocus"
defs["enums"]["ImGuiWindowFlags_"][20]["value"] = "1 << 19"
defs["enums"]["ImGuiWindowFlags_"][21] = {}
defs["enums"]["ImGuiWindowFlags_"][21]["calc_value"] = 1048576
defs["enums"]["ImGuiWindowFlags_"][21]["comment"] = " // Append '*' to title without affecting the ID, as a convenience to avoid using the ### operator. When used in a tab/docking context, tab is selected on closure and closure is deferred by one frame to allow code to cancel the closure (with a confirmation popup, etc.) without flicker."
defs["enums"]["ImGuiWindowFlags_"][21]["name"] = "ImGuiWindowFlags_UnsavedDocument"
defs["enums"]["ImGuiWindowFlags_"][21]["value"] = "1 << 20"
defs["enums"]["ImGuiWindowFlags_"][22] = {}
defs["enums"]["ImGuiWindowFlags_"][22]["calc_value"] = 2097152
defs["enums"]["ImGuiWindowFlags_"][22]["comment"] = " // Disable docking of this window"
defs["enums"]["ImGuiWindowFlags_"][22]["name"] = "ImGuiWindowFlags_NoDocking"
defs["enums"]["ImGuiWindowFlags_"][22]["value"] = "1 << 21"
defs["enums"]["ImGuiWindowFlags_"][23] = {}
defs["enums"]["ImGuiWindowFlags_"][23]["calc_value"] = 786432
defs["enums"]["ImGuiWindowFlags_"][23]["name"] = "ImGuiWindowFlags_NoNav"
defs["enums"]["ImGuiWindowFlags_"][23]["value"] = "ImGuiWindowFlags_NoNavInputs | ImGuiWindowFlags_NoNavFocus"
defs["enums"]["ImGuiWindowFlags_"][24] = {}
defs["enums"]["ImGuiWindowFlags_"][24]["calc_value"] = 43
defs["enums"]["ImGuiWindowFlags_"][24]["name"] = "ImGuiWindowFlags_NoDecoration"
defs["enums"]["ImGuiWindowFlags_"][24]["value"] = "ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoScrollbar | ImGuiWindowFlags_NoCollapse"
defs["enums"]["ImGuiWindowFlags_"][25] = {}
defs["enums"]["ImGuiWindowFlags_"][25]["calc_value"] = 786944
defs["enums"]["ImGuiWindowFlags_"][25]["name"] = "ImGuiWindowFlags_NoInputs"
defs["enums"]["ImGuiWindowFlags_"][25]["value"] = "ImGuiWindowFlags_NoMouseInputs | ImGuiWindowFlags_NoNavInputs | ImGuiWindowFlags_NoNavFocus"
defs["enums"]["ImGuiWindowFlags_"][26] = {}
defs["enums"]["ImGuiWindowFlags_"][26]["calc_value"] = 8388608
defs["enums"]["ImGuiWindowFlags_"][26]["comment"] = " // [BETA] Allow gamepad/keyboard navigation to cross over parent border to this child (only use on child that have no scrolling!)"
defs["enums"]["ImGuiWindowFlags_"][26]["name"] = "ImGuiWindowFlags_NavFlattened"
defs["enums"]["ImGuiWindowFlags_"][26]["value"] = "1 << 23"
defs["enums"]["ImGuiWindowFlags_"][27] = {}
defs["enums"]["ImGuiWindowFlags_"][27]["calc_value"] = 16777216
defs["enums"]["ImGuiWindowFlags_"][27]["comment"] = " // Don't use! For internal use by BeginChild()"
defs["enums"]["ImGuiWindowFlags_"][27]["name"] = "ImGuiWindowFlags_ChildWindow"
defs["enums"]["ImGuiWindowFlags_"][27]["value"] = "1 << 24"
defs["enums"]["ImGuiWindowFlags_"][28] = {}
defs["enums"]["ImGuiWindowFlags_"][28]["calc_value"] = 33554432
defs["enums"]["ImGuiWindowFlags_"][28]["comment"] = " // Don't use! For internal use by BeginTooltip()"
defs["enums"]["ImGuiWindowFlags_"][28]["name"] = "ImGuiWindowFlags_Tooltip"
defs["enums"]["ImGuiWindowFlags_"][28]["value"] = "1 << 25"
defs["enums"]["ImGuiWindowFlags_"][29] = {}
defs["enums"]["ImGuiWindowFlags_"][29]["calc_value"] = 67108864
defs["enums"]["ImGuiWindowFlags_"][29]["comment"] = " // Don't use! For internal use by BeginPopup()"
defs["enums"]["ImGuiWindowFlags_"][29]["name"] = "ImGuiWindowFlags_Popup"
defs["enums"]["ImGuiWindowFlags_"][29]["value"] = "1 << 26"
defs["enums"]["ImGuiWindowFlags_"][30] = {}
defs["enums"]["ImGuiWindowFlags_"][30]["calc_value"] = 134217728
defs["enums"]["ImGuiWindowFlags_"][30]["comment"] = " // Don't use! For internal use by BeginPopupModal()"
defs["enums"]["ImGuiWindowFlags_"][30]["name"] = "ImGuiWindowFlags_Modal"
defs["enums"]["ImGuiWindowFlags_"][30]["value"] = "1 << 27"
defs["enums"]["ImGuiWindowFlags_"][31] = {}
defs["enums"]["ImGuiWindowFlags_"][31]["calc_value"] = 268435456
defs["enums"]["ImGuiWindowFlags_"][31]["comment"] = " // Don't use! For internal use by BeginMenu()"
defs["enums"]["ImGuiWindowFlags_"][31]["name"] = "ImGuiWindowFlags_ChildMenu"
defs["enums"]["ImGuiWindowFlags_"][31]["value"] = "1 << 28"
defs["enums"]["ImGuiWindowFlags_"][32] = {}
defs["enums"]["ImGuiWindowFlags_"][32]["calc_value"] = 536870912
defs["enums"]["ImGuiWindowFlags_"][32]["comment"] = " // Don't use! For internal use by Begin()/NewFrame()"
defs["enums"]["ImGuiWindowFlags_"][32]["name"] = "ImGuiWindowFlags_DockNodeHost"
defs["enums"]["ImGuiWindowFlags_"][32]["value"] = "1 << 29"
defs["locations"] = {}
defs["locations"]["ImBitVector"] = "imgui_internal:480"
defs["locations"]["ImColor"] = "imgui:2031"
defs["locations"]["ImDrawChannel"] = "imgui:2117"
defs["locations"]["ImDrawCmd"] = "imgui:2080"
defs["locations"]["ImDrawCornerFlags_"] = "imgui:2140"
defs["locations"]["ImDrawData"] = "imgui:2287"
defs["locations"]["ImDrawDataBuilder"] = "imgui_internal:573"
defs["locations"]["ImDrawList"] = "imgui:2173"
defs["locations"]["ImDrawListFlags_"] = "imgui:2156"
defs["locations"]["ImDrawListSharedData"] = "imgui_internal:554"
defs["locations"]["ImDrawListSplitter"] = "imgui:2125"
defs["locations"]["ImDrawVert"] = "imgui:2102"
defs["locations"]["ImFont"] = "imgui:2499"
defs["locations"]["ImFontAtlas"] = "imgui:2404"
defs["locations"]["ImFontAtlasCustomRect"] = "imgui:2366"
defs["locations"]["ImFontAtlasFlags_"] = "imgui:2379"
defs["locations"]["ImFontConfig"] = "imgui:2311"
defs["locations"]["ImFontGlyph"] = "imgui:2340"
defs["locations"]["ImFontGlyphRangesBuilder"] = "imgui:2351"
defs["locations"]["ImGuiAxis"] = "imgui_internal:709"
defs["locations"]["ImGuiBackendFlags_"] = "imgui:1192"
defs["locations"]["ImGuiButtonFlagsPrivate_"] = "imgui_internal:624"
defs["locations"]["ImGuiButtonFlags_"] = "imgui:1310"
defs["locations"]["ImGuiCol_"] = "imgui:1207"
defs["locations"]["ImGuiColorEditFlags_"] = "imgui:1323"
defs["locations"]["ImGuiColorMod"] = "imgui_internal:814"
defs["locations"]["ImGuiColumnData"] = "imgui_internal:1013"
defs["locations"]["ImGuiColumns"] = "imgui_internal:1023"
defs["locations"]["ImGuiColumnsFlags_"] = "imgui_internal:1002"
defs["locations"]["ImGuiComboFlags_"] = "imgui:961"
defs["locations"]["ImGuiCond_"] = "imgui:1415"
defs["locations"]["ImGuiConfigFlags_"] = "imgui:1167"
defs["locations"]["ImGuiContext"] = "imgui_internal:1262"
defs["locations"]["ImGuiDataAuthority_"] = "imgui_internal:1097"
defs["locations"]["ImGuiDataTypeInfo"] = "imgui_internal:798"
defs["locations"]["ImGuiDataTypePrivate_"] = "imgui_internal:806"
defs["locations"]["ImGuiDataTypeTempStorage"] = "imgui_internal:792"
defs["locations"]["ImGuiDataType_"] = "imgui:1067"
defs["locations"]["ImGuiDir_"] = "imgui:1083"
defs["locations"]["ImGuiDockContext"] = "imgui_internal:1169"
defs["locations"]["ImGuiDockNode"] = "imgui_internal:1113"
defs["locations"]["ImGuiDockNodeFlagsPrivate_"] = "imgui_internal:1073"
defs["locations"]["ImGuiDockNodeFlags_"] = "imgui:1032"
defs["locations"]["ImGuiDockNodeState"] = "imgui_internal:1104"
defs["locations"]["ImGuiDragDropFlags_"] = "imgui:1045"
defs["locations"]["ImGuiFocusedFlags_"] = "imgui:1002"
defs["locations"]["ImGuiGroupData"] = "imgui_internal:831"
defs["locations"]["ImGuiHoveredFlags_"] = "imgui:1014"
defs["locations"]["ImGuiIO"] = "imgui:1568"
defs["locations"]["ImGuiInputReadMode"] = "imgui_internal:733"
defs["locations"]["ImGuiInputSource"] = "imgui_internal:722"
defs["locations"]["ImGuiInputTextCallbackData"] = "imgui:1725"
defs["locations"]["ImGuiInputTextFlags_"] = "imgui:879"
defs["locations"]["ImGuiInputTextState"] = "imgui_internal:859"
defs["locations"]["ImGuiItemFlags_"] = "imgui_internal:588"
defs["locations"]["ImGuiItemStatusFlags_"] = "imgui_internal:603"
defs["locations"]["ImGuiKeyModFlags_"] = "imgui:1122"
defs["locations"]["ImGuiKey_"] = "imgui:1094"
defs["locations"]["ImGuiLastItemDataBackup"] = "imgui_internal:1877"
defs["locations"]["ImGuiLayoutType_"] = "imgui_internal:693"
defs["locations"]["ImGuiListClipper"] = "imgui:1987"
defs["locations"]["ImGuiLogType"] = "imgui_internal:699"
defs["locations"]["ImGuiMenuColumns"] = "imgui_internal:845"
defs["locations"]["ImGuiMouseButton_"] = "imgui:1382"
defs["locations"]["ImGuiMouseCursor_"] = "imgui:1392"
defs["locations"]["ImGuiNavDirSourceFlags_"] = "imgui_internal:752"
defs["locations"]["ImGuiNavForward"] = "imgui_internal:772"
defs["locations"]["ImGuiNavHighlightFlags_"] = "imgui_internal:743"
defs["locations"]["ImGuiNavInput_"] = "imgui:1135"
defs["locations"]["ImGuiNavLayer"] = "imgui_internal:779"
defs["locations"]["ImGuiNavMoveFlags_"] = "imgui_internal:760"
defs["locations"]["ImGuiNavMoveResult"] = "imgui_internal:906"
defs["locations"]["ImGuiNextItemData"] = "imgui_internal:971"
defs["locations"]["ImGuiNextItemDataFlags_"] = "imgui_internal:964"
defs["locations"]["ImGuiNextWindowData"] = "imgui_internal:937"
defs["locations"]["ImGuiNextWindowDataFlags_"] = "imgui_internal:920"
defs["locations"]["ImGuiOnceUponAFrame"] = "imgui:1869"
defs["locations"]["ImGuiPayload"] = "imgui:1784"
defs["locations"]["ImGuiPlatformIO"] = "imgui:2601"
defs["locations"]["ImGuiPlatformMonitor"] = "imgui:2666"
defs["locations"]["ImGuiPlotType"] = "imgui_internal:716"
defs["locations"]["ImGuiPopupData"] = "imgui_internal:893"
defs["locations"]["ImGuiPopupFlags_"] = "imgui:934"
defs["locations"]["ImGuiPopupPositionPolicy"] = "imgui_internal:786"
defs["locations"]["ImGuiPtrOrIndex"] = "imgui_internal:989"
defs["locations"]["ImGuiSelectableFlagsPrivate_"] = "imgui_internal:654"
defs["locations"]["ImGuiSelectableFlags_"] = "imgui:950"
defs["locations"]["ImGuiSeparatorFlags_"] = "imgui_internal:671"
defs["locations"]["ImGuiSettingsHandler"] = "imgui_internal:1243"
defs["locations"]["ImGuiShrinkWidthItem"] = "imgui_internal:983"
defs["locations"]["ImGuiSizeCallbackData"] = "imgui:1754"
defs["locations"]["ImGuiSliderFlagsPrivate_"] = "imgui_internal:647"
defs["locations"]["ImGuiSliderFlags_"] = "imgui:1370"
defs["locations"]["ImGuiStorage"] = "imgui:1931"
defs["locations"]["ImGuiStoragePair"] = "imgui:1934"
defs["locations"]["ImGuiStyle"] = "imgui:1516"
defs["locations"]["ImGuiStyleMod"] = "imgui_internal:821"
defs["locations"]["ImGuiStyleVar_"] = "imgui:1275"
defs["locations"]["ImGuiTabBar"] = "imgui_internal:1927"
defs["locations"]["ImGuiTabBarFlagsPrivate_"] = "imgui_internal:1894"
defs["locations"]["ImGuiTabBarFlags_"] = "imgui:975"
defs["locations"]["ImGuiTabItem"] = "imgui_internal:1910"
defs["locations"]["ImGuiTabItemFlagsPrivate_"] = "imgui_internal:1902"
defs["locations"]["ImGuiTabItemFlags_"] = "imgui:991"
defs["locations"]["ImGuiTextBuffer"] = "imgui:1904"
defs["locations"]["ImGuiTextFilter"] = "imgui:1877"
defs["locations"]["ImGuiTextFlags_"] = "imgui_internal:679"
defs["locations"]["ImGuiTextRange"] = "imgui:1887"
defs["locations"]["ImGuiTooltipFlags_"] = "imgui_internal:685"
defs["locations"]["ImGuiTreeNodeFlagsPrivate_"] = "imgui_internal:666"
defs["locations"]["ImGuiTreeNodeFlags_"] = "imgui:907"
defs["locations"]["ImGuiViewport"] = "imgui:2693"
defs["locations"]["ImGuiViewportFlags_"] = "imgui:2675"
defs["locations"]["ImGuiViewportP"] = "imgui_internal:1188"
defs["locations"]["ImGuiWindow"] = "imgui_internal:1747"
defs["locations"]["ImGuiWindowClass"] = "imgui:1769"
defs["locations"]["ImGuiWindowFlags_"] = "imgui:835"
defs["locations"]["ImGuiWindowSettings"] = "imgui_internal:1226"
defs["locations"]["ImGuiWindowTempData"] = "imgui_internal:1655"
defs["locations"]["ImRect"] = "imgui_internal:427"
defs["locations"]["ImVec1"] = "imgui_internal:409"
defs["locations"]["ImVec2"] = "imgui:220"
defs["locations"]["ImVec2ih"] = "imgui_internal:417"
defs["locations"]["ImVec4"] = "imgui:233"
defs["locations"]["STB_TexteditState"] = "imstb_textedit:362"
defs["locations"]["StbTexteditRow"] = "imstb_textedit:362"
defs["locations"]["StbUndoRecord"] = "imstb_textedit:362"
defs["locations"]["StbUndoState"] = "imstb_textedit:362"
defs["structs"] = {}
defs["structs"]["ImBitVector"] = {}
defs["structs"]["ImBitVector"][1] = {}
defs["structs"]["ImBitVector"][1]["name"] = "Storage"
defs["structs"]["ImBitVector"][1]["template_type"] = "ImU32"
defs["structs"]["ImBitVector"][1]["type"] = "ImVector_ImU32"
defs["structs"]["ImColor"] = {}
defs["structs"]["ImColor"][1] = {}
defs["structs"]["ImColor"][1]["name"] = "Value"
defs["structs"]["ImColor"][1]["type"] = "ImVec4"
defs["structs"]["ImDrawChannel"] = {}
defs["structs"]["ImDrawChannel"][1] = {}
defs["structs"]["ImDrawChannel"][1]["name"] = "_CmdBuffer"
defs["structs"]["ImDrawChannel"][1]["template_type"] = "ImDrawCmd"
defs["structs"]["ImDrawChannel"][1]["type"] = "ImVector_ImDrawCmd"
defs["structs"]["ImDrawChannel"][2] = {}
defs["structs"]["ImDrawChannel"][2]["name"] = "_IdxBuffer"
defs["structs"]["ImDrawChannel"][2]["template_type"] = "ImDrawIdx"
defs["structs"]["ImDrawChannel"][2]["type"] = "ImVector_ImDrawIdx"
defs["structs"]["ImDrawCmd"] = {}
defs["structs"]["ImDrawCmd"][1] = {}
defs["structs"]["ImDrawCmd"][1]["comment"] = " // 4    // Start offset in vertex buffer. ImGuiBackendFlags_RendererHasVtxOffset: always 0, otherwise may be >0 to support meshes larger than 64K vertices with 16-bit indices."
defs["structs"]["ImDrawCmd"][1]["name"] = "ClipRect"
defs["structs"]["ImDrawCmd"][1]["type"] = "ImVec4"
defs["structs"]["ImDrawCmd"][2] = {}
defs["structs"]["ImDrawCmd"][2]["comment"] = " // 4    // Start offset in index buffer. Always equal to sum of ElemCount drawn so far."
defs["structs"]["ImDrawCmd"][2]["name"] = "TextureId"
defs["structs"]["ImDrawCmd"][2]["type"] = "ImTextureID"
defs["structs"]["ImDrawCmd"][3] = {}
defs["structs"]["ImDrawCmd"][3]["comment"] = " // 4    // Number of indices (multiple of 3) to be rendered as triangles. Vertices are stored in the callee ImDrawList's vtx_buffer[] array, indices in idx_buffer[]."
defs["structs"]["ImDrawCmd"][3]["name"] = "VtxOffset"
defs["structs"]["ImDrawCmd"][3]["type"] = "unsigned int"
defs["structs"]["ImDrawCmd"][4] = {}
defs["structs"]["ImDrawCmd"][4]["comment"] = " // 4-8  // If != NULL, call the function instead of rendering the vertices. clip_rect and texture_id will be set normally."
defs["structs"]["ImDrawCmd"][4]["name"] = "IdxOffset"
defs["structs"]["ImDrawCmd"][4]["type"] = "unsigned int"
defs["structs"]["ImDrawCmd"][5] = {}
defs["structs"]["ImDrawCmd"][5]["comment"] = " // 4-8  // The draw callback code can access this."
defs["structs"]["ImDrawCmd"][5]["name"] = "ElemCount"
defs["structs"]["ImDrawCmd"][5]["type"] = "unsigned int"
defs["structs"]["ImDrawCmd"][6] = {}
defs["structs"]["ImDrawCmd"][6]["name"] = "UserCallback"
defs["structs"]["ImDrawCmd"][6]["type"] = "ImDrawCallback"
defs["structs"]["ImDrawCmd"][7] = {}
defs["structs"]["ImDrawCmd"][7]["name"] = "UserCallbackData"
defs["structs"]["ImDrawCmd"][7]["type"] = "void*"
defs["structs"]["ImDrawData"] = {}
defs["structs"]["ImDrawData"][1] = {}
defs["structs"]["ImDrawData"][1]["comment"] = " // Number of ImDrawList* to render"
defs["structs"]["ImDrawData"][1]["name"] = "Valid"
defs["structs"]["ImDrawData"][1]["type"] = "bool"
defs["structs"]["ImDrawData"][2] = {}
defs["structs"]["ImDrawData"][2]["comment"] = " // For convenience, sum of all ImDrawList's IdxBuffer.Size"
defs["structs"]["ImDrawData"][2]["name"] = "CmdLists"
defs["structs"]["ImDrawData"][2]["type"] = "ImDrawList**"
defs["structs"]["ImDrawData"][3] = {}
defs["structs"]["ImDrawData"][3]["comment"] = " // For convenience, sum of all ImDrawList's VtxBuffer.Size"
defs["structs"]["ImDrawData"][3]["name"] = "CmdListsCount"
defs["structs"]["ImDrawData"][3]["type"] = "int"
defs["structs"]["ImDrawData"][4] = {}
defs["structs"]["ImDrawData"][4]["comment"] = " // Upper-left position of the viewport to render (== upper-left of the orthogonal projection matrix to use)"
defs["structs"]["ImDrawData"][4]["name"] = "TotalIdxCount"
defs["structs"]["ImDrawData"][4]["type"] = "int"
defs["structs"]["ImDrawData"][5] = {}
defs["structs"]["ImDrawData"][5]["comment"] = " // Size of the viewport to render (== io.DisplaySize for the main viewport) (DisplayPos + DisplaySize == lower-right of the orthogonal projection matrix to use)"
defs["structs"]["ImDrawData"][5]["name"] = "TotalVtxCount"
defs["structs"]["ImDrawData"][5]["type"] = "int"
defs["structs"]["ImDrawData"][6] = {}
defs["structs"]["ImDrawData"][6]["comment"] = " // Amount of pixels for each unit of DisplaySize. Based on io.DisplayFramebufferScale. Generally (1,1) on normal display, (2,2) on OSX with Retina display."
defs["structs"]["ImDrawData"][6]["name"] = "DisplayPos"
defs["structs"]["ImDrawData"][6]["type"] = "ImVec2"
defs["structs"]["ImDrawData"][7] = {}
defs["structs"]["ImDrawData"][7]["comment"] = " // Viewport carrying the ImDrawData instance, might be of use to the renderer (generally not)."
defs["structs"]["ImDrawData"][7]["name"] = "DisplaySize"
defs["structs"]["ImDrawData"][7]["type"] = "ImVec2"
defs["structs"]["ImDrawData"][8] = {}
defs["structs"]["ImDrawData"][8]["name"] = "FramebufferScale"
defs["structs"]["ImDrawData"][8]["type"] = "ImVec2"
defs["structs"]["ImDrawData"][9] = {}
defs["structs"]["ImDrawData"][9]["name"] = "OwnerViewport"
defs["structs"]["ImDrawData"][9]["type"] = "ImGuiViewport*"
defs["structs"]["ImDrawDataBuilder"] = {}
defs["structs"]["ImDrawDataBuilder"][1] = {}
defs["structs"]["ImDrawDataBuilder"][1]["name"] = "Layers[2]"
defs["structs"]["ImDrawDataBuilder"][1]["size"] = 2
defs["structs"]["ImDrawDataBuilder"][1]["template_type"] = "ImDrawList*"
defs["structs"]["ImDrawDataBuilder"][1]["type"] = "ImVector_ImDrawListPtr"
defs["structs"]["ImDrawList"] = {}
defs["structs"]["ImDrawList"][1] = {}
defs["structs"]["ImDrawList"][1]["comment"] = " // Vertex buffer."
defs["structs"]["ImDrawList"][1]["name"] = "CmdBuffer"
defs["structs"]["ImDrawList"][1]["template_type"] = "ImDrawCmd"
defs["structs"]["ImDrawList"][1]["type"] = "ImVector_ImDrawCmd"
defs["structs"]["ImDrawList"][2] = {}
defs["structs"]["ImDrawList"][2]["comment"] = " // Flags, you may poke into these to adjust anti-aliasing settings per-primitive."
defs["structs"]["ImDrawList"][2]["name"] = "IdxBuffer"
defs["structs"]["ImDrawList"][2]["template_type"] = "ImDrawIdx"
defs["structs"]["ImDrawList"][2]["type"] = "ImVector_ImDrawIdx"
defs["structs"]["ImDrawList"][3] = {}
defs["structs"]["ImDrawList"][3]["comment"] = " // Pointer to shared draw data (you can use ImGui::GetDrawListSharedData() to get the one from current ImGui context)"
defs["structs"]["ImDrawList"][3]["name"] = "VtxBuffer"
defs["structs"]["ImDrawList"][3]["template_type"] = "ImDrawVert"
defs["structs"]["ImDrawList"][3]["type"] = "ImVector_ImDrawVert"
defs["structs"]["ImDrawList"][4] = {}
defs["structs"]["ImDrawList"][4]["comment"] = " // Pointer to owner window's name for debugging"
defs["structs"]["ImDrawList"][4]["name"] = "Flags"
defs["structs"]["ImDrawList"][4]["type"] = "ImDrawListFlags"
defs["structs"]["ImDrawList"][5] = {}
defs["structs"]["ImDrawList"][5]["comment"] = " // [Internal] Generally == VtxBuffer.Size unless we are past 64K vertices, in which case this gets reset to 0."
defs["structs"]["ImDrawList"][5]["name"] = "_Data"
defs["structs"]["ImDrawList"][5]["type"] = "const ImDrawListSharedData*"
defs["structs"]["ImDrawList"][6] = {}
defs["structs"]["ImDrawList"][6]["comment"] = " // [Internal] point within VtxBuffer.Data after each add command (to avoid using the ImVector<> operators too much)"
defs["structs"]["ImDrawList"][6]["name"] = "_OwnerName"
defs["structs"]["ImDrawList"][6]["type"] = "const char*"
defs["structs"]["ImDrawList"][7] = {}
defs["structs"]["ImDrawList"][7]["comment"] = " // [Internal] point within IdxBuffer.Data after each add command (to avoid using the ImVector<> operators too much)"
defs["structs"]["ImDrawList"][7]["name"] = "_VtxCurrentIdx"
defs["structs"]["ImDrawList"][7]["type"] = "unsigned int"
defs["structs"]["ImDrawList"][8] = {}
defs["structs"]["ImDrawList"][8]["comment"] = " // [Internal]"
defs["structs"]["ImDrawList"][8]["name"] = "_VtxWritePtr"
defs["structs"]["ImDrawList"][8]["type"] = "ImDrawVert*"
defs["structs"]["ImDrawList"][9] = {}
defs["structs"]["ImDrawList"][9]["comment"] = " // [Internal]"
defs["structs"]["ImDrawList"][9]["name"] = "_IdxWritePtr"
defs["structs"]["ImDrawList"][9]["type"] = "ImDrawIdx*"
defs["structs"]["ImDrawList"][10] = {}
defs["structs"]["ImDrawList"][10]["comment"] = " // [Internal] current path building"
defs["structs"]["ImDrawList"][10]["name"] = "_ClipRectStack"
defs["structs"]["ImDrawList"][10]["template_type"] = "ImVec4"
defs["structs"]["ImDrawList"][10]["type"] = "ImVector_ImVec4"
defs["structs"]["ImDrawList"][11] = {}
defs["structs"]["ImDrawList"][11]["comment"] = " // [Internal] Template of active commands. Fields should match those of CmdBuffer.back()."
defs["structs"]["ImDrawList"][11]["name"] = "_TextureIdStack"
defs["structs"]["ImDrawList"][11]["template_type"] = "ImTextureID"
defs["structs"]["ImDrawList"][11]["type"] = "ImVector_ImTextureID"
defs["structs"]["ImDrawList"][12] = {}
defs["structs"]["ImDrawList"][12]["comment"] = " // [Internal] for channels api (note: prefer using your own persistent instance of ImDrawListSplitter!)"
defs["structs"]["ImDrawList"][12]["name"] = "_Path"
defs["structs"]["ImDrawList"][12]["template_type"] = "ImVec2"
defs["structs"]["ImDrawList"][12]["type"] = "ImVector_ImVec2"
defs["structs"]["ImDrawList"][13] = {}
defs["structs"]["ImDrawList"][13]["name"] = "_CmdHeader"
defs["structs"]["ImDrawList"][13]["type"] = "ImDrawCmd"
defs["structs"]["ImDrawList"][14] = {}
defs["structs"]["ImDrawList"][14]["name"] = "_Splitter"
defs["structs"]["ImDrawList"][14]["type"] = "ImDrawListSplitter"
defs["structs"]["ImDrawListSharedData"] = {}
defs["structs"]["ImDrawListSharedData"][1] = {}
defs["structs"]["ImDrawListSharedData"][1]["comment"] = " // Current/default font size (optional, for simplified AddText overload)"
defs["structs"]["ImDrawListSharedData"][1]["name"] = "TexUvWhitePixel"
defs["structs"]["ImDrawListSharedData"][1]["type"] = "ImVec2"
defs["structs"]["ImDrawListSharedData"][2] = {}
defs["structs"]["ImDrawListSharedData"][2]["comment"] = " // Tessellation tolerance when using PathBezierCurveTo()"
defs["structs"]["ImDrawListSharedData"][2]["name"] = "Font"
defs["structs"]["ImDrawListSharedData"][2]["type"] = "ImFont*"
defs["structs"]["ImDrawListSharedData"][3] = {}
defs["structs"]["ImDrawListSharedData"][3]["comment"] = " // Number of circle segments to use per pixel of radius for AddCircle() etc"
defs["structs"]["ImDrawListSharedData"][3]["name"] = "FontSize"
defs["structs"]["ImDrawListSharedData"][3]["type"] = "float"
defs["structs"]["ImDrawListSharedData"][4] = {}
defs["structs"]["ImDrawListSharedData"][4]["comment"] = " // Value for PushClipRectFullscreen()"
defs["structs"]["ImDrawListSharedData"][4]["name"] = "CurveTessellationTol"
defs["structs"]["ImDrawListSharedData"][4]["type"] = "float"
defs["structs"]["ImDrawListSharedData"][5] = {}
defs["structs"]["ImDrawListSharedData"][5]["comment"] = " // Initial flags at the beginning of the frame (it is possible to alter flags on a per-drawlist basis afterwards)"
defs["structs"]["ImDrawListSharedData"][5]["name"] = "CircleSegmentMaxError"
defs["structs"]["ImDrawListSharedData"][5]["type"] = "float"
defs["structs"]["ImDrawListSharedData"][6] = {}
defs["structs"]["ImDrawListSharedData"][6]["comment"] = " // FIXME: Bake rounded corners fill/borders in atlas"
defs["structs"]["ImDrawListSharedData"][6]["name"] = "ClipRectFullscreen"
defs["structs"]["ImDrawListSharedData"][6]["type"] = "ImVec4"
defs["structs"]["ImDrawListSharedData"][7] = {}
defs["structs"]["ImDrawListSharedData"][7]["comment"] = " // Precomputed segment count for given radius (array index + 1) before we calculate it dynamically (to avoid calculation overhead)"
defs["structs"]["ImDrawListSharedData"][7]["name"] = "InitialFlags"
defs["structs"]["ImDrawListSharedData"][7]["type"] = "ImDrawListFlags"
defs["structs"]["ImDrawListSharedData"][8] = {}
defs["structs"]["ImDrawListSharedData"][8]["comment"] = " // UV of anti-aliased lines in the atlas"
defs["structs"]["ImDrawListSharedData"][8]["name"] = "ArcFastVtx[12*1]"
defs["structs"]["ImDrawListSharedData"][8]["size"] = 12
defs["structs"]["ImDrawListSharedData"][8]["type"] = "ImVec2"
defs["structs"]["ImDrawListSharedData"][9] = {}
defs["structs"]["ImDrawListSharedData"][9]["name"] = "CircleSegmentCounts[64]"
defs["structs"]["ImDrawListSharedData"][9]["size"] = 64
defs["structs"]["ImDrawListSharedData"][9]["type"] = "ImU8"
defs["structs"]["ImDrawListSharedData"][10] = {}
defs["structs"]["ImDrawListSharedData"][10]["name"] = "TexUvLines"
defs["structs"]["ImDrawListSharedData"][10]["type"] = "const ImVec4*"
defs["structs"]["ImDrawListSplitter"] = {}
defs["structs"]["ImDrawListSplitter"][1] = {}
defs["structs"]["ImDrawListSplitter"][1]["comment"] = " // Draw channels (not resized down so _Count might be < Channels.Size)"
defs["structs"]["ImDrawListSplitter"][1]["name"] = "_Current"
defs["structs"]["ImDrawListSplitter"][1]["type"] = "int"
defs["structs"]["ImDrawListSplitter"][2] = {}
defs["structs"]["ImDrawListSplitter"][2]["name"] = "_Count"
defs["structs"]["ImDrawListSplitter"][2]["type"] = "int"
defs["structs"]["ImDrawListSplitter"][3] = {}
defs["structs"]["ImDrawListSplitter"][3]["name"] = "_Channels"
defs["structs"]["ImDrawListSplitter"][3]["template_type"] = "ImDrawChannel"
defs["structs"]["ImDrawListSplitter"][3]["type"] = "ImVector_ImDrawChannel"
defs["structs"]["ImDrawVert"] = {}
defs["structs"]["ImDrawVert"][1] = {}
defs["structs"]["ImDrawVert"][1]["name"] = "pos"
defs["structs"]["ImDrawVert"][1]["type"] = "ImVec2"
defs["structs"]["ImDrawVert"][2] = {}
defs["structs"]["ImDrawVert"][2]["name"] = "uv"
defs["structs"]["ImDrawVert"][2]["type"] = "ImVec2"
defs["structs"]["ImDrawVert"][3] = {}
defs["structs"]["ImDrawVert"][3]["name"] = "col"
defs["structs"]["ImDrawVert"][3]["type"] = "ImU32"
defs["structs"]["ImFont"] = {}
defs["structs"]["ImFont"][1] = {}
defs["structs"]["ImFont"][1]["comment"] = " // 4     // in  //            // Height of characters/line, set during loading (don't change after loading)"
defs["structs"]["ImFont"][1]["name"] = "IndexAdvanceX"
defs["structs"]["ImFont"][1]["template_type"] = "float"
defs["structs"]["ImFont"][1]["type"] = "ImVector_float"
defs["structs"]["ImFont"][2] = {}
defs["structs"]["ImFont"][2]["comment"] = " // 12-16 // out //            // Sparse. Index glyphs by Unicode code-point."
defs["structs"]["ImFont"][2]["name"] = "FallbackAdvanceX"
defs["structs"]["ImFont"][2]["type"] = "float"
defs["structs"]["ImFont"][3] = {}
defs["structs"]["ImFont"][3]["comment"] = " // 12-16 // out //            // All glyphs."
defs["structs"]["ImFont"][3]["name"] = "FontSize"
defs["structs"]["ImFont"][3]["type"] = "float"
defs["structs"]["ImFont"][4] = {}
defs["structs"]["ImFont"][4]["comment"] = " // 4-8   // out // = FindGlyph(FontFallbackChar)"
defs["structs"]["ImFont"][4]["name"] = "IndexLookup"
defs["structs"]["ImFont"][4]["template_type"] = "ImWchar"
defs["structs"]["ImFont"][4]["type"] = "ImVector_ImWchar"
defs["structs"]["ImFont"][5] = {}
defs["structs"]["ImFont"][5]["comment"] = " // 8     // in  // = (0,0)    // Offset font rendering by xx pixels"
defs["structs"]["ImFont"][5]["name"] = "Glyphs"
defs["structs"]["ImFont"][5]["template_type"] = "ImFontGlyph"
defs["structs"]["ImFont"][5]["type"] = "ImVector_ImFontGlyph"
defs["structs"]["ImFont"][6] = {}
defs["structs"]["ImFont"][6]["comment"] = " // 4-8   // out //            // What we has been loaded into"
defs["structs"]["ImFont"][6]["name"] = "FallbackGlyph"
defs["structs"]["ImFont"][6]["type"] = "const ImFontGlyph*"
defs["structs"]["ImFont"][7] = {}
defs["structs"]["ImFont"][7]["comment"] = " // 4-8   // in  //            // Pointer within ContainerAtlas->ConfigData"
defs["structs"]["ImFont"][7]["name"] = "DisplayOffset"
defs["structs"]["ImFont"][7]["type"] = "ImVec2"
defs["structs"]["ImFont"][8] = {}
defs["structs"]["ImFont"][8]["comment"] = " // 2     // in  // ~ 1        // Number of ImFontConfig involved in creating this font. Bigger than 1 when merging multiple font sources into one ImFont."
defs["structs"]["ImFont"][8]["name"] = "ContainerAtlas"
defs["structs"]["ImFont"][8]["type"] = "ImFontAtlas*"
defs["structs"]["ImFont"][9] = {}
defs["structs"]["ImFont"][9]["comment"] = " // 2     // in  // = '?'      // Replacement character if a glyph isn't found. Only set via SetFallbackChar()"
defs["structs"]["ImFont"][9]["name"] = "ConfigData"
defs["structs"]["ImFont"][9]["type"] = "const ImFontConfig*"
defs["structs"]["ImFont"][10] = {}
defs["structs"]["ImFont"][10]["comment"] = " // 2     // out // = -1       // Character used for ellipsis rendering."
defs["structs"]["ImFont"][10]["name"] = "ConfigDataCount"
defs["structs"]["ImFont"][10]["type"] = "short"
defs["structs"]["ImFont"][11] = {}
defs["structs"]["ImFont"][11]["comment"] = " // 1     // out //"
defs["structs"]["ImFont"][11]["name"] = "FallbackChar"
defs["structs"]["ImFont"][11]["type"] = "ImWchar"
defs["structs"]["ImFont"][12] = {}
defs["structs"]["ImFont"][12]["comment"] = " // 4     // in  // = 1.f      // Base font scale, multiplied by the per-window font scale which you can adjust with SetWindowFontScale()"
defs["structs"]["ImFont"][12]["name"] = "EllipsisChar"
defs["structs"]["ImFont"][12]["type"] = "ImWchar"
defs["structs"]["ImFont"][13] = {}
defs["structs"]["ImFont"][13]["comment"] = " // 4+4   // out //            // Ascent: distance from top to bottom of e.g. 'A' [0..FontSize]"
defs["structs"]["ImFont"][13]["name"] = "DirtyLookupTables"
defs["structs"]["ImFont"][13]["type"] = "bool"
defs["structs"]["ImFont"][14] = {}
defs["structs"]["ImFont"][14]["comment"] = "// 4     // out //            // Total surface in pixels to get an idea of the font rasterization/texture cost (not exact, we approximate the cost of padding between glyphs)"
defs["structs"]["ImFont"][14]["name"] = "Scale"
defs["structs"]["ImFont"][14]["type"] = "float"
defs["structs"]["ImFont"][15] = {}
defs["structs"]["ImFont"][15]["comment"] = " // 2 bytes if ImWchar=ImWchar16, 34 bytes if ImWchar==ImWchar32. Store 1-bit for each block of 4K codepoints that has one active glyph. This is mainly used to facilitate iterations across all used codepoints."
defs["structs"]["ImFont"][15]["name"] = "Ascent"
defs["structs"]["ImFont"][15]["type"] = "float"
defs["structs"]["ImFont"][16] = {}
defs["structs"]["ImFont"][16]["comment"] = " // 2 bytes if ImWchar=ImWchar16, 34 bytes if ImWchar==ImWchar32. Store 1-bit for each block of 4K codepoints that has one active glyph. This is mainly used to facilitate iterations across all used codepoints."
defs["structs"]["ImFont"][16]["name"] = "Descent"
defs["structs"]["ImFont"][16]["type"] = "float"
defs["structs"]["ImFont"][17] = {}
defs["structs"]["ImFont"][17]["name"] = "MetricsTotalSurface"
defs["structs"]["ImFont"][17]["type"] = "int"
defs["structs"]["ImFont"][18] = {}
defs["structs"]["ImFont"][18]["name"] = "Used4kPagesMap[(0xFFFF+1)/4096/8]"
defs["structs"]["ImFont"][18]["size"] = 2
defs["structs"]["ImFont"][18]["type"] = "ImU8"
defs["structs"]["ImFontAtlas"] = {}
defs["structs"]["ImFontAtlas"][1] = {}
defs["structs"]["ImFontAtlas"][1]["comment"] = " // User data to refer to the texture once it has been uploaded to user's graphic systems. It is passed back to you during rendering via the ImDrawCmd structure."
defs["structs"]["ImFontAtlas"][1]["name"] = "Locked"
defs["structs"]["ImFontAtlas"][1]["type"] = "bool"
defs["structs"]["ImFontAtlas"][2] = {}
defs["structs"]["ImFontAtlas"][2]["comment"] = " // Texture width desired by user before Build(). Must be a power-of-two. If have many glyphs your graphics API have texture size restrictions you may want to increase texture width to decrease height."
defs["structs"]["ImFontAtlas"][2]["name"] = "Flags"
defs["structs"]["ImFontAtlas"][2]["type"] = "ImFontAtlasFlags"
defs["structs"]["ImFontAtlas"][3] = {}
defs["structs"]["ImFontAtlas"][3]["comment"] = " // Padding between glyphs within texture in pixels. Defaults to 1. If your rendering method doesn't rely on bilinear filtering you may set this to 0."
defs["structs"]["ImFontAtlas"][3]["name"] = "TexID"
defs["structs"]["ImFontAtlas"][3]["type"] = "ImTextureID"
defs["structs"]["ImFontAtlas"][4] = {}
defs["structs"]["ImFontAtlas"][4]["comment"] = " // 1 component per pixel, each component is unsigned 8-bit. Total size = TexWidth * TexHeight"
defs["structs"]["ImFontAtlas"][4]["name"] = "TexDesiredWidth"
defs["structs"]["ImFontAtlas"][4]["type"] = "int"
defs["structs"]["ImFontAtlas"][5] = {}
defs["structs"]["ImFontAtlas"][5]["comment"] = " // 4 component per pixel, each component is unsigned 8-bit. Total size = TexWidth * TexHeight * 4"
defs["structs"]["ImFontAtlas"][5]["name"] = "TexGlyphPadding"
defs["structs"]["ImFontAtlas"][5]["type"] = "int"
defs["structs"]["ImFontAtlas"][6] = {}
defs["structs"]["ImFontAtlas"][6]["comment"] = " // Texture width calculated during Build()."
defs["structs"]["ImFontAtlas"][6]["name"] = "TexPixelsAlpha8"
defs["structs"]["ImFontAtlas"][6]["type"] = "unsigned char*"
defs["structs"]["ImFontAtlas"][7] = {}
defs["structs"]["ImFontAtlas"][7]["comment"] = " // Texture height calculated during Build()."
defs["structs"]["ImFontAtlas"][7]["name"] = "TexPixelsRGBA32"
defs["structs"]["ImFontAtlas"][7]["type"] = "unsigned int*"
defs["structs"]["ImFontAtlas"][8] = {}
defs["structs"]["ImFontAtlas"][8]["comment"] = " // = (1.0f/TexWidth, 1.0f/TexHeight)"
defs["structs"]["ImFontAtlas"][8]["name"] = "TexWidth"
defs["structs"]["ImFontAtlas"][8]["type"] = "int"
defs["structs"]["ImFontAtlas"][9] = {}
defs["structs"]["ImFontAtlas"][9]["comment"] = " // Texture coordinates to a white pixel"
defs["structs"]["ImFontAtlas"][9]["name"] = "TexHeight"
defs["structs"]["ImFontAtlas"][9]["type"] = "int"
defs["structs"]["ImFontAtlas"][10] = {}
defs["structs"]["ImFontAtlas"][10]["comment"] = " // Hold all the fonts returned by AddFont*. Fonts[0] is the default font upon calling ImGui::NewFrame(), use ImGui::PushFont()/PopFont() to change the current font."
defs["structs"]["ImFontAtlas"][10]["name"] = "TexUvScale"
defs["structs"]["ImFontAtlas"][10]["type"] = "ImVec2"
defs["structs"]["ImFontAtlas"][11] = {}
defs["structs"]["ImFontAtlas"][11]["comment"] = " // Rectangles for packing custom texture data into the atlas."
defs["structs"]["ImFontAtlas"][11]["name"] = "TexUvWhitePixel"
defs["structs"]["ImFontAtlas"][11]["type"] = "ImVec2"
defs["structs"]["ImFontAtlas"][12] = {}
defs["structs"]["ImFontAtlas"][12]["comment"] = " // Configuration data"
defs["structs"]["ImFontAtlas"][12]["name"] = "Fonts"
defs["structs"]["ImFontAtlas"][12]["template_type"] = "ImFont*"
defs["structs"]["ImFontAtlas"][12]["type"] = "ImVector_ImFontPtr"
defs["structs"]["ImFontAtlas"][13] = {}
defs["structs"]["ImFontAtlas"][13]["comment"] = " // UVs for baked anti-aliased lines"
defs["structs"]["ImFontAtlas"][13]["name"] = "CustomRects"
defs["structs"]["ImFontAtlas"][13]["template_type"] = "ImFontAtlasCustomRect"
defs["structs"]["ImFontAtlas"][13]["type"] = "ImVector_ImFontAtlasCustomRect"
defs["structs"]["ImFontAtlas"][14] = {}
defs["structs"]["ImFontAtlas"][14]["comment"] = " // Custom texture rectangle ID for white pixel and mouse cursors"
defs["structs"]["ImFontAtlas"][14]["name"] = "ConfigData"
defs["structs"]["ImFontAtlas"][14]["template_type"] = "ImFontConfig"
defs["structs"]["ImFontAtlas"][14]["type"] = "ImVector_ImFontConfig"
defs["structs"]["ImFontAtlas"][15] = {}
defs["structs"]["ImFontAtlas"][15]["comment"] = " // Custom texture rectangle ID for baked anti-aliased lines"
defs["structs"]["ImFontAtlas"][15]["name"] = "TexUvLines[(63)+1]"
defs["structs"]["ImFontAtlas"][15]["size"] = 64
defs["structs"]["ImFontAtlas"][15]["type"] = "ImVec4"
defs["structs"]["ImFontAtlas"][16] = {}
defs["structs"]["ImFontAtlas"][16]["name"] = "PackIdMouseCursors"
defs["structs"]["ImFontAtlas"][16]["type"] = "int"
defs["structs"]["ImFontAtlas"][17] = {}
defs["structs"]["ImFontAtlas"][17]["name"] = "PackIdLines"
defs["structs"]["ImFontAtlas"][17]["type"] = "int"
defs["structs"]["ImFontAtlasCustomRect"] = {}
defs["structs"]["ImFontAtlasCustomRect"][1] = {}
defs["structs"]["ImFontAtlasCustomRect"][1]["comment"] = " // Input    // For custom font glyphs only (ID < 0x110000)"
defs["structs"]["ImFontAtlasCustomRect"][1]["name"] = "Width"
defs["structs"]["ImFontAtlasCustomRect"][1]["type"] = "unsigned short"
defs["structs"]["ImFontAtlasCustomRect"][2] = {}
defs["structs"]["ImFontAtlasCustomRect"][2]["comment"] = " // Input    // For custom font glyphs only (ID < 0x110000)"
defs["structs"]["ImFontAtlasCustomRect"][2]["name"] = "Height"
defs["structs"]["ImFontAtlasCustomRect"][2]["type"] = "unsigned short"
defs["structs"]["ImFontAtlasCustomRect"][3] = {}
defs["structs"]["ImFontAtlasCustomRect"][3]["comment"] = " // Input    // For custom font glyphs only: glyph xadvance"
defs["structs"]["ImFontAtlasCustomRect"][3]["name"] = "X"
defs["structs"]["ImFontAtlasCustomRect"][3]["type"] = "unsigned short"
defs["structs"]["ImFontAtlasCustomRect"][4] = {}
defs["structs"]["ImFontAtlasCustomRect"][4]["comment"] = " // Input    // For custom font glyphs only: glyph xadvance"
defs["structs"]["ImFontAtlasCustomRect"][4]["name"] = "Y"
defs["structs"]["ImFontAtlasCustomRect"][4]["type"] = "unsigned short"
defs["structs"]["ImFontAtlasCustomRect"][5] = {}
defs["structs"]["ImFontAtlasCustomRect"][5]["comment"] = " // Input    // For custom font glyphs only: glyph display offset"
defs["structs"]["ImFontAtlasCustomRect"][5]["name"] = "GlyphID"
defs["structs"]["ImFontAtlasCustomRect"][5]["type"] = "unsigned int"
defs["structs"]["ImFontAtlasCustomRect"][6] = {}
defs["structs"]["ImFontAtlasCustomRect"][6]["comment"] = " // Input    // For custom font glyphs only: target font"
defs["structs"]["ImFontAtlasCustomRect"][6]["name"] = "GlyphAdvanceX"
defs["structs"]["ImFontAtlasCustomRect"][6]["type"] = "float"
defs["structs"]["ImFontAtlasCustomRect"][7] = {}
defs["structs"]["ImFontAtlasCustomRect"][7]["name"] = "GlyphOffset"
defs["structs"]["ImFontAtlasCustomRect"][7]["type"] = "ImVec2"
defs["structs"]["ImFontAtlasCustomRect"][8] = {}
defs["structs"]["ImFontAtlasCustomRect"][8]["name"] = "Font"
defs["structs"]["ImFontAtlasCustomRect"][8]["type"] = "ImFont*"
defs["structs"]["ImFontConfig"] = {}
defs["structs"]["ImFontConfig"][1] = {}
defs["structs"]["ImFontConfig"][1]["comment"] = " // true     // TTF/OTF data ownership taken by the container ImFontAtlas (will delete memory itself)."
defs["structs"]["ImFontConfig"][1]["name"] = "FontData"
defs["structs"]["ImFontConfig"][1]["type"] = "void*"
defs["structs"]["ImFontConfig"][2] = {}
defs["structs"]["ImFontConfig"][2]["comment"] = " // 0        // Index of font within TTF/OTF file"
defs["structs"]["ImFontConfig"][2]["name"] = "FontDataSize"
defs["structs"]["ImFontConfig"][2]["type"] = "int"
defs["structs"]["ImFontConfig"][3] = {}
defs["structs"]["ImFontConfig"][3]["comment"] = " //          // Size in pixels for rasterizer (more or less maps to the resulting font height)."
defs["structs"]["ImFontConfig"][3]["name"] = "FontDataOwnedByAtlas"
defs["structs"]["ImFontConfig"][3]["type"] = "bool"
defs["structs"]["ImFontConfig"][4] = {}
defs["structs"]["ImFontConfig"][4]["comment"] = " // 3        // Rasterize at higher quality for sub-pixel positioning. Read https://github.com/nothings/stb/blob/master/tests/oversample/README.md for details."
defs["structs"]["ImFontConfig"][4]["name"] = "FontNo"
defs["structs"]["ImFontConfig"][4]["type"] = "int"
defs["structs"]["ImFontConfig"][5] = {}
defs["structs"]["ImFontConfig"][5]["comment"] = " // 1        // Rasterize at higher quality for sub-pixel positioning. We don't use sub-pixel positions on the Y axis."
defs["structs"]["ImFontConfig"][5]["name"] = "SizePixels"
defs["structs"]["ImFontConfig"][5]["type"] = "float"
defs["structs"]["ImFontConfig"][6] = {}
defs["structs"]["ImFontConfig"][6]["comment"] = " // false    // Align every glyph to pixel boundary. Useful e.g. if you are merging a non-pixel aligned font with the default font. If enabled, you can set OversampleH/V to 1."
defs["structs"]["ImFontConfig"][6]["name"] = "OversampleH"
defs["structs"]["ImFontConfig"][6]["type"] = "int"
defs["structs"]["ImFontConfig"][7] = {}
defs["structs"]["ImFontConfig"][7]["comment"] = " // 0, 0     // Extra spacing (in pixels) between glyphs. Only X axis is supported for now."
defs["structs"]["ImFontConfig"][7]["name"] = "OversampleV"
defs["structs"]["ImFontConfig"][7]["type"] = "int"
defs["structs"]["ImFontConfig"][8] = {}
defs["structs"]["ImFontConfig"][8]["comment"] = " // 0, 0     // Offset all glyphs from this font input."
defs["structs"]["ImFontConfig"][8]["name"] = "PixelSnapH"
defs["structs"]["ImFontConfig"][8]["type"] = "bool"
defs["structs"]["ImFontConfig"][9] = {}
defs["structs"]["ImFontConfig"][9]["comment"] = " // NULL     // Pointer to a user-provided list of Unicode range (2 value per range, values are inclusive, zero-terminated list). THE ARRAY DATA NEEDS TO PERSIST AS LONG AS THE FONT IS ALIVE."
defs["structs"]["ImFontConfig"][9]["name"] = "GlyphExtraSpacing"
defs["structs"]["ImFontConfig"][9]["type"] = "ImVec2"
defs["structs"]["ImFontConfig"][10] = {}
defs["structs"]["ImFontConfig"][10]["comment"] = " // 0        // Minimum AdvanceX for glyphs, set Min to align font icons, set both Min/Max to enforce mono-space font"
defs["structs"]["ImFontConfig"][10]["name"] = "GlyphOffset"
defs["structs"]["ImFontConfig"][10]["type"] = "ImVec2"
defs["structs"]["ImFontConfig"][11] = {}
defs["structs"]["ImFontConfig"][11]["comment"] = " // FLT_MAX  // Maximum AdvanceX for glyphs"
defs["structs"]["ImFontConfig"][11]["name"] = "GlyphRanges"
defs["structs"]["ImFontConfig"][11]["type"] = "const ImWchar*"
defs["structs"]["ImFontConfig"][12] = {}
defs["structs"]["ImFontConfig"][12]["comment"] = " // false    // Merge into previous ImFont, so you can combine multiple inputs font into one ImFont (e.g. ASCII font + icons + Japanese glyphs). You may want to use GlyphOffset.y when merge font of different heights."
defs["structs"]["ImFontConfig"][12]["name"] = "GlyphMinAdvanceX"
defs["structs"]["ImFontConfig"][12]["type"] = "float"
defs["structs"]["ImFontConfig"][13] = {}
defs["structs"]["ImFontConfig"][13]["comment"] = " // 0x00     // Settings for custom font rasterizer (e.g. ImGuiFreeType). Leave as zero if you aren't using one."
defs["structs"]["ImFontConfig"][13]["name"] = "GlyphMaxAdvanceX"
defs["structs"]["ImFontConfig"][13]["type"] = "float"
defs["structs"]["ImFontConfig"][14] = {}
defs["structs"]["ImFontConfig"][14]["comment"] = " // 1.0f     // Brighten (>1.0f) or darken (<1.0f) font output. Brightening small fonts may be a good workaround to make them more readable."
defs["structs"]["ImFontConfig"][14]["name"] = "MergeMode"
defs["structs"]["ImFontConfig"][14]["type"] = "bool"
defs["structs"]["ImFontConfig"][15] = {}
defs["structs"]["ImFontConfig"][15]["comment"] = " // -1       // Explicitly specify unicode codepoint of ellipsis character. When fonts are being merged first specified ellipsis will be used."
defs["structs"]["ImFontConfig"][15]["name"] = "RasterizerFlags"
defs["structs"]["ImFontConfig"][15]["type"] = "unsigned int"
defs["structs"]["ImFontConfig"][16] = {}
defs["structs"]["ImFontConfig"][16]["comment"] = " // Name (strictly to ease debugging)"
defs["structs"]["ImFontConfig"][16]["name"] = "RasterizerMultiply"
defs["structs"]["ImFontConfig"][16]["type"] = "float"
defs["structs"]["ImFontConfig"][17] = {}
defs["structs"]["ImFontConfig"][17]["name"] = "EllipsisChar"
defs["structs"]["ImFontConfig"][17]["type"] = "ImWchar"
defs["structs"]["ImFontConfig"][18] = {}
defs["structs"]["ImFontConfig"][18]["name"] = "Name[40]"
defs["structs"]["ImFontConfig"][18]["size"] = 40
defs["structs"]["ImFontConfig"][18]["type"] = "char"
defs["structs"]["ImFontConfig"][19] = {}
defs["structs"]["ImFontConfig"][19]["name"] = "DstFont"
defs["structs"]["ImFontConfig"][19]["type"] = "ImFont*"
defs["structs"]["ImFontGlyph"] = {}
defs["structs"]["ImFontGlyph"][1] = {}
defs["structs"]["ImFontGlyph"][1]["bitfield"] = "31"
defs["structs"]["ImFontGlyph"][1]["comment"] = " // Distance to next character (= data from font + ImFontConfig::GlyphExtraSpacing.x baked in)"
defs["structs"]["ImFontGlyph"][1]["name"] = "Codepoint"
defs["structs"]["ImFontGlyph"][1]["type"] = "unsigned int"
defs["structs"]["ImFontGlyph"][2] = {}
defs["structs"]["ImFontGlyph"][2]["bitfield"] = "1"
defs["structs"]["ImFontGlyph"][2]["comment"] = " // Glyph corners"
defs["structs"]["ImFontGlyph"][2]["name"] = "Visible"
defs["structs"]["ImFontGlyph"][2]["type"] = "unsigned int"
defs["structs"]["ImFontGlyph"][3] = {}
defs["structs"]["ImFontGlyph"][3]["comment"] = " // Texture coordinates"
defs["structs"]["ImFontGlyph"][3]["name"] = "AdvanceX"
defs["structs"]["ImFontGlyph"][3]["type"] = "float"
defs["structs"]["ImFontGlyph"][4] = {}
defs["structs"]["ImFontGlyph"][4]["name"] = "X0"
defs["structs"]["ImFontGlyph"][4]["type"] = "float"
defs["structs"]["ImFontGlyph"][5] = {}
defs["structs"]["ImFontGlyph"][5]["name"] = "Y0"
defs["structs"]["ImFontGlyph"][5]["type"] = "float"
defs["structs"]["ImFontGlyph"][6] = {}
defs["structs"]["ImFontGlyph"][6]["name"] = "X1"
defs["structs"]["ImFontGlyph"][6]["type"] = "float"
defs["structs"]["ImFontGlyph"][7] = {}
defs["structs"]["ImFontGlyph"][7]["name"] = "Y1"
defs["structs"]["ImFontGlyph"][7]["type"] = "float"
defs["structs"]["ImFontGlyph"][8] = {}
defs["structs"]["ImFontGlyph"][8]["name"] = "U0"
defs["structs"]["ImFontGlyph"][8]["type"] = "float"
defs["structs"]["ImFontGlyph"][9] = {}
defs["structs"]["ImFontGlyph"][9]["name"] = "V0"
defs["structs"]["ImFontGlyph"][9]["type"] = "float"
defs["structs"]["ImFontGlyph"][10] = {}
defs["structs"]["ImFontGlyph"][10]["name"] = "U1"
defs["structs"]["ImFontGlyph"][10]["type"] = "float"
defs["structs"]["ImFontGlyph"][11] = {}
defs["structs"]["ImFontGlyph"][11]["name"] = "V1"
defs["structs"]["ImFontGlyph"][11]["type"] = "float"
defs["structs"]["ImFontGlyphRangesBuilder"] = {}
defs["structs"]["ImFontGlyphRangesBuilder"][1] = {}
defs["structs"]["ImFontGlyphRangesBuilder"][1]["name"] = "UsedChars"
defs["structs"]["ImFontGlyphRangesBuilder"][1]["template_type"] = "ImU32"
defs["structs"]["ImFontGlyphRangesBuilder"][1]["type"] = "ImVector_ImU32"
defs["structs"]["ImGuiColorMod"] = {}
defs["structs"]["ImGuiColorMod"][1] = {}
defs["structs"]["ImGuiColorMod"][1]["name"] = "Col"
defs["structs"]["ImGuiColorMod"][1]["type"] = "ImGuiCol"
defs["structs"]["ImGuiColorMod"][2] = {}
defs["structs"]["ImGuiColorMod"][2]["name"] = "BackupValue"
defs["structs"]["ImGuiColorMod"][2]["type"] = "ImVec4"
defs["structs"]["ImGuiColumnData"] = {}
defs["structs"]["ImGuiColumnData"][1] = {}
defs["structs"]["ImGuiColumnData"][1]["name"] = "OffsetNorm"
defs["structs"]["ImGuiColumnData"][1]["type"] = "float"
defs["structs"]["ImGuiColumnData"][2] = {}
defs["structs"]["ImGuiColumnData"][2]["name"] = "OffsetNormBeforeResize"
defs["structs"]["ImGuiColumnData"][2]["type"] = "float"
defs["structs"]["ImGuiColumnData"][3] = {}
defs["structs"]["ImGuiColumnData"][3]["name"] = "Flags"
defs["structs"]["ImGuiColumnData"][3]["type"] = "ImGuiColumnsFlags"
defs["structs"]["ImGuiColumnData"][4] = {}
defs["structs"]["ImGuiColumnData"][4]["name"] = "ClipRect"
defs["structs"]["ImGuiColumnData"][4]["type"] = "ImRect"
defs["structs"]["ImGuiColumns"] = {}
defs["structs"]["ImGuiColumns"][1] = {}
defs["structs"]["ImGuiColumns"][1]["comment"] = " // Backup of CursorMaxPos at the time of BeginColumns()"
defs["structs"]["ImGuiColumns"][1]["name"] = "ID"
defs["structs"]["ImGuiColumns"][1]["type"] = "ImGuiID"
defs["structs"]["ImGuiColumns"][2] = {}
defs["structs"]["ImGuiColumns"][2]["comment"] = " // Backup of ClipRect at the time of BeginColumns()"
defs["structs"]["ImGuiColumns"][2]["name"] = "Flags"
defs["structs"]["ImGuiColumns"][2]["type"] = "ImGuiColumnsFlags"
defs["structs"]["ImGuiColumns"][3] = {}
defs["structs"]["ImGuiColumns"][3]["comment"] = " // Backup of ClipRect during PushColumnsBackground()/PopColumnsBackground()"
defs["structs"]["ImGuiColumns"][3]["name"] = "IsFirstFrame"
defs["structs"]["ImGuiColumns"][3]["type"] = "bool"
defs["structs"]["ImGuiColumns"][4] = {}
defs["structs"]["ImGuiColumns"][4]["comment"] = "//Backup of WorkRect at the time of BeginColumns()"
defs["structs"]["ImGuiColumns"][4]["name"] = "IsBeingResized"
defs["structs"]["ImGuiColumns"][4]["type"] = "bool"
defs["structs"]["ImGuiColumns"][5] = {}
defs["structs"]["ImGuiColumns"][5]["name"] = "Current"
defs["structs"]["ImGuiColumns"][5]["type"] = "int"
defs["structs"]["ImGuiColumns"][6] = {}
defs["structs"]["ImGuiColumns"][6]["name"] = "Count"
defs["structs"]["ImGuiColumns"][6]["type"] = "int"
defs["structs"]["ImGuiColumns"][7] = {}
defs["structs"]["ImGuiColumns"][7]["name"] = "OffMinX"
defs["structs"]["ImGuiColumns"][7]["type"] = "float"
defs["structs"]["ImGuiColumns"][8] = {}
defs["structs"]["ImGuiColumns"][8]["name"] = "OffMaxX"
defs["structs"]["ImGuiColumns"][8]["type"] = "float"
defs["structs"]["ImGuiColumns"][9] = {}
defs["structs"]["ImGuiColumns"][9]["name"] = "LineMinY"
defs["structs"]["ImGuiColumns"][9]["type"] = "float"
defs["structs"]["ImGuiColumns"][10] = {}
defs["structs"]["ImGuiColumns"][10]["name"] = "LineMaxY"
defs["structs"]["ImGuiColumns"][10]["type"] = "float"
defs["structs"]["ImGuiColumns"][11] = {}
defs["structs"]["ImGuiColumns"][11]["name"] = "HostCursorPosY"
defs["structs"]["ImGuiColumns"][11]["type"] = "float"
defs["structs"]["ImGuiColumns"][12] = {}
defs["structs"]["ImGuiColumns"][12]["name"] = "HostCursorMaxPosX"
defs["structs"]["ImGuiColumns"][12]["type"] = "float"
defs["structs"]["ImGuiColumns"][13] = {}
defs["structs"]["ImGuiColumns"][13]["name"] = "HostInitialClipRect"
defs["structs"]["ImGuiColumns"][13]["type"] = "ImRect"
defs["structs"]["ImGuiColumns"][14] = {}
defs["structs"]["ImGuiColumns"][14]["name"] = "HostBackupClipRect"
defs["structs"]["ImGuiColumns"][14]["type"] = "ImRect"
defs["structs"]["ImGuiColumns"][15] = {}
defs["structs"]["ImGuiColumns"][15]["name"] = "HostBackupParentWorkRect"
defs["structs"]["ImGuiColumns"][15]["type"] = "ImRect"
defs["structs"]["ImGuiColumns"][16] = {}
defs["structs"]["ImGuiColumns"][16]["name"] = "Columns"
defs["structs"]["ImGuiColumns"][16]["template_type"] = "ImGuiColumnData"
defs["structs"]["ImGuiColumns"][16]["type"] = "ImVector_ImGuiColumnData"
defs["structs"]["ImGuiColumns"][17] = {}
defs["structs"]["ImGuiColumns"][17]["name"] = "Splitter"
defs["structs"]["ImGuiColumns"][17]["type"] = "ImDrawListSplitter"
defs["structs"]["ImGuiContext"] = {}
defs["structs"]["ImGuiContext"][1] = {}
defs["structs"]["ImGuiContext"][1]["comment"] = " // (Shortcut) == FontStack.empty() ? IO.Font : FontStack.back()"
defs["structs"]["ImGuiContext"][1]["name"] = "Initialized"
defs["structs"]["ImGuiContext"][1]["type"] = "bool"
defs["structs"]["ImGuiContext"][2] = {}
defs["structs"]["ImGuiContext"][2]["comment"] = " // (Shortcut) == FontBaseSize * g.CurrentWindow->FontWindowScale == window->FontSize(). Text height for current window."
defs["structs"]["ImGuiContext"][2]["name"] = "FontAtlasOwnedByContext"
defs["structs"]["ImGuiContext"][2]["type"] = "bool"
defs["structs"]["ImGuiContext"][3] = {}
defs["structs"]["ImGuiContext"][3]["comment"] = " // (Shortcut) == IO.FontGlobalScale * Font->Scale * Font->FontSize. Base text height."
defs["structs"]["ImGuiContext"][3]["name"] = "IO"
defs["structs"]["ImGuiContext"][3]["type"] = "ImGuiIO"
defs["structs"]["ImGuiContext"][4] = {}
defs["structs"]["ImGuiContext"][4]["comment"] = " // Set by NewFrame(), cleared by EndFrame()"
defs["structs"]["ImGuiContext"][4]["name"] = "PlatformIO"
defs["structs"]["ImGuiContext"][4]["type"] = "ImGuiPlatformIO"
defs["structs"]["ImGuiContext"][5] = {}
defs["structs"]["ImGuiContext"][5]["comment"] = " // Set by NewFrame(), cleared by EndFrame() when the implicit debug window has been pushed"
defs["structs"]["ImGuiContext"][5]["name"] = "Style"
defs["structs"]["ImGuiContext"][5]["type"] = "ImGuiStyle"
defs["structs"]["ImGuiContext"][6] = {}
defs["structs"]["ImGuiContext"][6]["comment"] = " // Set within EndChild()"
defs["structs"]["ImGuiContext"][6]["name"] = "ConfigFlagsCurrFrame"
defs["structs"]["ImGuiContext"][6]["type"] = "ImGuiConfigFlags"
defs["structs"]["ImGuiContext"][7] = {}
defs["structs"]["ImGuiContext"][7]["comment"] = " // Will call test engine hooks: ImGuiTestEngineHook_ItemAdd(), ImGuiTestEngineHook_ItemInfo(), ImGuiTestEngineHook_Log()"
defs["structs"]["ImGuiContext"][7]["name"] = "ConfigFlagsLastFrame"
defs["structs"]["ImGuiContext"][7]["type"] = "ImGuiConfigFlags"
defs["structs"]["ImGuiContext"][8] = {}
defs["structs"]["ImGuiContext"][8]["comment"] = " // Will call test engine hooks: ImGuiTestEngineHook_IdInfo() from GetID()"
defs["structs"]["ImGuiContext"][8]["name"] = "Font"
defs["structs"]["ImGuiContext"][8]["type"] = "ImFont*"
defs["structs"]["ImGuiContext"][9] = {}
defs["structs"]["ImGuiContext"][9]["comment"] = " // Test engine user data"
defs["structs"]["ImGuiContext"][9]["name"] = "FontSize"
defs["structs"]["ImGuiContext"][9]["type"] = "float"
defs["structs"]["ImGuiContext"][10] = {}
defs["structs"]["ImGuiContext"][10]["comment"] = " // Windows, sorted in display order, back to front"
defs["structs"]["ImGuiContext"][10]["name"] = "FontBaseSize"
defs["structs"]["ImGuiContext"][10]["type"] = "float"
defs["structs"]["ImGuiContext"][11] = {}
defs["structs"]["ImGuiContext"][11]["comment"] = " // Windows, sorted in focus order, back to front. (FIXME: We could only store root windows here! Need to sort out the Docking equivalent which is RootWindowDockStop and is unfortunately a little more dynamic)"
defs["structs"]["ImGuiContext"][11]["name"] = "DrawListSharedData"
defs["structs"]["ImGuiContext"][11]["type"] = "ImDrawListSharedData"
defs["structs"]["ImGuiContext"][12] = {}
defs["structs"]["ImGuiContext"][12]["comment"] = " // Temporary buffer used in EndFrame() to reorder windows so parents are kept before their child"
defs["structs"]["ImGuiContext"][12]["name"] = "Time"
defs["structs"]["ImGuiContext"][12]["type"] = "double"
defs["structs"]["ImGuiContext"][13] = {}
defs["structs"]["ImGuiContext"][13]["comment"] = " // Map window's ImGuiID to ImGuiWindow*"
defs["structs"]["ImGuiContext"][13]["name"] = "FrameCount"
defs["structs"]["ImGuiContext"][13]["type"] = "int"
defs["structs"]["ImGuiContext"][14] = {}
defs["structs"]["ImGuiContext"][14]["comment"] = " // Number of unique windows submitted by frame"
defs["structs"]["ImGuiContext"][14]["name"] = "FrameCountEnded"
defs["structs"]["ImGuiContext"][14]["type"] = "int"
defs["structs"]["ImGuiContext"][15] = {}
defs["structs"]["ImGuiContext"][15]["comment"] = " // Window being drawn into"
defs["structs"]["ImGuiContext"][15]["name"] = "FrameCountPlatformEnded"
defs["structs"]["ImGuiContext"][15]["type"] = "int"
defs["structs"]["ImGuiContext"][16] = {}
defs["structs"]["ImGuiContext"][16]["comment"] = " // Window the mouse is hovering. Will typically catch mouse inputs."
defs["structs"]["ImGuiContext"][16]["name"] = "FrameCountRendered"
defs["structs"]["ImGuiContext"][16]["type"] = "int"
defs["structs"]["ImGuiContext"][17] = {}
defs["structs"]["ImGuiContext"][17]["comment"] = " // == HoveredWindow ? HoveredWindow->RootWindow : NULL, merely a shortcut to avoid null test in some situation."
defs["structs"]["ImGuiContext"][17]["name"] = "WithinFrameScope"
defs["structs"]["ImGuiContext"][17]["type"] = "bool"
defs["structs"]["ImGuiContext"][18] = {}
defs["structs"]["ImGuiContext"][18]["comment"] = " // Hovered window ignoring MovingWindow. Only set if MovingWindow is set."
defs["structs"]["ImGuiContext"][18]["name"] = "WithinFrameScopeWithImplicitWindow"
defs["structs"]["ImGuiContext"][18]["type"] = "bool"
defs["structs"]["ImGuiContext"][19] = {}
defs["structs"]["ImGuiContext"][19]["comment"] = " // Track the window we clicked on (in order to preserve focus). The actual window that is moved is generally MovingWindow->RootWindow."
defs["structs"]["ImGuiContext"][19]["name"] = "WithinEndChild"
defs["structs"]["ImGuiContext"][19]["type"] = "bool"
defs["structs"]["ImGuiContext"][20] = {}
defs["structs"]["ImGuiContext"][20]["comment"] = " // Track the window we started mouse-wheeling on. Until a timer elapse or mouse has moved, generally keep scrolling the same window even if during the course of scrolling the mouse ends up hovering a child window."
defs["structs"]["ImGuiContext"][20]["name"] = "TestEngineHookItems"
defs["structs"]["ImGuiContext"][20]["type"] = "bool"
defs["structs"]["ImGuiContext"][21] = {}
defs["structs"]["ImGuiContext"][21]["comment"] = " // Hovered widget"
defs["structs"]["ImGuiContext"][21]["name"] = "TestEngineHookIdInfo"
defs["structs"]["ImGuiContext"][21]["type"] = "ImGuiID"
defs["structs"]["ImGuiContext"][22] = {}
defs["structs"]["ImGuiContext"][22]["comment"] = " // At least one widget passed the rect test, but has been discarded by disabled flag or popup inhibit. May be true even if HoveredId == 0."
defs["structs"]["ImGuiContext"][22]["name"] = "TestEngine"
defs["structs"]["ImGuiContext"][22]["type"] = "void*"
defs["structs"]["ImGuiContext"][23] = {}
defs["structs"]["ImGuiContext"][23]["comment"] = " // Measure contiguous hovering time"
defs["structs"]["ImGuiContext"][23]["name"] = "Windows"
defs["structs"]["ImGuiContext"][23]["template_type"] = "ImGuiWindow*"
defs["structs"]["ImGuiContext"][23]["type"] = "ImVector_ImGuiWindowPtr"
defs["structs"]["ImGuiContext"][24] = {}
defs["structs"]["ImGuiContext"][24]["comment"] = " // Measure contiguous hovering time where the item has not been active"
defs["structs"]["ImGuiContext"][24]["name"] = "WindowsFocusOrder"
defs["structs"]["ImGuiContext"][24]["template_type"] = "ImGuiWindow*"
defs["structs"]["ImGuiContext"][24]["type"] = "ImVector_ImGuiWindowPtr"
defs["structs"]["ImGuiContext"][25] = {}
defs["structs"]["ImGuiContext"][25]["comment"] = " // Active widget"
defs["structs"]["ImGuiContext"][25]["name"] = "WindowsTempSortBuffer"
defs["structs"]["ImGuiContext"][25]["template_type"] = "ImGuiWindow*"
defs["structs"]["ImGuiContext"][25]["type"] = "ImVector_ImGuiWindowPtr"
defs["structs"]["ImGuiContext"][26] = {}
defs["structs"]["ImGuiContext"][26]["comment"] = " // Active widget has been seen this frame (we can't use a bool as the ActiveId may change within the frame)"
defs["structs"]["ImGuiContext"][26]["name"] = "CurrentWindowStack"
defs["structs"]["ImGuiContext"][26]["template_type"] = "ImGuiWindow*"
defs["structs"]["ImGuiContext"][26]["type"] = "ImVector_ImGuiWindowPtr"
defs["structs"]["ImGuiContext"][27] = {}
defs["structs"]["ImGuiContext"][27]["comment"] = " // Set at the time of activation for one frame"
defs["structs"]["ImGuiContext"][27]["name"] = "WindowsById"
defs["structs"]["ImGuiContext"][27]["type"] = "ImGuiStorage"
defs["structs"]["ImGuiContext"][28] = {}
defs["structs"]["ImGuiContext"][28]["comment"] = " // Active widget allows another widget to steal active id (generally for overlapping widgets, but not always)"
defs["structs"]["ImGuiContext"][28]["name"] = "WindowsActiveCount"
defs["structs"]["ImGuiContext"][28]["type"] = "int"
defs["structs"]["ImGuiContext"][29] = {}
defs["structs"]["ImGuiContext"][29]["comment"] = " // Disable losing active id if the active id window gets unfocused."
defs["structs"]["ImGuiContext"][29]["name"] = "CurrentWindow"
defs["structs"]["ImGuiContext"][29]["type"] = "ImGuiWindow*"
defs["structs"]["ImGuiContext"][30] = {}
defs["structs"]["ImGuiContext"][30]["comment"] = " // Track whether the active id led to a press (this is to allow changing between PressOnClick and PressOnRelease without pressing twice). Used by range_select branch."
defs["structs"]["ImGuiContext"][30]["name"] = "HoveredWindow"
defs["structs"]["ImGuiContext"][30]["type"] = "ImGuiWindow*"
defs["structs"]["ImGuiContext"][31] = {}
defs["structs"]["ImGuiContext"][31]["comment"] = " // Was the value associated to the widget Edited over the course of the Active state."
defs["structs"]["ImGuiContext"][31]["name"] = "HoveredRootWindow"
defs["structs"]["ImGuiContext"][31]["type"] = "ImGuiWindow*"
defs["structs"]["ImGuiContext"][32] = {}
defs["structs"]["ImGuiContext"][32]["comment"] = " // Active widget will want to read those nav move requests (e.g. can activate a button and move away from it)"
defs["structs"]["ImGuiContext"][32]["name"] = "HoveredWindowUnderMovingWindow"
defs["structs"]["ImGuiContext"][32]["type"] = "ImGuiWindow*"
defs["structs"]["ImGuiContext"][33] = {}
defs["structs"]["ImGuiContext"][33]["comment"] = " // Active widget will want to read those nav inputs."
defs["structs"]["ImGuiContext"][33]["name"] = "HoveredDockNode"
defs["structs"]["ImGuiContext"][33]["type"] = "ImGuiDockNode*"
defs["structs"]["ImGuiContext"][34] = {}
defs["structs"]["ImGuiContext"][34]["comment"] = " // Active widget will want to read those key inputs. When we grow the ImGuiKey enum we'll need to either to order the enum to make useful keys come first, either redesign this into e.g. a small array."
defs["structs"]["ImGuiContext"][34]["name"] = "MovingWindow"
defs["structs"]["ImGuiContext"][34]["type"] = "ImGuiWindow*"
defs["structs"]["ImGuiContext"][35] = {}
defs["structs"]["ImGuiContext"][35]["comment"] = " // Clicked offset from upper-left corner, if applicable (currently only set by ButtonBehavior)"
defs["structs"]["ImGuiContext"][35]["name"] = "WheelingWindow"
defs["structs"]["ImGuiContext"][35]["type"] = "ImGuiWindow*"
defs["structs"]["ImGuiContext"][36] = {}
defs["structs"]["ImGuiContext"][36]["comment"] = " // Activating with mouse or nav (gamepad/keyboard)"
defs["structs"]["ImGuiContext"][36]["name"] = "WheelingWindowRefMousePos"
defs["structs"]["ImGuiContext"][36]["type"] = "ImVec2"
defs["structs"]["ImGuiContext"][37] = {}
defs["structs"]["ImGuiContext"][37]["comment"] = " // Store the last non-zero ActiveId, useful for animation."
defs["structs"]["ImGuiContext"][37]["name"] = "WheelingWindowTimer"
defs["structs"]["ImGuiContext"][37]["type"] = "float"
defs["structs"]["ImGuiContext"][38] = {}
defs["structs"]["ImGuiContext"][38]["comment"] = " // Store the last non-zero ActiveId timer since the beginning of activation, useful for animation."
defs["structs"]["ImGuiContext"][38]["name"] = "HoveredId"
defs["structs"]["ImGuiContext"][38]["type"] = "ImGuiID"
defs["structs"]["ImGuiContext"][39] = {}
defs["structs"]["ImGuiContext"][39]["comment"] = " // Storage for SetNextWindow** functions"
defs["structs"]["ImGuiContext"][39]["name"] = "HoveredIdPreviousFrame"
defs["structs"]["ImGuiContext"][39]["type"] = "ImGuiID"
defs["structs"]["ImGuiContext"][40] = {}
defs["structs"]["ImGuiContext"][40]["comment"] = " // Storage for SetNextItem** functions"
defs["structs"]["ImGuiContext"][40]["name"] = "HoveredIdAllowOverlap"
defs["structs"]["ImGuiContext"][40]["type"] = "bool"
defs["structs"]["ImGuiContext"][41] = {}
defs["structs"]["ImGuiContext"][41]["comment"] = " // Stack for PushStyleColor()/PopStyleColor()"
defs["structs"]["ImGuiContext"][41]["name"] = "HoveredIdDisabled"
defs["structs"]["ImGuiContext"][41]["type"] = "bool"
defs["structs"]["ImGuiContext"][42] = {}
defs["structs"]["ImGuiContext"][42]["comment"] = " // Stack for PushStyleVar()/PopStyleVar()"
defs["structs"]["ImGuiContext"][42]["name"] = "HoveredIdTimer"
defs["structs"]["ImGuiContext"][42]["type"] = "float"
defs["structs"]["ImGuiContext"][43] = {}
defs["structs"]["ImGuiContext"][43]["comment"] = " // Stack for PushFont()/PopFont()"
defs["structs"]["ImGuiContext"][43]["name"] = "HoveredIdNotActiveTimer"
defs["structs"]["ImGuiContext"][43]["type"] = "float"
defs["structs"]["ImGuiContext"][44] = {}
defs["structs"]["ImGuiContext"][44]["comment"] = " // Which popups are open (persistent)"
defs["structs"]["ImGuiContext"][44]["name"] = "ActiveId"
defs["structs"]["ImGuiContext"][44]["type"] = "ImGuiID"
defs["structs"]["ImGuiContext"][45] = {}
defs["structs"]["ImGuiContext"][45]["comment"] = " // Which level of BeginPopup() we are in (reset every frame)"
defs["structs"]["ImGuiContext"][45]["name"] = "ActiveIdIsAlive"
defs["structs"]["ImGuiContext"][45]["type"] = "ImGuiID"
defs["structs"]["ImGuiContext"][46] = {}
defs["structs"]["ImGuiContext"][46]["comment"] = " // Active viewports (always 1+, and generally 1 unless multi-viewports are enabled). Each viewports hold their copy of ImDrawData."
defs["structs"]["ImGuiContext"][46]["name"] = "ActiveIdTimer"
defs["structs"]["ImGuiContext"][46]["type"] = "float"
defs["structs"]["ImGuiContext"][47] = {}
defs["structs"]["ImGuiContext"][47]["comment"] = " // == CurrentViewport->DpiScale"
defs["structs"]["ImGuiContext"][47]["name"] = "ActiveIdIsJustActivated"
defs["structs"]["ImGuiContext"][47]["type"] = "bool"
defs["structs"]["ImGuiContext"][48] = {}
defs["structs"]["ImGuiContext"][48]["comment"] = " // We track changes of viewport (happening in Begin) so we can call Platform_OnChangedViewport()"
defs["structs"]["ImGuiContext"][48]["name"] = "ActiveIdAllowOverlap"
defs["structs"]["ImGuiContext"][48]["type"] = "bool"
defs["structs"]["ImGuiContext"][49] = {}
defs["structs"]["ImGuiContext"][49]["comment"] = " // Last known viewport that was hovered by mouse (even if we are not hovering any viewport any more) + honoring the _NoInputs flag."
defs["structs"]["ImGuiContext"][49]["name"] = "ActiveIdNoClearOnFocusLoss"
defs["structs"]["ImGuiContext"][49]["type"] = "bool"
defs["structs"]["ImGuiContext"][50] = {}
defs["structs"]["ImGuiContext"][50]["comment"] = " // Record of last focused platform window/viewport, when this changes we stamp the viewport as front-most"
defs["structs"]["ImGuiContext"][50]["name"] = "ActiveIdHasBeenPressedBefore"
defs["structs"]["ImGuiContext"][50]["type"] = "bool"
defs["structs"]["ImGuiContext"][51] = {}
defs["structs"]["ImGuiContext"][51]["comment"] = " // Every time the front-most window changes, we stamp its viewport with an incrementing counter"
defs["structs"]["ImGuiContext"][51]["name"] = "ActiveIdHasBeenEditedBefore"
defs["structs"]["ImGuiContext"][51]["type"] = "bool"
defs["structs"]["ImGuiContext"][52] = {}
defs["structs"]["ImGuiContext"][52]["comment"] = " // Focused window for navigation. Could be called 'FocusWindow'"
defs["structs"]["ImGuiContext"][52]["name"] = "ActiveIdHasBeenEditedThisFrame"
defs["structs"]["ImGuiContext"][52]["type"] = "bool"
defs["structs"]["ImGuiContext"][53] = {}
defs["structs"]["ImGuiContext"][53]["comment"] = " // Focused item for navigation"
defs["structs"]["ImGuiContext"][53]["name"] = "ActiveIdUsingNavDirMask"
defs["structs"]["ImGuiContext"][53]["type"] = "ImU32"
defs["structs"]["ImGuiContext"][54] = {}
defs["structs"]["ImGuiContext"][54]["comment"] = " // Identify a selection scope (selection code often wants to \"clear other items\" when landing on an item of the selection set)"
defs["structs"]["ImGuiContext"][54]["name"] = "ActiveIdUsingNavInputMask"
defs["structs"]["ImGuiContext"][54]["type"] = "ImU32"
defs["structs"]["ImGuiContext"][55] = {}
defs["structs"]["ImGuiContext"][55]["comment"] = " // ~~ (g.ActiveId == 0) && IsNavInputPressed(ImGuiNavInput_Activate) ? NavId : 0, also set when calling ActivateItem()"
defs["structs"]["ImGuiContext"][55]["name"] = "ActiveIdUsingKeyInputMask"
defs["structs"]["ImGuiContext"][55]["type"] = "ImU64"
defs["structs"]["ImGuiContext"][56] = {}
defs["structs"]["ImGuiContext"][56]["comment"] = " // ~~ IsNavInputDown(ImGuiNavInput_Activate) ? NavId : 0"
defs["structs"]["ImGuiContext"][56]["name"] = "ActiveIdClickOffset"
defs["structs"]["ImGuiContext"][56]["type"] = "ImVec2"
defs["structs"]["ImGuiContext"][57] = {}
defs["structs"]["ImGuiContext"][57]["comment"] = " // ~~ IsNavInputPressed(ImGuiNavInput_Activate) ? NavId : 0"
defs["structs"]["ImGuiContext"][57]["name"] = "ActiveIdWindow"
defs["structs"]["ImGuiContext"][57]["type"] = "ImGuiWindow*"
defs["structs"]["ImGuiContext"][58] = {}
defs["structs"]["ImGuiContext"][58]["comment"] = " // ~~ IsNavInputPressed(ImGuiNavInput_Input) ? NavId : 0"
defs["structs"]["ImGuiContext"][58]["name"] = "ActiveIdSource"
defs["structs"]["ImGuiContext"][58]["type"] = "ImGuiInputSource"
defs["structs"]["ImGuiContext"][59] = {}
defs["structs"]["ImGuiContext"][59]["comment"] = " // Just tabbed to this id."
defs["structs"]["ImGuiContext"][59]["name"] = "ActiveIdMouseButton"
defs["structs"]["ImGuiContext"][59]["type"] = "int"
defs["structs"]["ImGuiContext"][60] = {}
defs["structs"]["ImGuiContext"][60]["comment"] = " // Just navigated to this id (result of a successfully MoveRequest)."
defs["structs"]["ImGuiContext"][60]["name"] = "ActiveIdPreviousFrame"
defs["structs"]["ImGuiContext"][60]["type"] = "ImGuiID"
defs["structs"]["ImGuiContext"][61] = {}
defs["structs"]["ImGuiContext"][61]["comment"] = " // Just navigated to this focus scope id (result of a successfully MoveRequest)."
defs["structs"]["ImGuiContext"][61]["name"] = "ActiveIdPreviousFrameIsAlive"
defs["structs"]["ImGuiContext"][61]["type"] = "bool"
defs["structs"]["ImGuiContext"][62] = {}
defs["structs"]["ImGuiContext"][62]["comment"] = " // Set by ActivateItem(), queued until next frame."
defs["structs"]["ImGuiContext"][62]["name"] = "ActiveIdPreviousFrameHasBeenEditedBefore"
defs["structs"]["ImGuiContext"][62]["type"] = "bool"
defs["structs"]["ImGuiContext"][63] = {}
defs["structs"]["ImGuiContext"][63]["comment"] = " // Keyboard or Gamepad mode? THIS WILL ONLY BE None or NavGamepad or NavKeyboard."
defs["structs"]["ImGuiContext"][63]["name"] = "ActiveIdPreviousFrameWindow"
defs["structs"]["ImGuiContext"][63]["type"] = "ImGuiWindow*"
defs["structs"]["ImGuiContext"][64] = {}
defs["structs"]["ImGuiContext"][64]["comment"] = " // Rectangle used for scoring, in screen space. Based of window->DC.NavRefRectRel[], modified for directional navigation scoring."
defs["structs"]["ImGuiContext"][64]["name"] = "LastActiveId"
defs["structs"]["ImGuiContext"][64]["type"] = "ImGuiID"
defs["structs"]["ImGuiContext"][65] = {}
defs["structs"]["ImGuiContext"][65]["comment"] = " // Metrics for debugging"
defs["structs"]["ImGuiContext"][65]["name"] = "LastActiveIdTimer"
defs["structs"]["ImGuiContext"][65]["type"] = "float"
defs["structs"]["ImGuiContext"][66] = {}
defs["structs"]["ImGuiContext"][66]["comment"] = " // Layer we are navigating on. For now the system is hard-coded for 0=main contents and 1=menu/title bar, may expose layers later."
defs["structs"]["ImGuiContext"][66]["name"] = "NextWindowData"
defs["structs"]["ImGuiContext"][66]["type"] = "ImGuiNextWindowData"
defs["structs"]["ImGuiContext"][67] = {}
defs["structs"]["ImGuiContext"][67]["comment"] = " // == NavWindow->DC.FocusIdxTabCounter at time of NavId processing"
defs["structs"]["ImGuiContext"][67]["name"] = "NextItemData"
defs["structs"]["ImGuiContext"][67]["type"] = "ImGuiNextItemData"
defs["structs"]["ImGuiContext"][68] = {}
defs["structs"]["ImGuiContext"][68]["comment"] = " // Nav widget has been seen this frame ~~ NavRefRectRel is valid"
defs["structs"]["ImGuiContext"][68]["name"] = "ColorModifiers"
defs["structs"]["ImGuiContext"][68]["template_type"] = "ImGuiColorMod"
defs["structs"]["ImGuiContext"][68]["type"] = "ImVector_ImGuiColorMod"
defs["structs"]["ImGuiContext"][69] = {}
defs["structs"]["ImGuiContext"][69]["comment"] = " // When set we will update mouse position if (io.ConfigFlags & ImGuiConfigFlags_NavEnableSetMousePos) if set (NB: this not enabled by default)"
defs["structs"]["ImGuiContext"][69]["name"] = "StyleModifiers"
defs["structs"]["ImGuiContext"][69]["template_type"] = "ImGuiStyleMod"
defs["structs"]["ImGuiContext"][69]["type"] = "ImVector_ImGuiStyleMod"
defs["structs"]["ImGuiContext"][70] = {}
defs["structs"]["ImGuiContext"][70]["comment"] = " // When user starts using mouse, we hide gamepad/keyboard highlight (NB: but they are still available, which is why NavDisableHighlight isn't always != NavDisableMouseHover)"
defs["structs"]["ImGuiContext"][70]["name"] = "FontStack"
defs["structs"]["ImGuiContext"][70]["template_type"] = "ImFont*"
defs["structs"]["ImGuiContext"][70]["type"] = "ImVector_ImFontPtr"
defs["structs"]["ImGuiContext"][71] = {}
defs["structs"]["ImGuiContext"][71]["comment"] = " // When user starts using gamepad/keyboard, we hide mouse hovering highlight until mouse is touched again."
defs["structs"]["ImGuiContext"][71]["name"] = "OpenPopupStack"
defs["structs"]["ImGuiContext"][71]["template_type"] = "ImGuiPopupData"
defs["structs"]["ImGuiContext"][71]["type"] = "ImVector_ImGuiPopupData"
defs["structs"]["ImGuiContext"][72] = {}
defs["structs"]["ImGuiContext"][72]["comment"] = " // ~~ NavMoveRequest || NavInitRequest"
defs["structs"]["ImGuiContext"][72]["name"] = "BeginPopupStack"
defs["structs"]["ImGuiContext"][72]["template_type"] = "ImGuiPopupData"
defs["structs"]["ImGuiContext"][72]["type"] = "ImVector_ImGuiPopupData"
defs["structs"]["ImGuiContext"][73] = {}
defs["structs"]["ImGuiContext"][73]["comment"] = " // Init request for appearing window to select first item"
defs["structs"]["ImGuiContext"][73]["name"] = "Viewports"
defs["structs"]["ImGuiContext"][73]["template_type"] = "ImGuiViewportP*"
defs["structs"]["ImGuiContext"][73]["type"] = "ImVector_ImGuiViewportPPtr"
defs["structs"]["ImGuiContext"][74] = {}
defs["structs"]["ImGuiContext"][74]["comment"] = " // Init request result (first item of the window, or one for which SetItemDefaultFocus() was called)"
defs["structs"]["ImGuiContext"][74]["name"] = "CurrentDpiScale"
defs["structs"]["ImGuiContext"][74]["type"] = "float"
defs["structs"]["ImGuiContext"][75] = {}
defs["structs"]["ImGuiContext"][75]["comment"] = " // Init request result rectangle (relative to parent window)"
defs["structs"]["ImGuiContext"][75]["name"] = "CurrentViewport"
defs["structs"]["ImGuiContext"][75]["type"] = "ImGuiViewportP*"
defs["structs"]["ImGuiContext"][76] = {}
defs["structs"]["ImGuiContext"][76]["comment"] = " // Set by manual scrolling, if we scroll to a point where NavId isn't visible we reset navigation from visible items"
defs["structs"]["ImGuiContext"][76]["name"] = "MouseViewport"
defs["structs"]["ImGuiContext"][76]["type"] = "ImGuiViewportP*"
defs["structs"]["ImGuiContext"][77] = {}
defs["structs"]["ImGuiContext"][77]["comment"] = " // Move request for this frame"
defs["structs"]["ImGuiContext"][77]["name"] = "MouseLastHoveredViewport"
defs["structs"]["ImGuiContext"][77]["type"] = "ImGuiViewportP*"
defs["structs"]["ImGuiContext"][78] = {}
defs["structs"]["ImGuiContext"][78]["comment"] = " // None / ForwardQueued / ForwardActive (this is used to navigate sibling parent menus from a child menu)"
defs["structs"]["ImGuiContext"][78]["name"] = "PlatformLastFocusedViewport"
defs["structs"]["ImGuiContext"][78]["type"] = "ImGuiID"
defs["structs"]["ImGuiContext"][79] = {}
defs["structs"]["ImGuiContext"][79]["comment"] = " // Direction of the move request (left/right/up/down), direction of the previous move request"
defs["structs"]["ImGuiContext"][79]["name"] = "ViewportFrontMostStampCount"
defs["structs"]["ImGuiContext"][79]["type"] = "int"
defs["structs"]["ImGuiContext"][80] = {}
defs["structs"]["ImGuiContext"][80]["comment"] = " // FIXME-NAV: Describe the purpose of this better. Might want to rename?"
defs["structs"]["ImGuiContext"][80]["name"] = "NavWindow"
defs["structs"]["ImGuiContext"][80]["type"] = "ImGuiWindow*"
defs["structs"]["ImGuiContext"][81] = {}
defs["structs"]["ImGuiContext"][81]["comment"] = " // Best move request candidate within NavWindow"
defs["structs"]["ImGuiContext"][81]["name"] = "NavId"
defs["structs"]["ImGuiContext"][81]["type"] = "ImGuiID"
defs["structs"]["ImGuiContext"][82] = {}
defs["structs"]["ImGuiContext"][82]["comment"] = " // Best move request candidate within NavWindow that are mostly visible (when using ImGuiNavMoveFlags_AlsoScoreVisibleSet flag)"
defs["structs"]["ImGuiContext"][82]["name"] = "NavFocusScopeId"
defs["structs"]["ImGuiContext"][82]["type"] = "ImGuiID"
defs["structs"]["ImGuiContext"][83] = {}
defs["structs"]["ImGuiContext"][83]["comment"] = " // Best move request candidate within NavWindow's flattened hierarchy (when using ImGuiWindowFlags_NavFlattened flag)"
defs["structs"]["ImGuiContext"][83]["name"] = "NavActivateId"
defs["structs"]["ImGuiContext"][83]["type"] = "ImGuiID"
defs["structs"]["ImGuiContext"][84] = {}
defs["structs"]["ImGuiContext"][84]["comment"] = " // Window which requested trying nav wrap-around."
defs["structs"]["ImGuiContext"][84]["name"] = "NavActivateDownId"
defs["structs"]["ImGuiContext"][84]["type"] = "ImGuiID"
defs["structs"]["ImGuiContext"][85] = {}
defs["structs"]["ImGuiContext"][85]["comment"] = " // Wrap-around operation flags."
defs["structs"]["ImGuiContext"][85]["name"] = "NavActivatePressedId"
defs["structs"]["ImGuiContext"][85]["type"] = "ImGuiID"
defs["structs"]["ImGuiContext"][86] = {}
defs["structs"]["ImGuiContext"][86]["comment"] = " // Target window when doing CTRL+Tab (or Pad Menu + FocusPrev/Next), this window is temporarily displayed top-most!"
defs["structs"]["ImGuiContext"][86]["name"] = "NavInputId"
defs["structs"]["ImGuiContext"][86]["type"] = "ImGuiID"
defs["structs"]["ImGuiContext"][87] = {}
defs["structs"]["ImGuiContext"][87]["comment"] = " // Record of last valid NavWindowingTarget until DimBgRatio and NavWindowingHighlightAlpha becomes 0.0f, so the fade-out can stay on it."
defs["structs"]["ImGuiContext"][87]["name"] = "NavJustTabbedId"
defs["structs"]["ImGuiContext"][87]["type"] = "ImGuiID"
defs["structs"]["ImGuiContext"][88] = {}
defs["structs"]["ImGuiContext"][88]["comment"] = " // Internal window actually listing the CTRL+Tab contents"
defs["structs"]["ImGuiContext"][88]["name"] = "NavJustMovedToId"
defs["structs"]["ImGuiContext"][88]["type"] = "ImGuiID"
defs["structs"]["ImGuiContext"][89] = {}
defs["structs"]["ImGuiContext"][89]["comment"] = " //"
defs["structs"]["ImGuiContext"][89]["name"] = "NavJustMovedToFocusScopeId"
defs["structs"]["ImGuiContext"][89]["type"] = "ImGuiID"
defs["structs"]["ImGuiContext"][90] = {}
defs["structs"]["ImGuiContext"][90]["comment"] = " //"
defs["structs"]["ImGuiContext"][90]["name"] = "NavJustMovedToKeyMods"
defs["structs"]["ImGuiContext"][90]["type"] = "ImGuiKeyModFlags"
defs["structs"]["ImGuiContext"][91] = {}
defs["structs"]["ImGuiContext"][91]["comment"] = " // Any item being requested for focus, stored as an index (we on layout to be stable between the frame pressing TAB and the next frame, semi-ouch)"
defs["structs"]["ImGuiContext"][91]["name"] = "NavNextActivateId"
defs["structs"]["ImGuiContext"][91]["type"] = "ImGuiID"
defs["structs"]["ImGuiContext"][92] = {}
defs["structs"]["ImGuiContext"][92]["comment"] = " // Tab item being requested for focus, stored as an index"
defs["structs"]["ImGuiContext"][92]["name"] = "NavInputSource"
defs["structs"]["ImGuiContext"][92]["type"] = "ImGuiInputSource"
defs["structs"]["ImGuiContext"][93] = {}
defs["structs"]["ImGuiContext"][93]["comment"] = " // Stored for next frame"
defs["structs"]["ImGuiContext"][93]["name"] = "NavScoringRect"
defs["structs"]["ImGuiContext"][93]["type"] = "ImRect"
defs["structs"]["ImGuiContext"][94] = {}
defs["structs"]["ImGuiContext"][94]["comment"] = " // \""
defs["structs"]["ImGuiContext"][94]["name"] = "NavScoringCount"
defs["structs"]["ImGuiContext"][94]["type"] = "int"
defs["structs"]["ImGuiContext"][95] = {}
defs["structs"]["ImGuiContext"][95]["comment"] = " //"
defs["structs"]["ImGuiContext"][95]["name"] = "NavLayer"
defs["structs"]["ImGuiContext"][95]["type"] = "ImGuiNavLayer"
defs["structs"]["ImGuiContext"][96] = {}
defs["structs"]["ImGuiContext"][96]["comment"] = " // 0.0..1.0 animation when fading in a dimming background (for modal window and CTRL+TAB list)"
defs["structs"]["ImGuiContext"][96]["name"] = "NavIdTabCounter"
defs["structs"]["ImGuiContext"][96]["type"] = "int"
defs["structs"]["ImGuiContext"][97] = {}
defs["structs"]["ImGuiContext"][97]["comment"] = " // Set when within a BeginDragDropXXX/EndDragDropXXX block for a drag source."
defs["structs"]["ImGuiContext"][97]["name"] = "NavIdIsAlive"
defs["structs"]["ImGuiContext"][97]["type"] = "bool"
defs["structs"]["ImGuiContext"][98] = {}
defs["structs"]["ImGuiContext"][98]["comment"] = " // Set when within a BeginDragDropXXX/EndDragDropXXX block for a drag target."
defs["structs"]["ImGuiContext"][98]["name"] = "NavMousePosDirty"
defs["structs"]["ImGuiContext"][98]["type"] = "bool"
defs["structs"]["ImGuiContext"][99] = {}
defs["structs"]["ImGuiContext"][99]["comment"] = " // Store rectangle of current target candidate (we favor small targets when overlapping)"
defs["structs"]["ImGuiContext"][99]["name"] = "NavDisableHighlight"
defs["structs"]["ImGuiContext"][99]["type"] = "bool"
defs["structs"]["ImGuiContext"][100] = {}
defs["structs"]["ImGuiContext"][100]["comment"] = " // Target item surface (we resolve overlapping targets by prioritizing the smaller surface)"
defs["structs"]["ImGuiContext"][100]["name"] = "NavDisableMouseHover"
defs["structs"]["ImGuiContext"][100]["type"] = "bool"
defs["structs"]["ImGuiContext"][101] = {}
defs["structs"]["ImGuiContext"][101]["comment"] = " // Target item id (set at the time of accepting the payload)"
defs["structs"]["ImGuiContext"][101]["name"] = "NavAnyRequest"
defs["structs"]["ImGuiContext"][101]["type"] = "bool"
defs["structs"]["ImGuiContext"][102] = {}
defs["structs"]["ImGuiContext"][102]["comment"] = " // Target item id from previous frame (we need to store this to allow for overlapping drag and drop targets)"
defs["structs"]["ImGuiContext"][102]["name"] = "NavInitRequest"
defs["structs"]["ImGuiContext"][102]["type"] = "bool"
defs["structs"]["ImGuiContext"][103] = {}
defs["structs"]["ImGuiContext"][103]["comment"] = " // Last time a target expressed a desire to accept the source"
defs["structs"]["ImGuiContext"][103]["name"] = "NavInitRequestFromMove"
defs["structs"]["ImGuiContext"][103]["type"] = "bool"
defs["structs"]["ImGuiContext"][104] = {}
defs["structs"]["ImGuiContext"][104]["comment"] = " // Set when holding a payload just made ButtonBehavior() return a press."
defs["structs"]["ImGuiContext"][104]["name"] = "NavInitResultId"
defs["structs"]["ImGuiContext"][104]["type"] = "ImGuiID"
defs["structs"]["ImGuiContext"][105] = {}
defs["structs"]["ImGuiContext"][105]["comment"] = " // We don't expose the ImVector<> directly, ImGuiPayload only holds pointer+size"
defs["structs"]["ImGuiContext"][105]["name"] = "NavInitResultRectRel"
defs["structs"]["ImGuiContext"][105]["type"] = "ImRect"
defs["structs"]["ImGuiContext"][106] = {}
defs["structs"]["ImGuiContext"][106]["comment"] = " // Local buffer for small payloads"
defs["structs"]["ImGuiContext"][106]["name"] = "NavMoveFromClampedRefRect"
defs["structs"]["ImGuiContext"][106]["type"] = "bool"
defs["structs"]["ImGuiContext"][107] = {}
defs["structs"]["ImGuiContext"][107]["comment"] = " // Temporary text input when CTRL+clicking on a slider, etc."
defs["structs"]["ImGuiContext"][107]["name"] = "NavMoveRequest"
defs["structs"]["ImGuiContext"][107]["type"] = "bool"
defs["structs"]["ImGuiContext"][108] = {}
defs["structs"]["ImGuiContext"][108]["comment"] = " // Store user options for color edit widgets"
defs["structs"]["ImGuiContext"][108]["name"] = "NavMoveRequestFlags"
defs["structs"]["ImGuiContext"][108]["type"] = "ImGuiNavMoveFlags"
defs["structs"]["ImGuiContext"][109] = {}
defs["structs"]["ImGuiContext"][109]["comment"] = " // Backup of last Hue associated to LastColor[3], so we can restore Hue in lossy RGB<>HSV round trips"
defs["structs"]["ImGuiContext"][109]["name"] = "NavMoveRequestForward"
defs["structs"]["ImGuiContext"][109]["type"] = "ImGuiNavForward"
defs["structs"]["ImGuiContext"][110] = {}
defs["structs"]["ImGuiContext"][110]["comment"] = " // Backup of last Saturation associated to LastColor[3], so we can restore Saturation in lossy RGB<>HSV round trips"
defs["structs"]["ImGuiContext"][110]["name"] = "NavMoveRequestKeyMods"
defs["structs"]["ImGuiContext"][110]["type"] = "ImGuiKeyModFlags"
defs["structs"]["ImGuiContext"][111] = {}
defs["structs"]["ImGuiContext"][111]["comment"] = " // Initial/reference color at the time of opening the color picker."
defs["structs"]["ImGuiContext"][111]["name"] = "NavMoveDir"
defs["structs"]["ImGuiContext"][111]["type"] = "ImGuiDir"
defs["structs"]["ImGuiContext"][112] = {}
defs["structs"]["ImGuiContext"][112]["comment"] = " // Initial/reference color at the time of opening the color picker."
defs["structs"]["ImGuiContext"][112]["name"] = "NavMoveDirLast"
defs["structs"]["ImGuiContext"][112]["type"] = "ImGuiDir"
defs["structs"]["ImGuiContext"][113] = {}
defs["structs"]["ImGuiContext"][113]["comment"] = " // Accumulated slider delta when using navigation controls."
defs["structs"]["ImGuiContext"][113]["name"] = "NavMoveClipDir"
defs["structs"]["ImGuiContext"][113]["type"] = "ImGuiDir"
defs["structs"]["ImGuiContext"][114] = {}
defs["structs"]["ImGuiContext"][114]["comment"] = " // Has the accumulated slider delta changed since last time we tried to apply it?"
defs["structs"]["ImGuiContext"][114]["name"] = "NavMoveResultLocal"
defs["structs"]["ImGuiContext"][114]["type"] = "ImGuiNavMoveResult"
defs["structs"]["ImGuiContext"][115] = {}
defs["structs"]["ImGuiContext"][115]["comment"] = " // Accumulator for dragging modification. Always high-precision, not rounded by end-user precision settings"
defs["structs"]["ImGuiContext"][115]["name"] = "NavMoveResultLocalVisibleSet"
defs["structs"]["ImGuiContext"][115]["type"] = "ImGuiNavMoveResult"
defs["structs"]["ImGuiContext"][116] = {}
defs["structs"]["ImGuiContext"][116]["comment"] = " // If speed == 0.0f, uses (max-min) * DragSpeedDefaultRatio"
defs["structs"]["ImGuiContext"][116]["name"] = "NavMoveResultOther"
defs["structs"]["ImGuiContext"][116]["type"] = "ImGuiNavMoveResult"
defs["structs"]["ImGuiContext"][117] = {}
defs["structs"]["ImGuiContext"][117]["comment"] = " // Distance between mouse and center of grab box, normalized in parent space. Use storage?"
defs["structs"]["ImGuiContext"][117]["name"] = "NavWrapRequestWindow"
defs["structs"]["ImGuiContext"][117]["type"] = "ImGuiWindow*"
defs["structs"]["ImGuiContext"][118] = {}
defs["structs"]["ImGuiContext"][118]["comment"] = " // If no custom clipboard handler is defined"
defs["structs"]["ImGuiContext"][118]["name"] = "NavWrapRequestFlags"
defs["structs"]["ImGuiContext"][118]["type"] = "ImGuiNavMoveFlags"
defs["structs"]["ImGuiContext"][119] = {}
defs["structs"]["ImGuiContext"][119]["comment"] = " // A list of menu IDs that were rendered at least once"
defs["structs"]["ImGuiContext"][119]["name"] = "NavWindowingTarget"
defs["structs"]["ImGuiContext"][119]["type"] = "ImGuiWindow*"
defs["structs"]["ImGuiContext"][120] = {}
defs["structs"]["ImGuiContext"][120]["comment"] = " // Cursor position request & last passed to the OS Input Method Editor"
defs["structs"]["ImGuiContext"][120]["name"] = "NavWindowingTargetAnim"
defs["structs"]["ImGuiContext"][120]["type"] = "ImGuiWindow*"
defs["structs"]["ImGuiContext"][121] = {}
defs["structs"]["ImGuiContext"][121]["comment"] = " // Save .ini Settings to memory when time reaches zero"
defs["structs"]["ImGuiContext"][121]["name"] = "NavWindowingListWindow"
defs["structs"]["ImGuiContext"][121]["type"] = "ImGuiWindow*"
defs["structs"]["ImGuiContext"][122] = {}
defs["structs"]["ImGuiContext"][122]["comment"] = " // In memory .ini settings"
defs["structs"]["ImGuiContext"][122]["name"] = "NavWindowingTimer"
defs["structs"]["ImGuiContext"][122]["type"] = "float"
defs["structs"]["ImGuiContext"][123] = {}
defs["structs"]["ImGuiContext"][123]["comment"] = " // List of .ini settings handlers"
defs["structs"]["ImGuiContext"][123]["name"] = "NavWindowingHighlightAlpha"
defs["structs"]["ImGuiContext"][123]["type"] = "float"
defs["structs"]["ImGuiContext"][124] = {}
defs["structs"]["ImGuiContext"][124]["comment"] = " // ImGuiWindow .ini settings entries"
defs["structs"]["ImGuiContext"][124]["name"] = "NavWindowingToggleLayer"
defs["structs"]["ImGuiContext"][124]["type"] = "bool"
defs["structs"]["ImGuiContext"][125] = {}
defs["structs"]["ImGuiContext"][125]["comment"] = " // Currently capturing"
defs["structs"]["ImGuiContext"][125]["name"] = "FocusRequestCurrWindow"
defs["structs"]["ImGuiContext"][125]["type"] = "ImGuiWindow*"
defs["structs"]["ImGuiContext"][126] = {}
defs["structs"]["ImGuiContext"][126]["comment"] = " // Capture target"
defs["structs"]["ImGuiContext"][126]["name"] = "FocusRequestNextWindow"
defs["structs"]["ImGuiContext"][126]["type"] = "ImGuiWindow*"
defs["structs"]["ImGuiContext"][127] = {}
defs["structs"]["ImGuiContext"][127]["comment"] = " // If != NULL log to stdout/ file"
defs["structs"]["ImGuiContext"][127]["name"] = "FocusRequestCurrCounterRegular"
defs["structs"]["ImGuiContext"][127]["type"] = "int"
defs["structs"]["ImGuiContext"][128] = {}
defs["structs"]["ImGuiContext"][128]["comment"] = " // Accumulation buffer when log to clipboard. This is pointer so our GImGui static constructor doesn't call heap allocators."
defs["structs"]["ImGuiContext"][128]["name"] = "FocusRequestCurrCounterTabStop"
defs["structs"]["ImGuiContext"][128]["type"] = "int"
defs["structs"]["ImGuiContext"][129] = {}
defs["structs"]["ImGuiContext"][129]["comment"] = " // Default/stored value for LogDepthMaxExpand if not specified in the LogXXX function call."
defs["structs"]["ImGuiContext"][129]["name"] = "FocusRequestNextCounterRegular"
defs["structs"]["ImGuiContext"][129]["type"] = "int"
defs["structs"]["ImGuiContext"][130] = {}
defs["structs"]["ImGuiContext"][130]["comment"] = " // Item picker is active (started with DebugStartItemPicker())"
defs["structs"]["ImGuiContext"][130]["name"] = "FocusRequestNextCounterTabStop"
defs["structs"]["ImGuiContext"][130]["type"] = "int"
defs["structs"]["ImGuiContext"][131] = {}
defs["structs"]["ImGuiContext"][131]["comment"] = " // Will call IM_DEBUG_BREAK() when encountering this id"
defs["structs"]["ImGuiContext"][131]["name"] = "FocusTabPressed"
defs["structs"]["ImGuiContext"][131]["type"] = "bool"
defs["structs"]["ImGuiContext"][132] = {}
defs["structs"]["ImGuiContext"][132]["comment"] = " // Calculate estimate of framerate for user over the last 2 seconds."
defs["structs"]["ImGuiContext"][132]["name"] = "DimBgRatio"
defs["structs"]["ImGuiContext"][132]["type"] = "float"
defs["structs"]["ImGuiContext"][133] = {}
defs["structs"]["ImGuiContext"][133]["comment"] = " // Explicit capture via CaptureKeyboardFromApp()/CaptureMouseFromApp() sets those flags"
defs["structs"]["ImGuiContext"][133]["name"] = "MouseCursor"
defs["structs"]["ImGuiContext"][133]["type"] = "ImGuiMouseCursor"
defs["structs"]["ImGuiContext"][134] = {}
defs["structs"]["ImGuiContext"][134]["comment"] = " // Temporary text buffer"
defs["structs"]["ImGuiContext"][134]["name"] = "DragDropActive"
defs["structs"]["ImGuiContext"][134]["type"] = "bool"
defs["structs"]["ImGuiContext"][135] = {}
defs["structs"]["ImGuiContext"][135]["name"] = "DragDropWithinSource"
defs["structs"]["ImGuiContext"][135]["type"] = "bool"
defs["structs"]["ImGuiContext"][136] = {}
defs["structs"]["ImGuiContext"][136]["name"] = "DragDropWithinTarget"
defs["structs"]["ImGuiContext"][136]["type"] = "bool"
defs["structs"]["ImGuiContext"][137] = {}
defs["structs"]["ImGuiContext"][137]["name"] = "DragDropSourceFlags"
defs["structs"]["ImGuiContext"][137]["type"] = "ImGuiDragDropFlags"
defs["structs"]["ImGuiContext"][138] = {}
defs["structs"]["ImGuiContext"][138]["name"] = "DragDropSourceFrameCount"
defs["structs"]["ImGuiContext"][138]["type"] = "int"
defs["structs"]["ImGuiContext"][139] = {}
defs["structs"]["ImGuiContext"][139]["name"] = "DragDropMouseButton"
defs["structs"]["ImGuiContext"][139]["type"] = "int"
defs["structs"]["ImGuiContext"][140] = {}
defs["structs"]["ImGuiContext"][140]["name"] = "DragDropPayload"
defs["structs"]["ImGuiContext"][140]["type"] = "ImGuiPayload"
defs["structs"]["ImGuiContext"][141] = {}
defs["structs"]["ImGuiContext"][141]["name"] = "DragDropTargetRect"
defs["structs"]["ImGuiContext"][141]["type"] = "ImRect"
defs["structs"]["ImGuiContext"][142] = {}
defs["structs"]["ImGuiContext"][142]["name"] = "DragDropTargetId"
defs["structs"]["ImGuiContext"][142]["type"] = "ImGuiID"
defs["structs"]["ImGuiContext"][143] = {}
defs["structs"]["ImGuiContext"][143]["name"] = "DragDropAcceptFlags"
defs["structs"]["ImGuiContext"][143]["type"] = "ImGuiDragDropFlags"
defs["structs"]["ImGuiContext"][144] = {}
defs["structs"]["ImGuiContext"][144]["name"] = "DragDropAcceptIdCurrRectSurface"
defs["structs"]["ImGuiContext"][144]["type"] = "float"
defs["structs"]["ImGuiContext"][145] = {}
defs["structs"]["ImGuiContext"][145]["name"] = "DragDropAcceptIdCurr"
defs["structs"]["ImGuiContext"][145]["type"] = "ImGuiID"
defs["structs"]["ImGuiContext"][146] = {}
defs["structs"]["ImGuiContext"][146]["name"] = "DragDropAcceptIdPrev"
defs["structs"]["ImGuiContext"][146]["type"] = "ImGuiID"
defs["structs"]["ImGuiContext"][147] = {}
defs["structs"]["ImGuiContext"][147]["name"] = "DragDropAcceptFrameCount"
defs["structs"]["ImGuiContext"][147]["type"] = "int"
defs["structs"]["ImGuiContext"][148] = {}
defs["structs"]["ImGuiContext"][148]["name"] = "DragDropHoldJustPressedId"
defs["structs"]["ImGuiContext"][148]["type"] = "ImGuiID"
defs["structs"]["ImGuiContext"][149] = {}
defs["structs"]["ImGuiContext"][149]["name"] = "DragDropPayloadBufHeap"
defs["structs"]["ImGuiContext"][149]["template_type"] = "unsigned char"
defs["structs"]["ImGuiContext"][149]["type"] = "ImVector_unsigned_char"
defs["structs"]["ImGuiContext"][150] = {}
defs["structs"]["ImGuiContext"][150]["name"] = "DragDropPayloadBufLocal[16]"
defs["structs"]["ImGuiContext"][150]["size"] = 16
defs["structs"]["ImGuiContext"][150]["type"] = "unsigned char"
defs["structs"]["ImGuiContext"][151] = {}
defs["structs"]["ImGuiContext"][151]["name"] = "CurrentTabBar"
defs["structs"]["ImGuiContext"][151]["type"] = "ImGuiTabBar*"
defs["structs"]["ImGuiContext"][152] = {}
defs["structs"]["ImGuiContext"][152]["name"] = "TabBars"
defs["structs"]["ImGuiContext"][152]["template_type"] = "ImGuiTabBar"
defs["structs"]["ImGuiContext"][152]["type"] = "ImPool_ImGuiTabBar"
defs["structs"]["ImGuiContext"][153] = {}
defs["structs"]["ImGuiContext"][153]["name"] = "CurrentTabBarStack"
defs["structs"]["ImGuiContext"][153]["template_type"] = "ImGuiPtrOrIndex"
defs["structs"]["ImGuiContext"][153]["type"] = "ImVector_ImGuiPtrOrIndex"
defs["structs"]["ImGuiContext"][154] = {}
defs["structs"]["ImGuiContext"][154]["name"] = "ShrinkWidthBuffer"
defs["structs"]["ImGuiContext"][154]["template_type"] = "ImGuiShrinkWidthItem"
defs["structs"]["ImGuiContext"][154]["type"] = "ImVector_ImGuiShrinkWidthItem"
defs["structs"]["ImGuiContext"][155] = {}
defs["structs"]["ImGuiContext"][155]["name"] = "LastValidMousePos"
defs["structs"]["ImGuiContext"][155]["type"] = "ImVec2"
defs["structs"]["ImGuiContext"][156] = {}
defs["structs"]["ImGuiContext"][156]["name"] = "InputTextState"
defs["structs"]["ImGuiContext"][156]["type"] = "ImGuiInputTextState"
defs["structs"]["ImGuiContext"][157] = {}
defs["structs"]["ImGuiContext"][157]["name"] = "InputTextPasswordFont"
defs["structs"]["ImGuiContext"][157]["type"] = "ImFont"
defs["structs"]["ImGuiContext"][158] = {}
defs["structs"]["ImGuiContext"][158]["name"] = "TempInputId"
defs["structs"]["ImGuiContext"][158]["type"] = "ImGuiID"
defs["structs"]["ImGuiContext"][159] = {}
defs["structs"]["ImGuiContext"][159]["name"] = "ColorEditOptions"
defs["structs"]["ImGuiContext"][159]["type"] = "ImGuiColorEditFlags"
defs["structs"]["ImGuiContext"][160] = {}
defs["structs"]["ImGuiContext"][160]["name"] = "ColorEditLastHue"
defs["structs"]["ImGuiContext"][160]["type"] = "float"
defs["structs"]["ImGuiContext"][161] = {}
defs["structs"]["ImGuiContext"][161]["name"] = "ColorEditLastSat"
defs["structs"]["ImGuiContext"][161]["type"] = "float"
defs["structs"]["ImGuiContext"][162] = {}
defs["structs"]["ImGuiContext"][162]["name"] = "ColorEditLastColor[3]"
defs["structs"]["ImGuiContext"][162]["size"] = 3
defs["structs"]["ImGuiContext"][162]["type"] = "float"
defs["structs"]["ImGuiContext"][163] = {}
defs["structs"]["ImGuiContext"][163]["name"] = "ColorPickerRef"
defs["structs"]["ImGuiContext"][163]["type"] = "ImVec4"
defs["structs"]["ImGuiContext"][164] = {}
defs["structs"]["ImGuiContext"][164]["name"] = "SliderCurrentAccum"
defs["structs"]["ImGuiContext"][164]["type"] = "float"
defs["structs"]["ImGuiContext"][165] = {}
defs["structs"]["ImGuiContext"][165]["name"] = "SliderCurrentAccumDirty"
defs["structs"]["ImGuiContext"][165]["type"] = "bool"
defs["structs"]["ImGuiContext"][166] = {}
defs["structs"]["ImGuiContext"][166]["name"] = "DragCurrentAccumDirty"
defs["structs"]["ImGuiContext"][166]["type"] = "bool"
defs["structs"]["ImGuiContext"][167] = {}
defs["structs"]["ImGuiContext"][167]["name"] = "DragCurrentAccum"
defs["structs"]["ImGuiContext"][167]["type"] = "float"
defs["structs"]["ImGuiContext"][168] = {}
defs["structs"]["ImGuiContext"][168]["name"] = "DragSpeedDefaultRatio"
defs["structs"]["ImGuiContext"][168]["type"] = "float"
defs["structs"]["ImGuiContext"][169] = {}
defs["structs"]["ImGuiContext"][169]["name"] = "ScrollbarClickDeltaToGrabCenter"
defs["structs"]["ImGuiContext"][169]["type"] = "float"
defs["structs"]["ImGuiContext"][170] = {}
defs["structs"]["ImGuiContext"][170]["name"] = "TooltipOverrideCount"
defs["structs"]["ImGuiContext"][170]["type"] = "int"
defs["structs"]["ImGuiContext"][171] = {}
defs["structs"]["ImGuiContext"][171]["name"] = "ClipboardHandlerData"
defs["structs"]["ImGuiContext"][171]["template_type"] = "char"
defs["structs"]["ImGuiContext"][171]["type"] = "ImVector_char"
defs["structs"]["ImGuiContext"][172] = {}
defs["structs"]["ImGuiContext"][172]["name"] = "MenusIdSubmittedThisFrame"
defs["structs"]["ImGuiContext"][172]["template_type"] = "ImGuiID"
defs["structs"]["ImGuiContext"][172]["type"] = "ImVector_ImGuiID"
defs["structs"]["ImGuiContext"][173] = {}
defs["structs"]["ImGuiContext"][173]["name"] = "PlatformImePos"
defs["structs"]["ImGuiContext"][173]["type"] = "ImVec2"
defs["structs"]["ImGuiContext"][174] = {}
defs["structs"]["ImGuiContext"][174]["name"] = "PlatformImeLastPos"
defs["structs"]["ImGuiContext"][174]["type"] = "ImVec2"
defs["structs"]["ImGuiContext"][175] = {}
defs["structs"]["ImGuiContext"][175]["name"] = "PlatformImePosViewport"
defs["structs"]["ImGuiContext"][175]["type"] = "ImGuiViewportP*"
defs["structs"]["ImGuiContext"][176] = {}
defs["structs"]["ImGuiContext"][176]["name"] = "DockContext"
defs["structs"]["ImGuiContext"][176]["type"] = "ImGuiDockContext"
defs["structs"]["ImGuiContext"][177] = {}
defs["structs"]["ImGuiContext"][177]["name"] = "SettingsLoaded"
defs["structs"]["ImGuiContext"][177]["type"] = "bool"
defs["structs"]["ImGuiContext"][178] = {}
defs["structs"]["ImGuiContext"][178]["name"] = "SettingsDirtyTimer"
defs["structs"]["ImGuiContext"][178]["type"] = "float"
defs["structs"]["ImGuiContext"][179] = {}
defs["structs"]["ImGuiContext"][179]["name"] = "SettingsIniData"
defs["structs"]["ImGuiContext"][179]["type"] = "ImGuiTextBuffer"
defs["structs"]["ImGuiContext"][180] = {}
defs["structs"]["ImGuiContext"][180]["name"] = "SettingsHandlers"
defs["structs"]["ImGuiContext"][180]["template_type"] = "ImGuiSettingsHandler"
defs["structs"]["ImGuiContext"][180]["type"] = "ImVector_ImGuiSettingsHandler"
defs["structs"]["ImGuiContext"][181] = {}
defs["structs"]["ImGuiContext"][181]["name"] = "SettingsWindows"
defs["structs"]["ImGuiContext"][181]["template_type"] = "ImGuiWindowSettings"
defs["structs"]["ImGuiContext"][181]["type"] = "ImChunkStream_ImGuiWindowSettings"
defs["structs"]["ImGuiContext"][182] = {}
defs["structs"]["ImGuiContext"][182]["name"] = "LogEnabled"
defs["structs"]["ImGuiContext"][182]["type"] = "bool"
defs["structs"]["ImGuiContext"][183] = {}
defs["structs"]["ImGuiContext"][183]["name"] = "LogType"
defs["structs"]["ImGuiContext"][183]["type"] = "ImGuiLogType"
defs["structs"]["ImGuiContext"][184] = {}
defs["structs"]["ImGuiContext"][184]["name"] = "LogFile"
defs["structs"]["ImGuiContext"][184]["type"] = "ImFileHandle"
defs["structs"]["ImGuiContext"][185] = {}
defs["structs"]["ImGuiContext"][185]["name"] = "LogBuffer"
defs["structs"]["ImGuiContext"][185]["type"] = "ImGuiTextBuffer"
defs["structs"]["ImGuiContext"][186] = {}
defs["structs"]["ImGuiContext"][186]["name"] = "LogLinePosY"
defs["structs"]["ImGuiContext"][186]["type"] = "float"
defs["structs"]["ImGuiContext"][187] = {}
defs["structs"]["ImGuiContext"][187]["name"] = "LogLineFirstItem"
defs["structs"]["ImGuiContext"][187]["type"] = "bool"
defs["structs"]["ImGuiContext"][188] = {}
defs["structs"]["ImGuiContext"][188]["name"] = "LogDepthRef"
defs["structs"]["ImGuiContext"][188]["type"] = "int"
defs["structs"]["ImGuiContext"][189] = {}
defs["structs"]["ImGuiContext"][189]["name"] = "LogDepthToExpand"
defs["structs"]["ImGuiContext"][189]["type"] = "int"
defs["structs"]["ImGuiContext"][190] = {}
defs["structs"]["ImGuiContext"][190]["name"] = "LogDepthToExpandDefault"
defs["structs"]["ImGuiContext"][190]["type"] = "int"
defs["structs"]["ImGuiContext"][191] = {}
defs["structs"]["ImGuiContext"][191]["name"] = "DebugItemPickerActive"
defs["structs"]["ImGuiContext"][191]["type"] = "bool"
defs["structs"]["ImGuiContext"][192] = {}
defs["structs"]["ImGuiContext"][192]["name"] = "DebugItemPickerBreakId"
defs["structs"]["ImGuiContext"][192]["type"] = "ImGuiID"
defs["structs"]["ImGuiContext"][193] = {}
defs["structs"]["ImGuiContext"][193]["name"] = "FramerateSecPerFrame[120]"
defs["structs"]["ImGuiContext"][193]["size"] = 120
defs["structs"]["ImGuiContext"][193]["type"] = "float"
defs["structs"]["ImGuiContext"][194] = {}
defs["structs"]["ImGuiContext"][194]["name"] = "FramerateSecPerFrameIdx"
defs["structs"]["ImGuiContext"][194]["type"] = "int"
defs["structs"]["ImGuiContext"][195] = {}
defs["structs"]["ImGuiContext"][195]["name"] = "FramerateSecPerFrameAccum"
defs["structs"]["ImGuiContext"][195]["type"] = "float"
defs["structs"]["ImGuiContext"][196] = {}
defs["structs"]["ImGuiContext"][196]["name"] = "WantCaptureMouseNextFrame"
defs["structs"]["ImGuiContext"][196]["type"] = "int"
defs["structs"]["ImGuiContext"][197] = {}
defs["structs"]["ImGuiContext"][197]["name"] = "WantCaptureKeyboardNextFrame"
defs["structs"]["ImGuiContext"][197]["type"] = "int"
defs["structs"]["ImGuiContext"][198] = {}
defs["structs"]["ImGuiContext"][198]["name"] = "WantTextInputNextFrame"
defs["structs"]["ImGuiContext"][198]["type"] = "int"
defs["structs"]["ImGuiContext"][199] = {}
defs["structs"]["ImGuiContext"][199]["name"] = "TempBuffer[1024*3+1]"
defs["structs"]["ImGuiContext"][199]["size"] = 3073
defs["structs"]["ImGuiContext"][199]["type"] = "char"
defs["structs"]["ImGuiDataTypeInfo"] = {}
defs["structs"]["ImGuiDataTypeInfo"][1] = {}
defs["structs"]["ImGuiDataTypeInfo"][1]["comment"] = " // Default scanf format for the type"
defs["structs"]["ImGuiDataTypeInfo"][1]["name"] = "Size"
defs["structs"]["ImGuiDataTypeInfo"][1]["type"] = "size_t"
defs["structs"]["ImGuiDataTypeInfo"][2] = {}
defs["structs"]["ImGuiDataTypeInfo"][2]["name"] = "PrintFmt"
defs["structs"]["ImGuiDataTypeInfo"][2]["type"] = "const char*"
defs["structs"]["ImGuiDataTypeInfo"][3] = {}
defs["structs"]["ImGuiDataTypeInfo"][3]["name"] = "ScanFmt"
defs["structs"]["ImGuiDataTypeInfo"][3]["type"] = "const char*"
defs["structs"]["ImGuiDataTypeTempStorage"] = {}
defs["structs"]["ImGuiDataTypeTempStorage"][1] = {}
defs["structs"]["ImGuiDataTypeTempStorage"][1]["name"] = "Data[8]"
defs["structs"]["ImGuiDataTypeTempStorage"][1]["size"] = 8
defs["structs"]["ImGuiDataTypeTempStorage"][1]["type"] = "ImU8"
defs["structs"]["ImGuiDockContext"] = {}
defs["structs"]["ImGuiDockContext"][1] = {}
defs["structs"]["ImGuiDockContext"][1]["name"] = "Nodes"
defs["structs"]["ImGuiDockContext"][1]["type"] = "ImGuiStorage"
defs["structs"]["ImGuiDockContext"][2] = {}
defs["structs"]["ImGuiDockContext"][2]["name"] = "Requests"
defs["structs"]["ImGuiDockContext"][2]["template_type"] = "ImGuiDockRequest"
defs["structs"]["ImGuiDockContext"][2]["type"] = "ImVector_ImGuiDockRequest"
defs["structs"]["ImGuiDockContext"][3] = {}
defs["structs"]["ImGuiDockContext"][3]["name"] = "NodesSettings"
defs["structs"]["ImGuiDockContext"][3]["template_type"] = "ImGuiDockNodeSettings"
defs["structs"]["ImGuiDockContext"][3]["type"] = "ImVector_ImGuiDockNodeSettings"
defs["structs"]["ImGuiDockContext"][4] = {}
defs["structs"]["ImGuiDockContext"][4]["name"] = "WantFullRebuild"
defs["structs"]["ImGuiDockContext"][4]["type"] = "bool"
defs["structs"]["ImGuiDockNode"] = {}
defs["structs"]["ImGuiDockNode"][1] = {}
defs["structs"]["ImGuiDockNode"][1]["comment"] = " // [Split node only] Child nodes (left/right or top/bottom). Consider switching to an array."
defs["structs"]["ImGuiDockNode"][1]["name"] = "ID"
defs["structs"]["ImGuiDockNode"][1]["type"] = "ImGuiID"
defs["structs"]["ImGuiDockNode"][2] = {}
defs["structs"]["ImGuiDockNode"][2]["comment"] = " // Note: unordered list! Iterate TabBar->Tabs for user-order."
defs["structs"]["ImGuiDockNode"][2]["name"] = "SharedFlags"
defs["structs"]["ImGuiDockNode"][2]["type"] = "ImGuiDockNodeFlags"
defs["structs"]["ImGuiDockNode"][3] = {}
defs["structs"]["ImGuiDockNode"][3]["comment"] = " // Current position"
defs["structs"]["ImGuiDockNode"][3]["name"] = "LocalFlags"
defs["structs"]["ImGuiDockNode"][3]["type"] = "ImGuiDockNodeFlags"
defs["structs"]["ImGuiDockNode"][4] = {}
defs["structs"]["ImGuiDockNode"][4]["comment"] = " // Current size"
defs["structs"]["ImGuiDockNode"][4]["name"] = "ParentNode"
defs["structs"]["ImGuiDockNode"][4]["type"] = "ImGuiDockNode*"
defs["structs"]["ImGuiDockNode"][5] = {}
defs["structs"]["ImGuiDockNode"][5]["comment"] = " // [Split node only] Last explicitly written-to size (overridden when using a splitter affecting the node), used to calculate Size."
defs["structs"]["ImGuiDockNode"][5]["name"] = "ChildNodes[2]"
defs["structs"]["ImGuiDockNode"][5]["size"] = 2
defs["structs"]["ImGuiDockNode"][5]["type"] = "ImGuiDockNode*"
defs["structs"]["ImGuiDockNode"][6] = {}
defs["structs"]["ImGuiDockNode"][6]["comment"] = " // [Split node only] Split axis (X or Y)"
defs["structs"]["ImGuiDockNode"][6]["name"] = "Windows"
defs["structs"]["ImGuiDockNode"][6]["template_type"] = "ImGuiWindow*"
defs["structs"]["ImGuiDockNode"][6]["type"] = "ImVector_ImGuiWindowPtr"
defs["structs"]["ImGuiDockNode"][7] = {}
defs["structs"]["ImGuiDockNode"][7]["comment"] = " // [Root node only]"
defs["structs"]["ImGuiDockNode"][7]["name"] = "TabBar"
defs["structs"]["ImGuiDockNode"][7]["type"] = "ImGuiTabBar*"
defs["structs"]["ImGuiDockNode"][8] = {}
defs["structs"]["ImGuiDockNode"][8]["comment"] = " // Generally point to window which is ID is == SelectedTabID, but when CTRL+Tabbing this can be a different window."
defs["structs"]["ImGuiDockNode"][8]["name"] = "Pos"
defs["structs"]["ImGuiDockNode"][8]["type"] = "ImVec2"
defs["structs"]["ImGuiDockNode"][9] = {}
defs["structs"]["ImGuiDockNode"][9]["comment"] = " // [Root node only] Pointer to central node."
defs["structs"]["ImGuiDockNode"][9]["name"] = "Size"
defs["structs"]["ImGuiDockNode"][9]["type"] = "ImVec2"
defs["structs"]["ImGuiDockNode"][10] = {}
defs["structs"]["ImGuiDockNode"][10]["comment"] = " // [Root node only] Set when there is a single visible node within the hierarchy."
defs["structs"]["ImGuiDockNode"][10]["name"] = "SizeRef"
defs["structs"]["ImGuiDockNode"][10]["type"] = "ImVec2"
defs["structs"]["ImGuiDockNode"][11] = {}
defs["structs"]["ImGuiDockNode"][11]["comment"] = " // Last frame number the node was updated or kept alive explicitly with DockSpace() + ImGuiDockNodeFlags_KeepAliveOnly"
defs["structs"]["ImGuiDockNode"][11]["name"] = "SplitAxis"
defs["structs"]["ImGuiDockNode"][11]["type"] = "ImGuiAxis"
defs["structs"]["ImGuiDockNode"][12] = {}
defs["structs"]["ImGuiDockNode"][12]["comment"] = " // Last frame number the node was updated."
defs["structs"]["ImGuiDockNode"][12]["name"] = "WindowClass"
defs["structs"]["ImGuiDockNode"][12]["type"] = "ImGuiWindowClass"
defs["structs"]["ImGuiDockNode"][13] = {}
defs["structs"]["ImGuiDockNode"][13]["comment"] = " // Last frame number the node was focused."
defs["structs"]["ImGuiDockNode"][13]["name"] = "State"
defs["structs"]["ImGuiDockNode"][13]["type"] = "ImGuiDockNodeState"
defs["structs"]["ImGuiDockNode"][14] = {}
defs["structs"]["ImGuiDockNode"][14]["comment"] = " // [Root node only] Which of our child docking node (any ancestor in the hierarchy) was last focused."
defs["structs"]["ImGuiDockNode"][14]["name"] = "HostWindow"
defs["structs"]["ImGuiDockNode"][14]["type"] = "ImGuiWindow*"
defs["structs"]["ImGuiDockNode"][15] = {}
defs["structs"]["ImGuiDockNode"][15]["comment"] = " // [Leaf node only] Which of our tab/window is selected."
defs["structs"]["ImGuiDockNode"][15]["name"] = "VisibleWindow"
defs["structs"]["ImGuiDockNode"][15]["type"] = "ImGuiWindow*"
defs["structs"]["ImGuiDockNode"][16] = {}
defs["structs"]["ImGuiDockNode"][16]["comment"] = " // [Leaf node only] Set when closing a specific tab/window."
defs["structs"]["ImGuiDockNode"][16]["name"] = "CentralNode"
defs["structs"]["ImGuiDockNode"][16]["type"] = "ImGuiDockNode*"
defs["structs"]["ImGuiDockNode"][17] = {}
defs["structs"]["ImGuiDockNode"][17]["comment"] = " // Set to false when the node is hidden (usually disabled as it has no active window)"
defs["structs"]["ImGuiDockNode"][17]["name"] = "OnlyNodeWithWindows"
defs["structs"]["ImGuiDockNode"][17]["type"] = "ImGuiDockNode*"
defs["structs"]["ImGuiDockNode"][18] = {}
defs["structs"]["ImGuiDockNode"][18]["comment"] = " // Set when closing all tabs at once."
defs["structs"]["ImGuiDockNode"][18]["name"] = "LastFrameAlive"
defs["structs"]["ImGuiDockNode"][18]["type"] = "int"
defs["structs"]["ImGuiDockNode"][19] = {}
defs["structs"]["ImGuiDockNode"][19]["comment"] = " // After a node extraction we need to transition toward moving the newly created host window"
defs["structs"]["ImGuiDockNode"][19]["name"] = "LastFrameActive"
defs["structs"]["ImGuiDockNode"][19]["type"] = "int"
defs["structs"]["ImGuiDockNode"][20] = {}
defs["structs"]["ImGuiDockNode"][20]["comment"] = " // Update by DockNodeTreeUpdatePosSize() write-filtering"
defs["structs"]["ImGuiDockNode"][20]["name"] = "LastFrameFocused"
defs["structs"]["ImGuiDockNode"][20]["type"] = "int"
defs["structs"]["ImGuiDockNode"][21] = {}
defs["structs"]["ImGuiDockNode"][21]["name"] = "LastFocusedNodeId"
defs["structs"]["ImGuiDockNode"][21]["type"] = "ImGuiID"
defs["structs"]["ImGuiDockNode"][22] = {}
defs["structs"]["ImGuiDockNode"][22]["name"] = "SelectedTabId"
defs["structs"]["ImGuiDockNode"][22]["type"] = "ImGuiID"
defs["structs"]["ImGuiDockNode"][23] = {}
defs["structs"]["ImGuiDockNode"][23]["name"] = "WantCloseTabId"
defs["structs"]["ImGuiDockNode"][23]["type"] = "ImGuiID"
defs["structs"]["ImGuiDockNode"][24] = {}
defs["structs"]["ImGuiDockNode"][24]["bitfield"] = "3"
defs["structs"]["ImGuiDockNode"][24]["name"] = "AuthorityForPos"
defs["structs"]["ImGuiDockNode"][24]["type"] = "ImGuiDataAuthority"
defs["structs"]["ImGuiDockNode"][25] = {}
defs["structs"]["ImGuiDockNode"][25]["bitfield"] = "3"
defs["structs"]["ImGuiDockNode"][25]["name"] = "AuthorityForSize"
defs["structs"]["ImGuiDockNode"][25]["type"] = "ImGuiDataAuthority"
defs["structs"]["ImGuiDockNode"][26] = {}
defs["structs"]["ImGuiDockNode"][26]["bitfield"] = "3"
defs["structs"]["ImGuiDockNode"][26]["name"] = "AuthorityForViewport"
defs["structs"]["ImGuiDockNode"][26]["type"] = "ImGuiDataAuthority"
defs["structs"]["ImGuiDockNode"][27] = {}
defs["structs"]["ImGuiDockNode"][27]["bitfield"] = "1"
defs["structs"]["ImGuiDockNode"][27]["name"] = "IsVisible"
defs["structs"]["ImGuiDockNode"][27]["type"] = "bool"
defs["structs"]["ImGuiDockNode"][28] = {}
defs["structs"]["ImGuiDockNode"][28]["bitfield"] = "1"
defs["structs"]["ImGuiDockNode"][28]["name"] = "IsFocused"
defs["structs"]["ImGuiDockNode"][28]["type"] = "bool"
defs["structs"]["ImGuiDockNode"][29] = {}
defs["structs"]["ImGuiDockNode"][29]["bitfield"] = "1"
defs["structs"]["ImGuiDockNode"][29]["name"] = "HasCloseButton"
defs["structs"]["ImGuiDockNode"][29]["type"] = "bool"
defs["structs"]["ImGuiDockNode"][30] = {}
defs["structs"]["ImGuiDockNode"][30]["bitfield"] = "1"
defs["structs"]["ImGuiDockNode"][30]["name"] = "HasWindowMenuButton"
defs["structs"]["ImGuiDockNode"][30]["type"] = "bool"
defs["structs"]["ImGuiDockNode"][31] = {}
defs["structs"]["ImGuiDockNode"][31]["bitfield"] = "1"
defs["structs"]["ImGuiDockNode"][31]["name"] = "EnableCloseButton"
defs["structs"]["ImGuiDockNode"][31]["type"] = "bool"
defs["structs"]["ImGuiDockNode"][32] = {}
defs["structs"]["ImGuiDockNode"][32]["bitfield"] = "1"
defs["structs"]["ImGuiDockNode"][32]["name"] = "WantCloseAll"
defs["structs"]["ImGuiDockNode"][32]["type"] = "bool"
defs["structs"]["ImGuiDockNode"][33] = {}
defs["structs"]["ImGuiDockNode"][33]["bitfield"] = "1"
defs["structs"]["ImGuiDockNode"][33]["name"] = "WantLockSizeOnce"
defs["structs"]["ImGuiDockNode"][33]["type"] = "bool"
defs["structs"]["ImGuiDockNode"][34] = {}
defs["structs"]["ImGuiDockNode"][34]["bitfield"] = "1"
defs["structs"]["ImGuiDockNode"][34]["name"] = "WantMouseMove"
defs["structs"]["ImGuiDockNode"][34]["type"] = "bool"
defs["structs"]["ImGuiDockNode"][35] = {}
defs["structs"]["ImGuiDockNode"][35]["bitfield"] = "1"
defs["structs"]["ImGuiDockNode"][35]["name"] = "WantHiddenTabBarUpdate"
defs["structs"]["ImGuiDockNode"][35]["type"] = "bool"
defs["structs"]["ImGuiDockNode"][36] = {}
defs["structs"]["ImGuiDockNode"][36]["bitfield"] = "1"
defs["structs"]["ImGuiDockNode"][36]["name"] = "WantHiddenTabBarToggle"
defs["structs"]["ImGuiDockNode"][36]["type"] = "bool"
defs["structs"]["ImGuiDockNode"][37] = {}
defs["structs"]["ImGuiDockNode"][37]["bitfield"] = "1"
defs["structs"]["ImGuiDockNode"][37]["name"] = "MarkedForPosSizeWrite"
defs["structs"]["ImGuiDockNode"][37]["type"] = "bool"
defs["structs"]["ImGuiGroupData"] = {}
defs["structs"]["ImGuiGroupData"][1] = {}
defs["structs"]["ImGuiGroupData"][1]["name"] = "BackupCursorPos"
defs["structs"]["ImGuiGroupData"][1]["type"] = "ImVec2"
defs["structs"]["ImGuiGroupData"][2] = {}
defs["structs"]["ImGuiGroupData"][2]["name"] = "BackupCursorMaxPos"
defs["structs"]["ImGuiGroupData"][2]["type"] = "ImVec2"
defs["structs"]["ImGuiGroupData"][3] = {}
defs["structs"]["ImGuiGroupData"][3]["name"] = "BackupIndent"
defs["structs"]["ImGuiGroupData"][3]["type"] = "ImVec1"
defs["structs"]["ImGuiGroupData"][4] = {}
defs["structs"]["ImGuiGroupData"][4]["name"] = "BackupGroupOffset"
defs["structs"]["ImGuiGroupData"][4]["type"] = "ImVec1"
defs["structs"]["ImGuiGroupData"][5] = {}
defs["structs"]["ImGuiGroupData"][5]["name"] = "BackupCurrLineSize"
defs["structs"]["ImGuiGroupData"][5]["type"] = "ImVec2"
defs["structs"]["ImGuiGroupData"][6] = {}
defs["structs"]["ImGuiGroupData"][6]["name"] = "BackupCurrLineTextBaseOffset"
defs["structs"]["ImGuiGroupData"][6]["type"] = "float"
defs["structs"]["ImGuiGroupData"][7] = {}
defs["structs"]["ImGuiGroupData"][7]["name"] = "BackupActiveIdIsAlive"
defs["structs"]["ImGuiGroupData"][7]["type"] = "ImGuiID"
defs["structs"]["ImGuiGroupData"][8] = {}
defs["structs"]["ImGuiGroupData"][8]["name"] = "BackupActiveIdPreviousFrameIsAlive"
defs["structs"]["ImGuiGroupData"][8]["type"] = "bool"
defs["structs"]["ImGuiGroupData"][9] = {}
defs["structs"]["ImGuiGroupData"][9]["name"] = "EmitItem"
defs["structs"]["ImGuiGroupData"][9]["type"] = "bool"
defs["structs"]["ImGuiIO"] = {}
defs["structs"]["ImGuiIO"][1] = {}
defs["structs"]["ImGuiIO"][1]["comment"] = " // <unset>          // Main display size, in pixels. This is for the default viewport."
defs["structs"]["ImGuiIO"][1]["name"] = "ConfigFlags"
defs["structs"]["ImGuiIO"][1]["type"] = "ImGuiConfigFlags"
defs["structs"]["ImGuiIO"][2] = {}
defs["structs"]["ImGuiIO"][2]["comment"] = " // = 1.0f/60.0f     // Time elapsed since last frame, in seconds."
defs["structs"]["ImGuiIO"][2]["name"] = "BackendFlags"
defs["structs"]["ImGuiIO"][2]["type"] = "ImGuiBackendFlags"
defs["structs"]["ImGuiIO"][3] = {}
defs["structs"]["ImGuiIO"][3]["comment"] = " // = 5.0f           // Minimum time between saving positions/sizes to .ini file, in seconds."
defs["structs"]["ImGuiIO"][3]["name"] = "DisplaySize"
defs["structs"]["ImGuiIO"][3]["type"] = "ImVec2"
defs["structs"]["ImGuiIO"][4] = {}
defs["structs"]["ImGuiIO"][4]["comment"] = " // = \"imgui.ini\"    // Path to .ini file. Set NULL to disable automatic .ini loading/saving, if e.g. you want to manually load/save from memory."
defs["structs"]["ImGuiIO"][4]["name"] = "DeltaTime"
defs["structs"]["ImGuiIO"][4]["type"] = "float"
defs["structs"]["ImGuiIO"][5] = {}
defs["structs"]["ImGuiIO"][5]["comment"] = " // = \"imgui_log.txt\"// Path to .log file (default parameter to ImGui::LogToFile when no file is specified)."
defs["structs"]["ImGuiIO"][5]["name"] = "IniSavingRate"
defs["structs"]["ImGuiIO"][5]["type"] = "float"
defs["structs"]["ImGuiIO"][6] = {}
defs["structs"]["ImGuiIO"][6]["comment"] = " // = 0.30f          // Time for a double-click, in seconds."
defs["structs"]["ImGuiIO"][6]["name"] = "IniFilename"
defs["structs"]["ImGuiIO"][6]["type"] = "const char*"
defs["structs"]["ImGuiIO"][7] = {}
defs["structs"]["ImGuiIO"][7]["comment"] = " // = 6.0f           // Distance threshold to stay in to validate a double-click, in pixels."
defs["structs"]["ImGuiIO"][7]["name"] = "LogFilename"
defs["structs"]["ImGuiIO"][7]["type"] = "const char*"
defs["structs"]["ImGuiIO"][8] = {}
defs["structs"]["ImGuiIO"][8]["comment"] = " // = 6.0f           // Distance threshold before considering we are dragging."
defs["structs"]["ImGuiIO"][8]["name"] = "MouseDoubleClickTime"
defs["structs"]["ImGuiIO"][8]["type"] = "float"
defs["structs"]["ImGuiIO"][9] = {}
defs["structs"]["ImGuiIO"][9]["comment"] = " // <unset>          // Map of indices into the KeysDown[512] entries array which represent your \"native\" keyboard state."
defs["structs"]["ImGuiIO"][9]["name"] = "MouseDoubleClickMaxDist"
defs["structs"]["ImGuiIO"][9]["type"] = "float"
defs["structs"]["ImGuiIO"][10] = {}
defs["structs"]["ImGuiIO"][10]["comment"] = " // = 0.250f         // When holding a key/button, time before it starts repeating, in seconds (for buttons in Repeat mode, etc.)."
defs["structs"]["ImGuiIO"][10]["name"] = "MouseDragThreshold"
defs["structs"]["ImGuiIO"][10]["type"] = "float"
defs["structs"]["ImGuiIO"][11] = {}
defs["structs"]["ImGuiIO"][11]["comment"] = " // = 0.050f         // When holding a key/button, rate at which it repeats, in seconds."
defs["structs"]["ImGuiIO"][11]["name"] = "KeyMap[ImGuiKey_COUNT]"
defs["structs"]["ImGuiIO"][11]["size"] = 22
defs["structs"]["ImGuiIO"][11]["type"] = "int"
defs["structs"]["ImGuiIO"][12] = {}
defs["structs"]["ImGuiIO"][12]["comment"] = " // = NULL           // Store your own data for retrieval by callbacks."
defs["structs"]["ImGuiIO"][12]["name"] = "KeyRepeatDelay"
defs["structs"]["ImGuiIO"][12]["type"] = "float"
defs["structs"]["ImGuiIO"][13] = {}
defs["structs"]["ImGuiIO"][13]["comment"] = " // <auto>           // Font atlas: load, rasterize and pack one or more fonts into a single texture."
defs["structs"]["ImGuiIO"][13]["name"] = "KeyRepeatRate"
defs["structs"]["ImGuiIO"][13]["type"] = "float"
defs["structs"]["ImGuiIO"][14] = {}
defs["structs"]["ImGuiIO"][14]["comment"] = " // = 1.0f           // Global scale all fonts"
defs["structs"]["ImGuiIO"][14]["name"] = "UserData"
defs["structs"]["ImGuiIO"][14]["type"] = "void*"
defs["structs"]["ImGuiIO"][15] = {}
defs["structs"]["ImGuiIO"][15]["comment"] = " // = false          // Allow user scaling text of individual window with CTRL+Wheel."
defs["structs"]["ImGuiIO"][15]["name"] = "Fonts"
defs["structs"]["ImGuiIO"][15]["type"] = "ImFontAtlas*"
defs["structs"]["ImGuiIO"][16] = {}
defs["structs"]["ImGuiIO"][16]["comment"] = " // = NULL           // Font to use on NewFrame(). Use NULL to uses Fonts->Fonts[0]."
defs["structs"]["ImGuiIO"][16]["name"] = "FontGlobalScale"
defs["structs"]["ImGuiIO"][16]["type"] = "float"
defs["structs"]["ImGuiIO"][17] = {}
defs["structs"]["ImGuiIO"][17]["comment"] = " // = (1, 1)         // For retina display or other situations where window coordinates are different from framebuffer coordinates. This generally ends up in ImDrawData::FramebufferScale."
defs["structs"]["ImGuiIO"][17]["name"] = "FontAllowUserScaling"
defs["structs"]["ImGuiIO"][17]["type"] = "bool"
defs["structs"]["ImGuiIO"][18] = {}
defs["structs"]["ImGuiIO"][18]["comment"] = " // = false          // Simplified docking mode: disable window splitting, so docking is limited to merging multiple windows together into tab-bars."
defs["structs"]["ImGuiIO"][18]["name"] = "FontDefault"
defs["structs"]["ImGuiIO"][18]["type"] = "ImFont*"
defs["structs"]["ImGuiIO"][19] = {}
defs["structs"]["ImGuiIO"][19]["comment"] = " // = false          // Enable docking with holding Shift key (reduce visual noise, allows dropping in wider space)"
defs["structs"]["ImGuiIO"][19]["name"] = "DisplayFramebufferScale"
defs["structs"]["ImGuiIO"][19]["type"] = "ImVec2"
defs["structs"]["ImGuiIO"][20] = {}
defs["structs"]["ImGuiIO"][20]["comment"] = " // = false          // [BETA] [FIXME: This currently creates regression with auto-sizing and general overhead] Make every single floating window display within a docking node."
defs["structs"]["ImGuiIO"][20]["name"] = "ConfigDockingNoSplit"
defs["structs"]["ImGuiIO"][20]["type"] = "bool"
defs["structs"]["ImGuiIO"][21] = {}
defs["structs"]["ImGuiIO"][21]["comment"] = "// = false          // [BETA] Make window or viewport transparent when docking and only display docking boxes on the target viewport. Useful if rendering of multiple viewport cannot be synced. Best used with ConfigViewportsNoAutoMerge."
defs["structs"]["ImGuiIO"][21]["name"] = "ConfigDockingWithShift"
defs["structs"]["ImGuiIO"][21]["type"] = "bool"
defs["structs"]["ImGuiIO"][22] = {}
defs["structs"]["ImGuiIO"][22]["comment"] = " // = false;         // Set to make all floating imgui windows always create their own viewport. Otherwise, they are merged into the main host viewports when overlapping it. May also set ImGuiViewportFlags_NoAutoMerge on individual viewport."
defs["structs"]["ImGuiIO"][22]["name"] = "ConfigDockingAlwaysTabBar"
defs["structs"]["ImGuiIO"][22]["type"] = "bool"
defs["structs"]["ImGuiIO"][23] = {}
defs["structs"]["ImGuiIO"][23]["comment"] = " // = false          // Disable default OS task bar icon flag for secondary viewports. When a viewport doesn't want a task bar icon, ImGuiViewportFlags_NoTaskBarIcon will be set on it."
defs["structs"]["ImGuiIO"][23]["name"] = "ConfigDockingTransparentPayload"
defs["structs"]["ImGuiIO"][23]["type"] = "bool"
defs["structs"]["ImGuiIO"][24] = {}
defs["structs"]["ImGuiIO"][24]["comment"] = " // = true           // [BETA] Disable default OS window decoration flag for secondary viewports. When a viewport doesn't want window decorations, ImGuiViewportFlags_NoDecoration will be set on it. Enabling decoration can create subsequent issues at OS levels (e.g. minimum window size)."
defs["structs"]["ImGuiIO"][24]["name"] = "ConfigViewportsNoAutoMerge"
defs["structs"]["ImGuiIO"][24]["type"] = "bool"
defs["structs"]["ImGuiIO"][25] = {}
defs["structs"]["ImGuiIO"][25]["comment"] = " // = false          // Disable default OS parenting to main viewport for secondary viewports. By default, viewports are marked with ParentViewportId = <main_viewport>, expecting the platform back-end to setup a parent/child relationship between the OS windows (some back-end may ignore this). Set to true if you want the default to be 0, then all viewports will be top-level OS windows."
defs["structs"]["ImGuiIO"][25]["name"] = "ConfigViewportsNoTaskBarIcon"
defs["structs"]["ImGuiIO"][25]["type"] = "bool"
defs["structs"]["ImGuiIO"][26] = {}
defs["structs"]["ImGuiIO"][26]["comment"] = " // = false          // Request ImGui to draw a mouse cursor for you (if you are on a platform without a mouse cursor). Cannot be easily renamed to 'io.ConfigXXX' because this is frequently used by back-end implementations."
defs["structs"]["ImGuiIO"][26]["name"] = "ConfigViewportsNoDecoration"
defs["structs"]["ImGuiIO"][26]["type"] = "bool"
defs["structs"]["ImGuiIO"][27] = {}
defs["structs"]["ImGuiIO"][27]["comment"] = " // = defined(__APPLE__) // OS X style: Text editing cursor movement using Alt instead of Ctrl, Shortcuts using Cmd/Super instead of Ctrl, Line/Text Start and End using Cmd+Arrows instead of Home/End, Double click selects by word instead of selecting whole text, Multi-selection in lists uses Cmd/Super instead of Ctrl (was called io.OptMacOSXBehaviors prior to 1.63)"
defs["structs"]["ImGuiIO"][27]["name"] = "ConfigViewportsNoDefaultParent"
defs["structs"]["ImGuiIO"][27]["type"] = "bool"
defs["structs"]["ImGuiIO"][28] = {}
defs["structs"]["ImGuiIO"][28]["comment"] = " // = true           // Set to false to disable blinking cursor, for users who consider it distracting. (was called: io.OptCursorBlink prior to 1.63)"
defs["structs"]["ImGuiIO"][28]["name"] = "MouseDrawCursor"
defs["structs"]["ImGuiIO"][28]["type"] = "bool"
defs["structs"]["ImGuiIO"][29] = {}
defs["structs"]["ImGuiIO"][29]["comment"] = " // = true           // Enable resizing of windows from their edges and from the lower-left corner. This requires (io.BackendFlags & ImGuiBackendFlags_HasMouseCursors) because it needs mouse cursor feedback. (This used to be a per-window ImGuiWindowFlags_ResizeFromAnySide flag)"
defs["structs"]["ImGuiIO"][29]["name"] = "ConfigMacOSXBehaviors"
defs["structs"]["ImGuiIO"][29]["type"] = "bool"
defs["structs"]["ImGuiIO"][30] = {}
defs["structs"]["ImGuiIO"][30]["comment"] = " // = false       // [BETA] Set to true to only allow moving windows when clicked+dragged from the title bar. Windows without a title bar are not affected."
defs["structs"]["ImGuiIO"][30]["name"] = "ConfigInputTextCursorBlink"
defs["structs"]["ImGuiIO"][30]["type"] = "bool"
defs["structs"]["ImGuiIO"][31] = {}
defs["structs"]["ImGuiIO"][31]["comment"] = "// = 60.0f          // [BETA] Compact window memory usage when unused. Set to -1.0f to disable."
defs["structs"]["ImGuiIO"][31]["name"] = "ConfigWindowsResizeFromEdges"
defs["structs"]["ImGuiIO"][31]["type"] = "bool"
defs["structs"]["ImGuiIO"][32] = {}
defs["structs"]["ImGuiIO"][32]["comment"] = " // = NULL"
defs["structs"]["ImGuiIO"][32]["name"] = "ConfigWindowsMoveFromTitleBarOnly"
defs["structs"]["ImGuiIO"][32]["type"] = "bool"
defs["structs"]["ImGuiIO"][33] = {}
defs["structs"]["ImGuiIO"][33]["comment"] = " // = NULL"
defs["structs"]["ImGuiIO"][33]["name"] = "ConfigWindowsMemoryCompactTimer"
defs["structs"]["ImGuiIO"][33]["type"] = "float"
defs["structs"]["ImGuiIO"][34] = {}
defs["structs"]["ImGuiIO"][34]["comment"] = " // = NULL           // User data for platform back-end"
defs["structs"]["ImGuiIO"][34]["name"] = "BackendPlatformName"
defs["structs"]["ImGuiIO"][34]["type"] = "const char*"
defs["structs"]["ImGuiIO"][35] = {}
defs["structs"]["ImGuiIO"][35]["comment"] = " // = NULL           // User data for renderer back-end"
defs["structs"]["ImGuiIO"][35]["name"] = "BackendRendererName"
defs["structs"]["ImGuiIO"][35]["type"] = "const char*"
defs["structs"]["ImGuiIO"][36] = {}
defs["structs"]["ImGuiIO"][36]["comment"] = " // = NULL           // User data for non C++ programming language back-end"
defs["structs"]["ImGuiIO"][36]["name"] = "BackendPlatformUserData"
defs["structs"]["ImGuiIO"][36]["type"] = "void*"
defs["structs"]["ImGuiIO"][37] = {}
defs["structs"]["ImGuiIO"][37]["comment"] = " // Mouse position, in pixels. Set to ImVec2(-FLT_MAX, -FLT_MAX) if mouse is unavailable (on another screen, etc.)"
defs["structs"]["ImGuiIO"][37]["name"] = "BackendRendererUserData"
defs["structs"]["ImGuiIO"][37]["type"] = "void*"
defs["structs"]["ImGuiIO"][38] = {}
defs["structs"]["ImGuiIO"][38]["comment"] = " // Mouse buttons: 0=left, 1=right, 2=middle + extras (ImGuiMouseButton_COUNT == 5). Dear ImGui mostly uses left and right buttons. Others buttons allows us to track if the mouse is being used by your application + available to user as a convenience via IsMouse** API."
defs["structs"]["ImGuiIO"][38]["name"] = "BackendLanguageUserData"
defs["structs"]["ImGuiIO"][38]["type"] = "void*"
defs["structs"]["ImGuiIO"][39] = {}
defs["structs"]["ImGuiIO"][39]["comment"] = " // Mouse wheel Vertical: 1 unit scrolls about 5 lines text."
defs["structs"]["ImGuiIO"][39]["name"] = "GetClipboardTextFn"
defs["structs"]["ImGuiIO"][39]["type"] = "const char*(*)(void* user_data)"
defs["structs"]["ImGuiIO"][40] = {}
defs["structs"]["ImGuiIO"][40]["comment"] = " // Mouse wheel Horizontal. Most users don't have a mouse with an horizontal wheel, may not be filled by all back-ends."
defs["structs"]["ImGuiIO"][40]["name"] = "SetClipboardTextFn"
defs["structs"]["ImGuiIO"][40]["type"] = "void(*)(void* user_data,const char* text)"
defs["structs"]["ImGuiIO"][41] = {}
defs["structs"]["ImGuiIO"][41]["comment"] = " // (Optional) When using multiple viewports: viewport the OS mouse cursor is hovering _IGNORING_ viewports with the ImGuiViewportFlags_NoInputs flag, and _REGARDLESS_ of whether another viewport is focused. Set io.BackendFlags |= ImGuiBackendFlags_HasMouseHoveredViewport if you can provide this info. If you don't imgui will infer the value using the rectangles and last focused time of the viewports it knows about (ignoring other OS windows)."
defs["structs"]["ImGuiIO"][41]["name"] = "ClipboardUserData"
defs["structs"]["ImGuiIO"][41]["type"] = "void*"
defs["structs"]["ImGuiIO"][42] = {}
defs["structs"]["ImGuiIO"][42]["comment"] = " // Keyboard modifier pressed: Control"
defs["structs"]["ImGuiIO"][42]["name"] = "RenderDrawListsFnUnused"
defs["structs"]["ImGuiIO"][42]["type"] = "void*"
defs["structs"]["ImGuiIO"][43] = {}
defs["structs"]["ImGuiIO"][43]["comment"] = " // Keyboard modifier pressed: Shift"
defs["structs"]["ImGuiIO"][43]["name"] = "MousePos"
defs["structs"]["ImGuiIO"][43]["type"] = "ImVec2"
defs["structs"]["ImGuiIO"][44] = {}
defs["structs"]["ImGuiIO"][44]["comment"] = " // Keyboard modifier pressed: Alt"
defs["structs"]["ImGuiIO"][44]["name"] = "MouseDown[5]"
defs["structs"]["ImGuiIO"][44]["size"] = 5
defs["structs"]["ImGuiIO"][44]["type"] = "bool"
defs["structs"]["ImGuiIO"][45] = {}
defs["structs"]["ImGuiIO"][45]["comment"] = " // Keyboard modifier pressed: Cmd/Super/Windows"
defs["structs"]["ImGuiIO"][45]["name"] = "MouseWheel"
defs["structs"]["ImGuiIO"][45]["type"] = "float"
defs["structs"]["ImGuiIO"][46] = {}
defs["structs"]["ImGuiIO"][46]["comment"] = " // Keyboard keys that are pressed (ideally left in the \"native\" order your engine has access to keyboard keys, so you can use your own defines/enums for keys)."
defs["structs"]["ImGuiIO"][46]["name"] = "MouseWheelH"
defs["structs"]["ImGuiIO"][46]["type"] = "float"
defs["structs"]["ImGuiIO"][47] = {}
defs["structs"]["ImGuiIO"][47]["comment"] = " // Gamepad inputs. Cleared back to zero by EndFrame(). Keyboard keys will be auto-mapped and be written here by NewFrame()."
defs["structs"]["ImGuiIO"][47]["name"] = "MouseHoveredViewport"
defs["structs"]["ImGuiIO"][47]["type"] = "ImGuiID"
defs["structs"]["ImGuiIO"][48] = {}
defs["structs"]["ImGuiIO"][48]["comment"] = " // Set when Dear ImGui will use mouse inputs, in this case do not dispatch them to your main game/application (either way, always pass on mouse inputs to imgui). (e.g. unclicked mouse is hovering over an imgui window, widget is active, mouse was clicked over an imgui window, etc.)."
defs["structs"]["ImGuiIO"][48]["name"] = "KeyCtrl"
defs["structs"]["ImGuiIO"][48]["type"] = "bool"
defs["structs"]["ImGuiIO"][49] = {}
defs["structs"]["ImGuiIO"][49]["comment"] = " // Set when Dear ImGui will use keyboard inputs, in this case do not dispatch them to your main game/application (either way, always pass keyboard inputs to imgui). (e.g. InputText active, or an imgui window is focused and navigation is enabled, etc.)."
defs["structs"]["ImGuiIO"][49]["name"] = "KeyShift"
defs["structs"]["ImGuiIO"][49]["type"] = "bool"
defs["structs"]["ImGuiIO"][50] = {}
defs["structs"]["ImGuiIO"][50]["comment"] = " // Mobile/console: when set, you may display an on-screen keyboard. This is set by Dear ImGui when it wants textual keyboard input to happen (e.g. when a InputText widget is active)."
defs["structs"]["ImGuiIO"][50]["name"] = "KeyAlt"
defs["structs"]["ImGuiIO"][50]["type"] = "bool"
defs["structs"]["ImGuiIO"][51] = {}
defs["structs"]["ImGuiIO"][51]["comment"] = " // MousePos has been altered, back-end should reposition mouse on next frame. Rarely used! Set only when ImGuiConfigFlags_NavEnableSetMousePos flag is enabled."
defs["structs"]["ImGuiIO"][51]["name"] = "KeySuper"
defs["structs"]["ImGuiIO"][51]["type"] = "bool"
defs["structs"]["ImGuiIO"][52] = {}
defs["structs"]["ImGuiIO"][52]["comment"] = " // When manual .ini load/save is active (io.IniFilename == NULL), this will be set to notify your application that you can call SaveIniSettingsToMemory() and save yourself. Important: clear io.WantSaveIniSettings yourself after saving!"
defs["structs"]["ImGuiIO"][52]["name"] = "KeysDown[512]"
defs["structs"]["ImGuiIO"][52]["size"] = 512
defs["structs"]["ImGuiIO"][52]["type"] = "bool"
defs["structs"]["ImGuiIO"][53] = {}
defs["structs"]["ImGuiIO"][53]["comment"] = " // Keyboard/Gamepad navigation is currently allowed (will handle ImGuiKey_NavXXX events) = a window is focused and it doesn't use the ImGuiWindowFlags_NoNavInputs flag."
defs["structs"]["ImGuiIO"][53]["name"] = "NavInputs[ImGuiNavInput_COUNT]"
defs["structs"]["ImGuiIO"][53]["size"] = 21
defs["structs"]["ImGuiIO"][53]["type"] = "float"
defs["structs"]["ImGuiIO"][54] = {}
defs["structs"]["ImGuiIO"][54]["comment"] = " // Keyboard/Gamepad navigation is visible and allowed (will handle ImGuiKey_NavXXX events)."
defs["structs"]["ImGuiIO"][54]["name"] = "WantCaptureMouse"
defs["structs"]["ImGuiIO"][54]["type"] = "bool"
defs["structs"]["ImGuiIO"][55] = {}
defs["structs"]["ImGuiIO"][55]["comment"] = " // Application framerate estimate, in frame per second. Solely for convenience. Rolling average estimation based on io.DeltaTime over 120 frames."
defs["structs"]["ImGuiIO"][55]["name"] = "WantCaptureKeyboard"
defs["structs"]["ImGuiIO"][55]["type"] = "bool"
defs["structs"]["ImGuiIO"][56] = {}
defs["structs"]["ImGuiIO"][56]["comment"] = " // Vertices output during last call to Render()"
defs["structs"]["ImGuiIO"][56]["name"] = "WantTextInput"
defs["structs"]["ImGuiIO"][56]["type"] = "bool"
defs["structs"]["ImGuiIO"][57] = {}
defs["structs"]["ImGuiIO"][57]["comment"] = " // Indices output during last call to Render() = number of triangles * 3"
defs["structs"]["ImGuiIO"][57]["name"] = "WantSetMousePos"
defs["structs"]["ImGuiIO"][57]["type"] = "bool"
defs["structs"]["ImGuiIO"][58] = {}
defs["structs"]["ImGuiIO"][58]["comment"] = " // Number of visible windows"
defs["structs"]["ImGuiIO"][58]["name"] = "WantSaveIniSettings"
defs["structs"]["ImGuiIO"][58]["type"] = "bool"
defs["structs"]["ImGuiIO"][59] = {}
defs["structs"]["ImGuiIO"][59]["comment"] = " // Number of active windows"
defs["structs"]["ImGuiIO"][59]["name"] = "NavActive"
defs["structs"]["ImGuiIO"][59]["type"] = "bool"
defs["structs"]["ImGuiIO"][60] = {}
defs["structs"]["ImGuiIO"][60]["comment"] = " // Number of active allocations, updated by MemAlloc/MemFree based on current context. May be off if you have multiple imgui contexts."
defs["structs"]["ImGuiIO"][60]["name"] = "NavVisible"
defs["structs"]["ImGuiIO"][60]["type"] = "bool"
defs["structs"]["ImGuiIO"][61] = {}
defs["structs"]["ImGuiIO"][61]["comment"] = " // Mouse delta. Note that this is zero if either current or previous position are invalid (-FLT_MAX,-FLT_MAX), so a disappearing/reappearing mouse won't have a huge delta."
defs["structs"]["ImGuiIO"][61]["name"] = "Framerate"
defs["structs"]["ImGuiIO"][61]["type"] = "float"
defs["structs"]["ImGuiIO"][62] = {}
defs["structs"]["ImGuiIO"][62]["comment"] = " // Key mods flags (same as io.KeyCtrl/KeyShift/KeyAlt/KeySuper but merged into flags), updated by NewFrame()"
defs["structs"]["ImGuiIO"][62]["name"] = "MetricsRenderVertices"
defs["structs"]["ImGuiIO"][62]["type"] = "int"
defs["structs"]["ImGuiIO"][63] = {}
defs["structs"]["ImGuiIO"][63]["comment"] = " // Previous mouse position (note that MouseDelta is not necessary == MousePos-MousePosPrev, in case either position is invalid)"
defs["structs"]["ImGuiIO"][63]["name"] = "MetricsRenderIndices"
defs["structs"]["ImGuiIO"][63]["type"] = "int"
defs["structs"]["ImGuiIO"][64] = {}
defs["structs"]["ImGuiIO"][64]["comment"] = " // Position at time of clicking"
defs["structs"]["ImGuiIO"][64]["name"] = "MetricsRenderWindows"
defs["structs"]["ImGuiIO"][64]["type"] = "int"
defs["structs"]["ImGuiIO"][65] = {}
defs["structs"]["ImGuiIO"][65]["comment"] = " // Time of last click (used to figure out double-click)"
defs["structs"]["ImGuiIO"][65]["name"] = "MetricsActiveWindows"
defs["structs"]["ImGuiIO"][65]["type"] = "int"
defs["structs"]["ImGuiIO"][66] = {}
defs["structs"]["ImGuiIO"][66]["comment"] = " // Mouse button went from !Down to Down"
defs["structs"]["ImGuiIO"][66]["name"] = "MetricsActiveAllocations"
defs["structs"]["ImGuiIO"][66]["type"] = "int"
defs["structs"]["ImGuiIO"][67] = {}
defs["structs"]["ImGuiIO"][67]["comment"] = " // Has mouse button been double-clicked?"
defs["structs"]["ImGuiIO"][67]["name"] = "MouseDelta"
defs["structs"]["ImGuiIO"][67]["type"] = "ImVec2"
defs["structs"]["ImGuiIO"][68] = {}
defs["structs"]["ImGuiIO"][68]["comment"] = " // Mouse button went from Down to !Down"
defs["structs"]["ImGuiIO"][68]["name"] = "KeyMods"
defs["structs"]["ImGuiIO"][68]["type"] = "ImGuiKeyModFlags"
defs["structs"]["ImGuiIO"][69] = {}
defs["structs"]["ImGuiIO"][69]["comment"] = " // Track if button was clicked inside a dear imgui window. We don't request mouse capture from the application if click started outside ImGui bounds."
defs["structs"]["ImGuiIO"][69]["name"] = "MousePosPrev"
defs["structs"]["ImGuiIO"][69]["type"] = "ImVec2"
defs["structs"]["ImGuiIO"][70] = {}
defs["structs"]["ImGuiIO"][70]["comment"] = " // Track if button down was a double-click"
defs["structs"]["ImGuiIO"][70]["name"] = "MouseClickedPos[5]"
defs["structs"]["ImGuiIO"][70]["size"] = 5
defs["structs"]["ImGuiIO"][70]["type"] = "ImVec2"
defs["structs"]["ImGuiIO"][71] = {}
defs["structs"]["ImGuiIO"][71]["comment"] = " // Duration the mouse button has been down (0.0f == just clicked)"
defs["structs"]["ImGuiIO"][71]["name"] = "MouseClickedTime[5]"
defs["structs"]["ImGuiIO"][71]["size"] = 5
defs["structs"]["ImGuiIO"][71]["type"] = "double"
defs["structs"]["ImGuiIO"][72] = {}
defs["structs"]["ImGuiIO"][72]["comment"] = " // Previous time the mouse button has been down"
defs["structs"]["ImGuiIO"][72]["name"] = "MouseClicked[5]"
defs["structs"]["ImGuiIO"][72]["size"] = 5
defs["structs"]["ImGuiIO"][72]["type"] = "bool"
defs["structs"]["ImGuiIO"][73] = {}
defs["structs"]["ImGuiIO"][73]["comment"] = " // Maximum distance, absolute, on each axis, of how much mouse has traveled from the clicking point"
defs["structs"]["ImGuiIO"][73]["name"] = "MouseDoubleClicked[5]"
defs["structs"]["ImGuiIO"][73]["size"] = 5
defs["structs"]["ImGuiIO"][73]["type"] = "bool"
defs["structs"]["ImGuiIO"][74] = {}
defs["structs"]["ImGuiIO"][74]["comment"] = " // Squared maximum distance of how much mouse has traveled from the clicking point"
defs["structs"]["ImGuiIO"][74]["name"] = "MouseReleased[5]"
defs["structs"]["ImGuiIO"][74]["size"] = 5
defs["structs"]["ImGuiIO"][74]["type"] = "bool"
defs["structs"]["ImGuiIO"][75] = {}
defs["structs"]["ImGuiIO"][75]["comment"] = " // Duration the keyboard key has been down (0.0f == just pressed)"
defs["structs"]["ImGuiIO"][75]["name"] = "MouseDownOwned[5]"
defs["structs"]["ImGuiIO"][75]["size"] = 5
defs["structs"]["ImGuiIO"][75]["type"] = "bool"
defs["structs"]["ImGuiIO"][76] = {}
defs["structs"]["ImGuiIO"][76]["comment"] = " // Previous duration the key has been down"
defs["structs"]["ImGuiIO"][76]["name"] = "MouseDownWasDoubleClick[5]"
defs["structs"]["ImGuiIO"][76]["size"] = 5
defs["structs"]["ImGuiIO"][76]["type"] = "bool"
defs["structs"]["ImGuiIO"][77] = {}
defs["structs"]["ImGuiIO"][77]["comment"] = " // Touch/Pen pressure (0.0f to 1.0f, should be >0.0f only when MouseDown[0] == true). Helper storage currently unused by Dear ImGui."
defs["structs"]["ImGuiIO"][77]["name"] = "MouseDownDuration[5]"
defs["structs"]["ImGuiIO"][77]["size"] = 5
defs["structs"]["ImGuiIO"][77]["type"] = "float"
defs["structs"]["ImGuiIO"][78] = {}
defs["structs"]["ImGuiIO"][78]["comment"] = " // For AddInputCharacterUTF16"
defs["structs"]["ImGuiIO"][78]["name"] = "MouseDownDurationPrev[5]"
defs["structs"]["ImGuiIO"][78]["size"] = 5
defs["structs"]["ImGuiIO"][78]["type"] = "float"
defs["structs"]["ImGuiIO"][79] = {}
defs["structs"]["ImGuiIO"][79]["comment"] = " // Queue of _characters_ input (obtained by platform back-end). Fill using AddInputCharacter() helper."
defs["structs"]["ImGuiIO"][79]["name"] = "MouseDragMaxDistanceAbs[5]"
defs["structs"]["ImGuiIO"][79]["size"] = 5
defs["structs"]["ImGuiIO"][79]["type"] = "ImVec2"
defs["structs"]["ImGuiIO"][80] = {}
defs["structs"]["ImGuiIO"][80]["name"] = "MouseDragMaxDistanceSqr[5]"
defs["structs"]["ImGuiIO"][80]["size"] = 5
defs["structs"]["ImGuiIO"][80]["type"] = "float"
defs["structs"]["ImGuiIO"][81] = {}
defs["structs"]["ImGuiIO"][81]["name"] = "KeysDownDuration[512]"
defs["structs"]["ImGuiIO"][81]["size"] = 512
defs["structs"]["ImGuiIO"][81]["type"] = "float"
defs["structs"]["ImGuiIO"][82] = {}
defs["structs"]["ImGuiIO"][82]["name"] = "KeysDownDurationPrev[512]"
defs["structs"]["ImGuiIO"][82]["size"] = 512
defs["structs"]["ImGuiIO"][82]["type"] = "float"
defs["structs"]["ImGuiIO"][83] = {}
defs["structs"]["ImGuiIO"][83]["name"] = "NavInputsDownDuration[ImGuiNavInput_COUNT]"
defs["structs"]["ImGuiIO"][83]["size"] = 21
defs["structs"]["ImGuiIO"][83]["type"] = "float"
defs["structs"]["ImGuiIO"][84] = {}
defs["structs"]["ImGuiIO"][84]["name"] = "NavInputsDownDurationPrev[ImGuiNavInput_COUNT]"
defs["structs"]["ImGuiIO"][84]["size"] = 21
defs["structs"]["ImGuiIO"][84]["type"] = "float"
defs["structs"]["ImGuiIO"][85] = {}
defs["structs"]["ImGuiIO"][85]["name"] = "PenPressure"
defs["structs"]["ImGuiIO"][85]["type"] = "float"
defs["structs"]["ImGuiIO"][86] = {}
defs["structs"]["ImGuiIO"][86]["name"] = "InputQueueSurrogate"
defs["structs"]["ImGuiIO"][86]["type"] = "ImWchar16"
defs["structs"]["ImGuiIO"][87] = {}
defs["structs"]["ImGuiIO"][87]["name"] = "InputQueueCharacters"
defs["structs"]["ImGuiIO"][87]["template_type"] = "ImWchar"
defs["structs"]["ImGuiIO"][87]["type"] = "ImVector_ImWchar"
defs["structs"]["ImGuiInputTextCallbackData"] = {}
defs["structs"]["ImGuiInputTextCallbackData"][1] = {}
defs["structs"]["ImGuiInputTextCallbackData"][1]["comment"] = " // What user passed to InputText()      // Read-only"
defs["structs"]["ImGuiInputTextCallbackData"][1]["name"] = "EventFlag"
defs["structs"]["ImGuiInputTextCallbackData"][1]["type"] = "ImGuiInputTextFlags"
defs["structs"]["ImGuiInputTextCallbackData"][2] = {}
defs["structs"]["ImGuiInputTextCallbackData"][2]["comment"] = " // Character input                      // Read-write   // [CharFilter] Replace character with another one, or set to zero to drop. return 1 is equivalent to setting EventChar=0;"
defs["structs"]["ImGuiInputTextCallbackData"][2]["name"] = "Flags"
defs["structs"]["ImGuiInputTextCallbackData"][2]["type"] = "ImGuiInputTextFlags"
defs["structs"]["ImGuiInputTextCallbackData"][3] = {}
defs["structs"]["ImGuiInputTextCallbackData"][3]["comment"] = " // Key pressed (Up/Down/TAB)            // Read-only    // [Completion,History]"
defs["structs"]["ImGuiInputTextCallbackData"][3]["name"] = "UserData"
defs["structs"]["ImGuiInputTextCallbackData"][3]["type"] = "void*"
defs["structs"]["ImGuiInputTextCallbackData"][4] = {}
defs["structs"]["ImGuiInputTextCallbackData"][4]["comment"] = " // Text buffer                          // Read-write   // [Resize] Can replace pointer / [Completion,History,Always] Only write to pointed data, don't replace the actual pointer!"
defs["structs"]["ImGuiInputTextCallbackData"][4]["name"] = "EventChar"
defs["structs"]["ImGuiInputTextCallbackData"][4]["type"] = "ImWchar"
defs["structs"]["ImGuiInputTextCallbackData"][5] = {}
defs["structs"]["ImGuiInputTextCallbackData"][5]["comment"] = " // Text length (in bytes)               // Read-write   // [Resize,Completion,History,Always] Exclude zero-terminator storage. In C land: == strlen(some_text), in C++ land: string.length()"
defs["structs"]["ImGuiInputTextCallbackData"][5]["name"] = "EventKey"
defs["structs"]["ImGuiInputTextCallbackData"][5]["type"] = "ImGuiKey"
defs["structs"]["ImGuiInputTextCallbackData"][6] = {}
defs["structs"]["ImGuiInputTextCallbackData"][6]["comment"] = " // Buffer size (in bytes) = capacity+1  // Read-only    // [Resize,Completion,History,Always] Include zero-terminator storage. In C land == ARRAYSIZE(my_char_array), in C++ land: string.capacity()+1"
defs["structs"]["ImGuiInputTextCallbackData"][6]["name"] = "Buf"
defs["structs"]["ImGuiInputTextCallbackData"][6]["type"] = "char*"
defs["structs"]["ImGuiInputTextCallbackData"][7] = {}
defs["structs"]["ImGuiInputTextCallbackData"][7]["comment"] = " // Set if you modify Buf/BufTextLen!    // Write        // [Completion,History,Always]"
defs["structs"]["ImGuiInputTextCallbackData"][7]["name"] = "BufTextLen"
defs["structs"]["ImGuiInputTextCallbackData"][7]["type"] = "int"
defs["structs"]["ImGuiInputTextCallbackData"][8] = {}
defs["structs"]["ImGuiInputTextCallbackData"][8]["comment"] = " //                                      // Read-write   // [Completion,History,Always]"
defs["structs"]["ImGuiInputTextCallbackData"][8]["name"] = "BufSize"
defs["structs"]["ImGuiInputTextCallbackData"][8]["type"] = "int"
defs["structs"]["ImGuiInputTextCallbackData"][9] = {}
defs["structs"]["ImGuiInputTextCallbackData"][9]["comment"] = " //                                      // Read-write   // [Completion,History,Always] == to SelectionEnd when no selection)"
defs["structs"]["ImGuiInputTextCallbackData"][9]["name"] = "BufDirty"
defs["structs"]["ImGuiInputTextCallbackData"][9]["type"] = "bool"
defs["structs"]["ImGuiInputTextCallbackData"][10] = {}
defs["structs"]["ImGuiInputTextCallbackData"][10]["comment"] = " //                                      // Read-write   // [Completion,History,Always]"
defs["structs"]["ImGuiInputTextCallbackData"][10]["name"] = "CursorPos"
defs["structs"]["ImGuiInputTextCallbackData"][10]["type"] = "int"
defs["structs"]["ImGuiInputTextCallbackData"][11] = {}
defs["structs"]["ImGuiInputTextCallbackData"][11]["name"] = "SelectionStart"
defs["structs"]["ImGuiInputTextCallbackData"][11]["type"] = "int"
defs["structs"]["ImGuiInputTextCallbackData"][12] = {}
defs["structs"]["ImGuiInputTextCallbackData"][12]["name"] = "SelectionEnd"
defs["structs"]["ImGuiInputTextCallbackData"][12]["type"] = "int"
defs["structs"]["ImGuiInputTextState"] = {}
defs["structs"]["ImGuiInputTextState"][1] = {}
defs["structs"]["ImGuiInputTextState"][1]["comment"] = " // edit buffer, we need to persist but can't guarantee the persistence of the user-provided buffer. so we copy into own buffer."
defs["structs"]["ImGuiInputTextState"][1]["name"] = "ID"
defs["structs"]["ImGuiInputTextState"][1]["type"] = "ImGuiID"
defs["structs"]["ImGuiInputTextState"][2] = {}
defs["structs"]["ImGuiInputTextState"][2]["comment"] = " // temporary UTF8 buffer for callbacks and other operations. this is not updated in every code-path! size=capacity."
defs["structs"]["ImGuiInputTextState"][2]["name"] = "CurLenW"
defs["structs"]["ImGuiInputTextState"][2]["type"] = "int"
defs["structs"]["ImGuiInputTextState"][3] = {}
defs["structs"]["ImGuiInputTextState"][3]["comment"] = " // temporary UTF8 buffer for callbacks and other operations. this is not updated in every code-path! size=capacity."
defs["structs"]["ImGuiInputTextState"][3]["name"] = "CurLenA"
defs["structs"]["ImGuiInputTextState"][3]["type"] = "int"
defs["structs"]["ImGuiInputTextState"][4] = {}
defs["structs"]["ImGuiInputTextState"][4]["comment"] = " // backup of end-user buffer at the time of focus (in UTF-8, unaltered)"
defs["structs"]["ImGuiInputTextState"][4]["name"] = "TextW"
defs["structs"]["ImGuiInputTextState"][4]["template_type"] = "ImWchar"
defs["structs"]["ImGuiInputTextState"][4]["type"] = "ImVector_ImWchar"
defs["structs"]["ImGuiInputTextState"][5] = {}
defs["structs"]["ImGuiInputTextState"][5]["comment"] = " // temporary UTF8 buffer is not initially valid before we make the widget active (until then we pull the data from user argument)"
defs["structs"]["ImGuiInputTextState"][5]["name"] = "TextA"
defs["structs"]["ImGuiInputTextState"][5]["template_type"] = "char"
defs["structs"]["ImGuiInputTextState"][5]["type"] = "ImVector_char"
defs["structs"]["ImGuiInputTextState"][6] = {}
defs["structs"]["ImGuiInputTextState"][6]["comment"] = " // end-user buffer capacity"
defs["structs"]["ImGuiInputTextState"][6]["name"] = "InitialTextA"
defs["structs"]["ImGuiInputTextState"][6]["template_type"] = "char"
defs["structs"]["ImGuiInputTextState"][6]["type"] = "ImVector_char"
defs["structs"]["ImGuiInputTextState"][7] = {}
defs["structs"]["ImGuiInputTextState"][7]["comment"] = " // horizontal scrolling/offset"
defs["structs"]["ImGuiInputTextState"][7]["name"] = "TextAIsValid"
defs["structs"]["ImGuiInputTextState"][7]["type"] = "bool"
defs["structs"]["ImGuiInputTextState"][8] = {}
defs["structs"]["ImGuiInputTextState"][8]["comment"] = " // state for stb_textedit.h"
defs["structs"]["ImGuiInputTextState"][8]["name"] = "BufCapacityA"
defs["structs"]["ImGuiInputTextState"][8]["type"] = "int"
defs["structs"]["ImGuiInputTextState"][9] = {}
defs["structs"]["ImGuiInputTextState"][9]["comment"] = " // timer for cursor blink, reset on every user action so the cursor reappears immediately"
defs["structs"]["ImGuiInputTextState"][9]["name"] = "ScrollX"
defs["structs"]["ImGuiInputTextState"][9]["type"] = "float"
defs["structs"]["ImGuiInputTextState"][10] = {}
defs["structs"]["ImGuiInputTextState"][10]["comment"] = " // set when we want scrolling to follow the current cursor position (not always!)"
defs["structs"]["ImGuiInputTextState"][10]["name"] = "Stb"
defs["structs"]["ImGuiInputTextState"][10]["type"] = "STB_TexteditState"
defs["structs"]["ImGuiInputTextState"][11] = {}
defs["structs"]["ImGuiInputTextState"][11]["comment"] = " // after a double-click to select all, we ignore further mouse drags to update selection"
defs["structs"]["ImGuiInputTextState"][11]["name"] = "CursorAnim"
defs["structs"]["ImGuiInputTextState"][11]["type"] = "float"
defs["structs"]["ImGuiInputTextState"][12] = {}
defs["structs"]["ImGuiInputTextState"][12]["comment"] = " // Temporarily set while we call user's callback"
defs["structs"]["ImGuiInputTextState"][12]["name"] = "CursorFollow"
defs["structs"]["ImGuiInputTextState"][12]["type"] = "bool"
defs["structs"]["ImGuiInputTextState"][13] = {}
defs["structs"]["ImGuiInputTextState"][13]["comment"] = " // \""
defs["structs"]["ImGuiInputTextState"][13]["name"] = "SelectedAllMouseLock"
defs["structs"]["ImGuiInputTextState"][13]["type"] = "bool"
defs["structs"]["ImGuiInputTextState"][14] = {}
defs["structs"]["ImGuiInputTextState"][14]["comment"] = " // \""
defs["structs"]["ImGuiInputTextState"][14]["name"] = "UserFlags"
defs["structs"]["ImGuiInputTextState"][14]["type"] = "ImGuiInputTextFlags"
defs["structs"]["ImGuiInputTextState"][15] = {}
defs["structs"]["ImGuiInputTextState"][15]["name"] = "UserCallback"
defs["structs"]["ImGuiInputTextState"][15]["type"] = "ImGuiInputTextCallback"
defs["structs"]["ImGuiInputTextState"][16] = {}
defs["structs"]["ImGuiInputTextState"][16]["name"] = "UserCallbackData"
defs["structs"]["ImGuiInputTextState"][16]["type"] = "void*"
defs["structs"]["ImGuiLastItemDataBackup"] = {}
defs["structs"]["ImGuiLastItemDataBackup"][1] = {}
defs["structs"]["ImGuiLastItemDataBackup"][1]["name"] = "LastItemId"
defs["structs"]["ImGuiLastItemDataBackup"][1]["type"] = "ImGuiID"
defs["structs"]["ImGuiLastItemDataBackup"][2] = {}
defs["structs"]["ImGuiLastItemDataBackup"][2]["name"] = "LastItemStatusFlags"
defs["structs"]["ImGuiLastItemDataBackup"][2]["type"] = "ImGuiItemStatusFlags"
defs["structs"]["ImGuiLastItemDataBackup"][3] = {}
defs["structs"]["ImGuiLastItemDataBackup"][3]["name"] = "LastItemRect"
defs["structs"]["ImGuiLastItemDataBackup"][3]["type"] = "ImRect"
defs["structs"]["ImGuiLastItemDataBackup"][4] = {}
defs["structs"]["ImGuiLastItemDataBackup"][4]["name"] = "LastItemDisplayRect"
defs["structs"]["ImGuiLastItemDataBackup"][4]["type"] = "ImRect"
defs["structs"]["ImGuiListClipper"] = {}
defs["structs"]["ImGuiListClipper"][1] = {}
defs["structs"]["ImGuiListClipper"][1]["name"] = "DisplayStart"
defs["structs"]["ImGuiListClipper"][1]["type"] = "int"
defs["structs"]["ImGuiListClipper"][2] = {}
defs["structs"]["ImGuiListClipper"][2]["name"] = "DisplayEnd"
defs["structs"]["ImGuiListClipper"][2]["type"] = "int"
defs["structs"]["ImGuiListClipper"][3] = {}
defs["structs"]["ImGuiListClipper"][3]["name"] = "ItemsCount"
defs["structs"]["ImGuiListClipper"][3]["type"] = "int"
defs["structs"]["ImGuiListClipper"][4] = {}
defs["structs"]["ImGuiListClipper"][4]["name"] = "StepNo"
defs["structs"]["ImGuiListClipper"][4]["type"] = "int"
defs["structs"]["ImGuiListClipper"][5] = {}
defs["structs"]["ImGuiListClipper"][5]["name"] = "ItemsHeight"
defs["structs"]["ImGuiListClipper"][5]["type"] = "float"
defs["structs"]["ImGuiListClipper"][6] = {}
defs["structs"]["ImGuiListClipper"][6]["name"] = "StartPosY"
defs["structs"]["ImGuiListClipper"][6]["type"] = "float"
defs["structs"]["ImGuiMenuColumns"] = {}
defs["structs"]["ImGuiMenuColumns"][1] = {}
defs["structs"]["ImGuiMenuColumns"][1]["name"] = "Spacing"
defs["structs"]["ImGuiMenuColumns"][1]["type"] = "float"
defs["structs"]["ImGuiMenuColumns"][2] = {}
defs["structs"]["ImGuiMenuColumns"][2]["name"] = "Width"
defs["structs"]["ImGuiMenuColumns"][2]["type"] = "float"
defs["structs"]["ImGuiMenuColumns"][3] = {}
defs["structs"]["ImGuiMenuColumns"][3]["name"] = "NextWidth"
defs["structs"]["ImGuiMenuColumns"][3]["type"] = "float"
defs["structs"]["ImGuiMenuColumns"][4] = {}
defs["structs"]["ImGuiMenuColumns"][4]["name"] = "Pos[3]"
defs["structs"]["ImGuiMenuColumns"][4]["size"] = 3
defs["structs"]["ImGuiMenuColumns"][4]["type"] = "float"
defs["structs"]["ImGuiMenuColumns"][5] = {}
defs["structs"]["ImGuiMenuColumns"][5]["name"] = "NextWidths[3]"
defs["structs"]["ImGuiMenuColumns"][5]["size"] = 3
defs["structs"]["ImGuiMenuColumns"][5]["type"] = "float"
defs["structs"]["ImGuiNavMoveResult"] = {}
defs["structs"]["ImGuiNavMoveResult"][1] = {}
defs["structs"]["ImGuiNavMoveResult"][1]["comment"] = " // Best candidate focus scope ID"
defs["structs"]["ImGuiNavMoveResult"][1]["name"] = "Window"
defs["structs"]["ImGuiNavMoveResult"][1]["type"] = "ImGuiWindow*"
defs["structs"]["ImGuiNavMoveResult"][2] = {}
defs["structs"]["ImGuiNavMoveResult"][2]["comment"] = " // Best candidate box distance to current NavId"
defs["structs"]["ImGuiNavMoveResult"][2]["name"] = "ID"
defs["structs"]["ImGuiNavMoveResult"][2]["type"] = "ImGuiID"
defs["structs"]["ImGuiNavMoveResult"][3] = {}
defs["structs"]["ImGuiNavMoveResult"][3]["comment"] = " // Best candidate center distance to current NavId"
defs["structs"]["ImGuiNavMoveResult"][3]["name"] = "FocusScopeId"
defs["structs"]["ImGuiNavMoveResult"][3]["type"] = "ImGuiID"
defs["structs"]["ImGuiNavMoveResult"][4] = {}
defs["structs"]["ImGuiNavMoveResult"][4]["comment"] = " // Best candidate bounding box in window relative space"
defs["structs"]["ImGuiNavMoveResult"][4]["name"] = "DistBox"
defs["structs"]["ImGuiNavMoveResult"][4]["type"] = "float"
defs["structs"]["ImGuiNavMoveResult"][5] = {}
defs["structs"]["ImGuiNavMoveResult"][5]["name"] = "DistCenter"
defs["structs"]["ImGuiNavMoveResult"][5]["type"] = "float"
defs["structs"]["ImGuiNavMoveResult"][6] = {}
defs["structs"]["ImGuiNavMoveResult"][6]["name"] = "DistAxial"
defs["structs"]["ImGuiNavMoveResult"][6]["type"] = "float"
defs["structs"]["ImGuiNavMoveResult"][7] = {}
defs["structs"]["ImGuiNavMoveResult"][7]["name"] = "RectRel"
defs["structs"]["ImGuiNavMoveResult"][7]["type"] = "ImRect"
defs["structs"]["ImGuiNextItemData"] = {}
defs["structs"]["ImGuiNextItemData"][1] = {}
defs["structs"]["ImGuiNextItemData"][1]["comment"] = " // Set by SetNextItemOpen()"
defs["structs"]["ImGuiNextItemData"][1]["name"] = "Flags"
defs["structs"]["ImGuiNextItemData"][1]["type"] = "ImGuiNextItemDataFlags"
defs["structs"]["ImGuiNextItemData"][2] = {}
defs["structs"]["ImGuiNextItemData"][2]["name"] = "Width"
defs["structs"]["ImGuiNextItemData"][2]["type"] = "float"
defs["structs"]["ImGuiNextItemData"][3] = {}
defs["structs"]["ImGuiNextItemData"][3]["name"] = "FocusScopeId"
defs["structs"]["ImGuiNextItemData"][3]["type"] = "ImGuiID"
defs["structs"]["ImGuiNextItemData"][4] = {}
defs["structs"]["ImGuiNextItemData"][4]["name"] = "OpenCond"
defs["structs"]["ImGuiNextItemData"][4]["type"] = "ImGuiCond"
defs["structs"]["ImGuiNextItemData"][5] = {}
defs["structs"]["ImGuiNextItemData"][5]["name"] = "OpenVal"
defs["structs"]["ImGuiNextItemData"][5]["type"] = "bool"
defs["structs"]["ImGuiNextWindowData"] = {}
defs["structs"]["ImGuiNextWindowData"][1] = {}
defs["structs"]["ImGuiNextWindowData"][1]["name"] = "Flags"
defs["structs"]["ImGuiNextWindowData"][1]["type"] = "ImGuiNextWindowDataFlags"
defs["structs"]["ImGuiNextWindowData"][2] = {}
defs["structs"]["ImGuiNextWindowData"][2]["name"] = "PosCond"
defs["structs"]["ImGuiNextWindowData"][2]["type"] = "ImGuiCond"
defs["structs"]["ImGuiNextWindowData"][3] = {}
defs["structs"]["ImGuiNextWindowData"][3]["name"] = "SizeCond"
defs["structs"]["ImGuiNextWindowData"][3]["type"] = "ImGuiCond"
defs["structs"]["ImGuiNextWindowData"][4] = {}
defs["structs"]["ImGuiNextWindowData"][4]["name"] = "CollapsedCond"
defs["structs"]["ImGuiNextWindowData"][4]["type"] = "ImGuiCond"
defs["structs"]["ImGuiNextWindowData"][5] = {}
defs["structs"]["ImGuiNextWindowData"][5]["name"] = "DockCond"
defs["structs"]["ImGuiNextWindowData"][5]["type"] = "ImGuiCond"
defs["structs"]["ImGuiNextWindowData"][6] = {}
defs["structs"]["ImGuiNextWindowData"][6]["name"] = "PosVal"
defs["structs"]["ImGuiNextWindowData"][6]["type"] = "ImVec2"
defs["structs"]["ImGuiNextWindowData"][7] = {}
defs["structs"]["ImGuiNextWindowData"][7]["name"] = "PosPivotVal"
defs["structs"]["ImGuiNextWindowData"][7]["type"] = "ImVec2"
defs["structs"]["ImGuiNextWindowData"][8] = {}
defs["structs"]["ImGuiNextWindowData"][8]["name"] = "SizeVal"
defs["structs"]["ImGuiNextWindowData"][8]["type"] = "ImVec2"
defs["structs"]["ImGuiNextWindowData"][9] = {}
defs["structs"]["ImGuiNextWindowData"][9]["name"] = "ContentSizeVal"
defs["structs"]["ImGuiNextWindowData"][9]["type"] = "ImVec2"
defs["structs"]["ImGuiNextWindowData"][10] = {}
defs["structs"]["ImGuiNextWindowData"][10]["name"] = "ScrollVal"
defs["structs"]["ImGuiNextWindowData"][10]["type"] = "ImVec2"
defs["structs"]["ImGuiNextWindowData"][11] = {}
defs["structs"]["ImGuiNextWindowData"][11]["name"] = "PosUndock"
defs["structs"]["ImGuiNextWindowData"][11]["type"] = "bool"
defs["structs"]["ImGuiNextWindowData"][12] = {}
defs["structs"]["ImGuiNextWindowData"][12]["name"] = "CollapsedVal"
defs["structs"]["ImGuiNextWindowData"][12]["type"] = "bool"
defs["structs"]["ImGuiNextWindowData"][13] = {}
defs["structs"]["ImGuiNextWindowData"][13]["name"] = "SizeConstraintRect"
defs["structs"]["ImGuiNextWindowData"][13]["type"] = "ImRect"
defs["structs"]["ImGuiNextWindowData"][14] = {}
defs["structs"]["ImGuiNextWindowData"][14]["name"] = "SizeCallback"
defs["structs"]["ImGuiNextWindowData"][14]["type"] = "ImGuiSizeCallback"
defs["structs"]["ImGuiNextWindowData"][15] = {}
defs["structs"]["ImGuiNextWindowData"][15]["name"] = "SizeCallbackUserData"
defs["structs"]["ImGuiNextWindowData"][15]["type"] = "void*"
defs["structs"]["ImGuiNextWindowData"][16] = {}
defs["structs"]["ImGuiNextWindowData"][16]["name"] = "BgAlphaVal"
defs["structs"]["ImGuiNextWindowData"][16]["type"] = "float"
defs["structs"]["ImGuiNextWindowData"][17] = {}
defs["structs"]["ImGuiNextWindowData"][17]["name"] = "ViewportId"
defs["structs"]["ImGuiNextWindowData"][17]["type"] = "ImGuiID"
defs["structs"]["ImGuiNextWindowData"][18] = {}
defs["structs"]["ImGuiNextWindowData"][18]["name"] = "DockId"
defs["structs"]["ImGuiNextWindowData"][18]["type"] = "ImGuiID"
defs["structs"]["ImGuiNextWindowData"][19] = {}
defs["structs"]["ImGuiNextWindowData"][19]["name"] = "WindowClass"
defs["structs"]["ImGuiNextWindowData"][19]["type"] = "ImGuiWindowClass"
defs["structs"]["ImGuiNextWindowData"][20] = {}
defs["structs"]["ImGuiNextWindowData"][20]["name"] = "MenuBarOffsetMinVal"
defs["structs"]["ImGuiNextWindowData"][20]["type"] = "ImVec2"
defs["structs"]["ImGuiOnceUponAFrame"] = {}
defs["structs"]["ImGuiOnceUponAFrame"][1] = {}
defs["structs"]["ImGuiOnceUponAFrame"][1]["name"] = "RefFrame"
defs["structs"]["ImGuiOnceUponAFrame"][1]["type"] = "int"
defs["structs"]["ImGuiPayload"] = {}
defs["structs"]["ImGuiPayload"][1] = {}
defs["structs"]["ImGuiPayload"][1]["comment"] = " // Source item id"
defs["structs"]["ImGuiPayload"][1]["name"] = "Data"
defs["structs"]["ImGuiPayload"][1]["type"] = "void*"
defs["structs"]["ImGuiPayload"][2] = {}
defs["structs"]["ImGuiPayload"][2]["comment"] = " // Source parent id (if available)"
defs["structs"]["ImGuiPayload"][2]["name"] = "DataSize"
defs["structs"]["ImGuiPayload"][2]["type"] = "int"
defs["structs"]["ImGuiPayload"][3] = {}
defs["structs"]["ImGuiPayload"][3]["comment"] = " // Data timestamp"
defs["structs"]["ImGuiPayload"][3]["name"] = "SourceId"
defs["structs"]["ImGuiPayload"][3]["type"] = "ImGuiID"
defs["structs"]["ImGuiPayload"][4] = {}
defs["structs"]["ImGuiPayload"][4]["comment"] = " // Data type tag (short user-supplied string, 32 characters max)"
defs["structs"]["ImGuiPayload"][4]["name"] = "SourceParentId"
defs["structs"]["ImGuiPayload"][4]["type"] = "ImGuiID"
defs["structs"]["ImGuiPayload"][5] = {}
defs["structs"]["ImGuiPayload"][5]["comment"] = " // Set when AcceptDragDropPayload() was called and mouse has been hovering the target item (nb: handle overlapping drag targets)"
defs["structs"]["ImGuiPayload"][5]["name"] = "DataFrameCount"
defs["structs"]["ImGuiPayload"][5]["type"] = "int"
defs["structs"]["ImGuiPayload"][6] = {}
defs["structs"]["ImGuiPayload"][6]["comment"] = " // Set when AcceptDragDropPayload() was called and mouse button is released over the target item."
defs["structs"]["ImGuiPayload"][6]["name"] = "DataType[32+1]"
defs["structs"]["ImGuiPayload"][6]["size"] = 33
defs["structs"]["ImGuiPayload"][6]["type"] = "char"
defs["structs"]["ImGuiPayload"][7] = {}
defs["structs"]["ImGuiPayload"][7]["name"] = "Preview"
defs["structs"]["ImGuiPayload"][7]["type"] = "bool"
defs["structs"]["ImGuiPayload"][8] = {}
defs["structs"]["ImGuiPayload"][8]["name"] = "Delivery"
defs["structs"]["ImGuiPayload"][8]["type"] = "bool"
defs["structs"]["ImGuiPlatformIO"] = {}
defs["structs"]["ImGuiPlatformIO"][1] = {}
defs["structs"]["ImGuiPlatformIO"][1]["comment"] = " // . . U . .  // Newly created windows are initially hidden so SetWindowPos/Size/Title can be called on them before showing the window"
defs["structs"]["ImGuiPlatformIO"][1]["name"] = "Platform_CreateWindow"
defs["structs"]["ImGuiPlatformIO"][1]["type"] = "void(*)(ImGuiViewport* vp)"
defs["structs"]["ImGuiPlatformIO"][2] = {}
defs["structs"]["ImGuiPlatformIO"][2]["comment"] = " // . . U . .  // Set platform window position (given the upper-left corner of client area)"
defs["structs"]["ImGuiPlatformIO"][2]["name"] = "Platform_DestroyWindow"
defs["structs"]["ImGuiPlatformIO"][2]["type"] = "void(*)(ImGuiViewport* vp)"
defs["structs"]["ImGuiPlatformIO"][3] = {}
defs["structs"]["ImGuiPlatformIO"][3]["comment"] = " // N . . . .  //"
defs["structs"]["ImGuiPlatformIO"][3]["name"] = "Platform_ShowWindow"
defs["structs"]["ImGuiPlatformIO"][3]["type"] = "void(*)(ImGuiViewport* vp)"
defs["structs"]["ImGuiPlatformIO"][4] = {}
defs["structs"]["ImGuiPlatformIO"][4]["comment"] = " // . . U . .  // Set platform window client area size (ignoring OS decorations such as OS title bar etc.)"
defs["structs"]["ImGuiPlatformIO"][4]["name"] = "Platform_SetWindowPos"
defs["structs"]["ImGuiPlatformIO"][4]["type"] = "void(*)(ImGuiViewport* vp,ImVec2 pos)"
defs["structs"]["ImGuiPlatformIO"][5] = {}
defs["structs"]["ImGuiPlatformIO"][5]["comment"] = " // N . . . .  // Get platform window client area size"
defs["structs"]["ImGuiPlatformIO"][5]["name"] = "Platform_GetWindowPos"
defs["structs"]["ImGuiPlatformIO"][5]["type"] = "ImVec2(*)(ImGuiViewport* vp)"
defs["structs"]["ImGuiPlatformIO"][6] = {}
defs["structs"]["ImGuiPlatformIO"][6]["comment"] = " // N . . . .  // Move window to front and set input focus"
defs["structs"]["ImGuiPlatformIO"][6]["name"] = "Platform_SetWindowSize"
defs["structs"]["ImGuiPlatformIO"][6]["type"] = "void(*)(ImGuiViewport* vp,ImVec2 size)"
defs["structs"]["ImGuiPlatformIO"][7] = {}
defs["structs"]["ImGuiPlatformIO"][7]["comment"] = " // . . U . .  //"
defs["structs"]["ImGuiPlatformIO"][7]["name"] = "Platform_GetWindowSize"
defs["structs"]["ImGuiPlatformIO"][7]["type"] = "ImVec2(*)(ImGuiViewport* vp)"
defs["structs"]["ImGuiPlatformIO"][8] = {}
defs["structs"]["ImGuiPlatformIO"][8]["comment"] = " // N . . . .  // Get platform window minimized state. When minimized, we generally won't attempt to get/set size and contents will be culled more easily"
defs["structs"]["ImGuiPlatformIO"][8]["name"] = "Platform_SetWindowFocus"
defs["structs"]["ImGuiPlatformIO"][8]["type"] = "void(*)(ImGuiViewport* vp)"
defs["structs"]["ImGuiPlatformIO"][9] = {}
defs["structs"]["ImGuiPlatformIO"][9]["comment"] = " // . . U . .  // Set platform window title (given an UTF-8 string)"
defs["structs"]["ImGuiPlatformIO"][9]["name"] = "Platform_GetWindowFocus"
defs["structs"]["ImGuiPlatformIO"][9]["type"] = "bool(*)(ImGuiViewport* vp)"
defs["structs"]["ImGuiPlatformIO"][10] = {}
defs["structs"]["ImGuiPlatformIO"][10]["comment"] = " // . . U . .  // (Optional) Setup window transparency"
defs["structs"]["ImGuiPlatformIO"][10]["name"] = "Platform_GetWindowMinimized"
defs["structs"]["ImGuiPlatformIO"][10]["type"] = "bool(*)(ImGuiViewport* vp)"
defs["structs"]["ImGuiPlatformIO"][11] = {}
defs["structs"]["ImGuiPlatformIO"][11]["comment"] = " // . . U . .  // (Optional) Called by UpdatePlatformWindows(). Optional hook to allow the platform back-end from doing general book-keeping every frame."
defs["structs"]["ImGuiPlatformIO"][11]["name"] = "Platform_SetWindowTitle"
defs["structs"]["ImGuiPlatformIO"][11]["type"] = "void(*)(ImGuiViewport* vp,const char* str)"
defs["structs"]["ImGuiPlatformIO"][12] = {}
defs["structs"]["ImGuiPlatformIO"][12]["comment"] = " // . . . R .  // (Optional) Main rendering (platform side! This is often unused, or just setting a \"current\" context for OpenGL bindings). 'render_arg' is the value passed to RenderPlatformWindowsDefault()."
defs["structs"]["ImGuiPlatformIO"][12]["name"] = "Platform_SetWindowAlpha"
defs["structs"]["ImGuiPlatformIO"][12]["type"] = "void(*)(ImGuiViewport* vp,float alpha)"
defs["structs"]["ImGuiPlatformIO"][13] = {}
defs["structs"]["ImGuiPlatformIO"][13]["comment"] = " // . . . R .  // (Optional) Call Present/SwapBuffers (platform side! This is often unused!). 'render_arg' is the value passed to RenderPlatformWindowsDefault()."
defs["structs"]["ImGuiPlatformIO"][13]["name"] = "Platform_UpdateWindow"
defs["structs"]["ImGuiPlatformIO"][13]["type"] = "void(*)(ImGuiViewport* vp)"
defs["structs"]["ImGuiPlatformIO"][14] = {}
defs["structs"]["ImGuiPlatformIO"][14]["comment"] = " // N . . . .  // (Optional) [BETA] FIXME-DPI: DPI handling: Return DPI scale for this viewport. 1.0f = 96 DPI."
defs["structs"]["ImGuiPlatformIO"][14]["name"] = "Platform_RenderWindow"
defs["structs"]["ImGuiPlatformIO"][14]["type"] = "void(*)(ImGuiViewport* vp,void* render_arg)"
defs["structs"]["ImGuiPlatformIO"][15] = {}
defs["structs"]["ImGuiPlatformIO"][15]["comment"] = " // . F . . .  // (Optional) [BETA] FIXME-DPI: DPI handling: Called during Begin() every time the viewport we are outputting into changes, so back-end has a chance to swap fonts to adjust style."
defs["structs"]["ImGuiPlatformIO"][15]["name"] = "Platform_SwapBuffers"
defs["structs"]["ImGuiPlatformIO"][15]["type"] = "void(*)(ImGuiViewport* vp,void* render_arg)"
defs["structs"]["ImGuiPlatformIO"][16] = {}
defs["structs"]["ImGuiPlatformIO"][16]["comment"] = " // . F . . .  // (Optional) Set IME (Input Method Editor, e.g. for Asian languages) input position, so text preview appears over the imgui input box. FIXME: The call timing of this is inconsistent because we want to support without multi-viewports."
defs["structs"]["ImGuiPlatformIO"][16]["name"] = "Platform_GetWindowDpiScale"
defs["structs"]["ImGuiPlatformIO"][16]["type"] = "float(*)(ImGuiViewport* vp)"
defs["structs"]["ImGuiPlatformIO"][17] = {}
defs["structs"]["ImGuiPlatformIO"][17]["comment"] = " // (Optional) For a Vulkan Renderer to call into Platform code (since the surface creation needs to tie them both)."
defs["structs"]["ImGuiPlatformIO"][17]["name"] = "Platform_OnChangedViewport"
defs["structs"]["ImGuiPlatformIO"][17]["type"] = "void(*)(ImGuiViewport* vp)"
defs["structs"]["ImGuiPlatformIO"][18] = {}
defs["structs"]["ImGuiPlatformIO"][18]["comment"] = " // . . U . .  // Create swap chain, frame buffers etc. (called after Platform_CreateWindow)"
defs["structs"]["ImGuiPlatformIO"][18]["name"] = "Platform_SetImeInputPos"
defs["structs"]["ImGuiPlatformIO"][18]["type"] = "void(*)(ImGuiViewport* vp,ImVec2 pos)"
defs["structs"]["ImGuiPlatformIO"][19] = {}
defs["structs"]["ImGuiPlatformIO"][19]["comment"] = " // N . U . D  // Destroy swap chain, frame buffers etc. (called before Platform_DestroyWindow)"
defs["structs"]["ImGuiPlatformIO"][19]["name"] = "Platform_CreateVkSurface"
defs["structs"]["ImGuiPlatformIO"][19]["type"] = "int(*)(ImGuiViewport* vp,ImU64 vk_inst,const void* vk_allocators,ImU64* out_vk_surface)"
defs["structs"]["ImGuiPlatformIO"][20] = {}
defs["structs"]["ImGuiPlatformIO"][20]["comment"] = " // . . U . .  // Resize swap chain, frame buffers etc. (called after Platform_SetWindowSize)"
defs["structs"]["ImGuiPlatformIO"][20]["name"] = "Renderer_CreateWindow"
defs["structs"]["ImGuiPlatformIO"][20]["type"] = "void(*)(ImGuiViewport* vp)"
defs["structs"]["ImGuiPlatformIO"][21] = {}
defs["structs"]["ImGuiPlatformIO"][21]["comment"] = " // . . . R .  // (Optional) Clear framebuffer, setup render target, then render the viewport->DrawData. 'render_arg' is the value passed to RenderPlatformWindowsDefault()."
defs["structs"]["ImGuiPlatformIO"][21]["name"] = "Renderer_DestroyWindow"
defs["structs"]["ImGuiPlatformIO"][21]["type"] = "void(*)(ImGuiViewport* vp)"
defs["structs"]["ImGuiPlatformIO"][22] = {}
defs["structs"]["ImGuiPlatformIO"][22]["comment"] = " // . . . R .  // (Optional) Call Present/SwapBuffers. 'render_arg' is the value passed to RenderPlatformWindowsDefault()."
defs["structs"]["ImGuiPlatformIO"][22]["name"] = "Renderer_SetWindowSize"
defs["structs"]["ImGuiPlatformIO"][22]["type"] = "void(*)(ImGuiViewport* vp,ImVec2 size)"
defs["structs"]["ImGuiPlatformIO"][23] = {}
defs["structs"]["ImGuiPlatformIO"][23]["comment"] = " // Guaranteed to be == Viewports[0]"
defs["structs"]["ImGuiPlatformIO"][23]["name"] = "Renderer_RenderWindow"
defs["structs"]["ImGuiPlatformIO"][23]["type"] = "void(*)(ImGuiViewport* vp,void* render_arg)"
defs["structs"]["ImGuiPlatformIO"][24] = {}
defs["structs"]["ImGuiPlatformIO"][24]["comment"] = " // Main viewports, followed by all secondary viewports."
defs["structs"]["ImGuiPlatformIO"][24]["name"] = "Renderer_SwapBuffers"
defs["structs"]["ImGuiPlatformIO"][24]["type"] = "void(*)(ImGuiViewport* vp,void* render_arg)"
defs["structs"]["ImGuiPlatformIO"][25] = {}
defs["structs"]["ImGuiPlatformIO"][25]["name"] = "Monitors"
defs["structs"]["ImGuiPlatformIO"][25]["template_type"] = "ImGuiPlatformMonitor"
defs["structs"]["ImGuiPlatformIO"][25]["type"] = "ImVector_ImGuiPlatformMonitor"
defs["structs"]["ImGuiPlatformIO"][26] = {}
defs["structs"]["ImGuiPlatformIO"][26]["name"] = "MainViewport"
defs["structs"]["ImGuiPlatformIO"][26]["type"] = "ImGuiViewport*"
defs["structs"]["ImGuiPlatformIO"][27] = {}
defs["structs"]["ImGuiPlatformIO"][27]["name"] = "Viewports"
defs["structs"]["ImGuiPlatformIO"][27]["template_type"] = "ImGuiViewport*"
defs["structs"]["ImGuiPlatformIO"][27]["type"] = "ImVector_ImGuiViewportPtr"
defs["structs"]["ImGuiPlatformMonitor"] = {}
defs["structs"]["ImGuiPlatformMonitor"][1] = {}
defs["structs"]["ImGuiPlatformMonitor"][1]["comment"] = " // 1.0f = 96 DPI"
defs["structs"]["ImGuiPlatformMonitor"][1]["name"] = "MainPos"
defs["structs"]["ImGuiPlatformMonitor"][1]["type"] = "ImVec2"
defs["structs"]["ImGuiPlatformMonitor"][2] = {}
defs["structs"]["ImGuiPlatformMonitor"][2]["comment"] = " // 1.0f = 96 DPI"
defs["structs"]["ImGuiPlatformMonitor"][2]["name"] = "MainSize"
defs["structs"]["ImGuiPlatformMonitor"][2]["type"] = "ImVec2"
defs["structs"]["ImGuiPlatformMonitor"][3] = {}
defs["structs"]["ImGuiPlatformMonitor"][3]["name"] = "WorkPos"
defs["structs"]["ImGuiPlatformMonitor"][3]["type"] = "ImVec2"
defs["structs"]["ImGuiPlatformMonitor"][4] = {}
defs["structs"]["ImGuiPlatformMonitor"][4]["name"] = "WorkSize"
defs["structs"]["ImGuiPlatformMonitor"][4]["type"] = "ImVec2"
defs["structs"]["ImGuiPlatformMonitor"][5] = {}
defs["structs"]["ImGuiPlatformMonitor"][5]["name"] = "DpiScale"
defs["structs"]["ImGuiPlatformMonitor"][5]["type"] = "float"
defs["structs"]["ImGuiPopupData"] = {}
defs["structs"]["ImGuiPopupData"][1] = {}
defs["structs"]["ImGuiPopupData"][1]["comment"] = " // Set on OpenPopup() copy of NavWindow at the time of opening the popup"
defs["structs"]["ImGuiPopupData"][1]["name"] = "PopupId"
defs["structs"]["ImGuiPopupData"][1]["type"] = "ImGuiID"
defs["structs"]["ImGuiPopupData"][2] = {}
defs["structs"]["ImGuiPopupData"][2]["comment"] = " // Set on OpenPopup()"
defs["structs"]["ImGuiPopupData"][2]["name"] = "Window"
defs["structs"]["ImGuiPopupData"][2]["type"] = "ImGuiWindow*"
defs["structs"]["ImGuiPopupData"][3] = {}
defs["structs"]["ImGuiPopupData"][3]["comment"] = " // Set on OpenPopup(), we need this to differentiate multiple menu sets from each others (e.g. inside menu bar vs loose menu items)"
defs["structs"]["ImGuiPopupData"][3]["name"] = "SourceWindow"
defs["structs"]["ImGuiPopupData"][3]["type"] = "ImGuiWindow*"
defs["structs"]["ImGuiPopupData"][4] = {}
defs["structs"]["ImGuiPopupData"][4]["comment"] = " // Set on OpenPopup(), preferred popup position (typically == OpenMousePos when using mouse)"
defs["structs"]["ImGuiPopupData"][4]["name"] = "OpenFrameCount"
defs["structs"]["ImGuiPopupData"][4]["type"] = "int"
defs["structs"]["ImGuiPopupData"][5] = {}
defs["structs"]["ImGuiPopupData"][5]["comment"] = " // Set on OpenPopup(), copy of mouse position at the time of opening popup"
defs["structs"]["ImGuiPopupData"][5]["name"] = "OpenParentId"
defs["structs"]["ImGuiPopupData"][5]["type"] = "ImGuiID"
defs["structs"]["ImGuiPopupData"][6] = {}
defs["structs"]["ImGuiPopupData"][6]["name"] = "OpenPopupPos"
defs["structs"]["ImGuiPopupData"][6]["type"] = "ImVec2"
defs["structs"]["ImGuiPopupData"][7] = {}
defs["structs"]["ImGuiPopupData"][7]["name"] = "OpenMousePos"
defs["structs"]["ImGuiPopupData"][7]["type"] = "ImVec2"
defs["structs"]["ImGuiPtrOrIndex"] = {}
defs["structs"]["ImGuiPtrOrIndex"][1] = {}
defs["structs"]["ImGuiPtrOrIndex"][1]["name"] = "Ptr"
defs["structs"]["ImGuiPtrOrIndex"][1]["type"] = "void*"
defs["structs"]["ImGuiPtrOrIndex"][2] = {}
defs["structs"]["ImGuiPtrOrIndex"][2]["name"] = "Index"
defs["structs"]["ImGuiPtrOrIndex"][2]["type"] = "int"
defs["structs"]["ImGuiSettingsHandler"] = {}
defs["structs"]["ImGuiSettingsHandler"][1] = {}
defs["structs"]["ImGuiSettingsHandler"][1]["comment"] = " // Clear all settings data"
defs["structs"]["ImGuiSettingsHandler"][1]["name"] = "TypeName"
defs["structs"]["ImGuiSettingsHandler"][1]["type"] = "const char*"
defs["structs"]["ImGuiSettingsHandler"][2] = {}
defs["structs"]["ImGuiSettingsHandler"][2]["comment"] = " // Read: Called before reading (in registration order)"
defs["structs"]["ImGuiSettingsHandler"][2]["name"] = "TypeHash"
defs["structs"]["ImGuiSettingsHandler"][2]["type"] = "ImGuiID"
defs["structs"]["ImGuiSettingsHandler"][3] = {}
defs["structs"]["ImGuiSettingsHandler"][3]["comment"] = " // Read: Called when entering into a new ini entry e.g. \"[Window][Name]\""
defs["structs"]["ImGuiSettingsHandler"][3]["name"] = "ClearAllFn"
defs["structs"]["ImGuiSettingsHandler"][3]["type"] = "void(*)(ImGuiContext* ctx,ImGuiSettingsHandler* handler)"
defs["structs"]["ImGuiSettingsHandler"][4] = {}
defs["structs"]["ImGuiSettingsHandler"][4]["comment"] = " // Read: Called for every line of text within an ini entry"
defs["structs"]["ImGuiSettingsHandler"][4]["name"] = "ReadInitFn"
defs["structs"]["ImGuiSettingsHandler"][4]["type"] = "void(*)(ImGuiContext* ctx,ImGuiSettingsHandler* handler)"
defs["structs"]["ImGuiSettingsHandler"][5] = {}
defs["structs"]["ImGuiSettingsHandler"][5]["comment"] = " // Read: Called after reading (in registration order)"
defs["structs"]["ImGuiSettingsHandler"][5]["name"] = "ReadOpenFn"
defs["structs"]["ImGuiSettingsHandler"][5]["type"] = "void*(*)(ImGuiContext* ctx,ImGuiSettingsHandler* handler,const char* name)"
defs["structs"]["ImGuiSettingsHandler"][6] = {}
defs["structs"]["ImGuiSettingsHandler"][6]["comment"] = " // Write: Output every entries into 'out_buf'"
defs["structs"]["ImGuiSettingsHandler"][6]["name"] = "ReadLineFn"
defs["structs"]["ImGuiSettingsHandler"][6]["type"] = "void(*)(ImGuiContext* ctx,ImGuiSettingsHandler* handler,void* entry,const char* line)"
defs["structs"]["ImGuiSettingsHandler"][7] = {}
defs["structs"]["ImGuiSettingsHandler"][7]["name"] = "ApplyAllFn"
defs["structs"]["ImGuiSettingsHandler"][7]["type"] = "void(*)(ImGuiContext* ctx,ImGuiSettingsHandler* handler)"
defs["structs"]["ImGuiSettingsHandler"][8] = {}
defs["structs"]["ImGuiSettingsHandler"][8]["name"] = "WriteAllFn"
defs["structs"]["ImGuiSettingsHandler"][8]["type"] = "void(*)(ImGuiContext* ctx,ImGuiSettingsHandler* handler,ImGuiTextBuffer* out_buf)"
defs["structs"]["ImGuiSettingsHandler"][9] = {}
defs["structs"]["ImGuiSettingsHandler"][9]["name"] = "UserData"
defs["structs"]["ImGuiSettingsHandler"][9]["type"] = "void*"
defs["structs"]["ImGuiShrinkWidthItem"] = {}
defs["structs"]["ImGuiShrinkWidthItem"][1] = {}
defs["structs"]["ImGuiShrinkWidthItem"][1]["name"] = "Index"
defs["structs"]["ImGuiShrinkWidthItem"][1]["type"] = "int"
defs["structs"]["ImGuiShrinkWidthItem"][2] = {}
defs["structs"]["ImGuiShrinkWidthItem"][2]["name"] = "Width"
defs["structs"]["ImGuiShrinkWidthItem"][2]["type"] = "float"
defs["structs"]["ImGuiSizeCallbackData"] = {}
defs["structs"]["ImGuiSizeCallbackData"][1] = {}
defs["structs"]["ImGuiSizeCallbackData"][1]["comment"] = " // Read-only.   Current window size."
defs["structs"]["ImGuiSizeCallbackData"][1]["name"] = "UserData"
defs["structs"]["ImGuiSizeCallbackData"][1]["type"] = "void*"
defs["structs"]["ImGuiSizeCallbackData"][2] = {}
defs["structs"]["ImGuiSizeCallbackData"][2]["comment"] = " // Read-write.  Desired size, based on user's mouse position. Write to this field to restrain resizing."
defs["structs"]["ImGuiSizeCallbackData"][2]["name"] = "Pos"
defs["structs"]["ImGuiSizeCallbackData"][2]["type"] = "ImVec2"
defs["structs"]["ImGuiSizeCallbackData"][3] = {}
defs["structs"]["ImGuiSizeCallbackData"][3]["name"] = "CurrentSize"
defs["structs"]["ImGuiSizeCallbackData"][3]["type"] = "ImVec2"
defs["structs"]["ImGuiSizeCallbackData"][4] = {}
defs["structs"]["ImGuiSizeCallbackData"][4]["name"] = "DesiredSize"
defs["structs"]["ImGuiSizeCallbackData"][4]["type"] = "ImVec2"
defs["structs"]["ImGuiStorage"] = {}
defs["structs"]["ImGuiStorage"][1] = {}
defs["structs"]["ImGuiStorage"][1]["name"] = "Data"
defs["structs"]["ImGuiStorage"][1]["template_type"] = "ImGuiStoragePair"
defs["structs"]["ImGuiStorage"][1]["type"] = "ImVector_ImGuiStoragePair"
defs["structs"]["ImGuiStoragePair"] = {}
defs["structs"]["ImGuiStoragePair"][1] = {}
defs["structs"]["ImGuiStoragePair"][1]["name"] = "key"
defs["structs"]["ImGuiStoragePair"][1]["type"] = "ImGuiID"
defs["structs"]["ImGuiStoragePair"][2] = {}
defs["structs"]["ImGuiStoragePair"][2]["name"] = ""
defs["structs"]["ImGuiStoragePair"][2]["type"] = "union { int val_i; float val_f; void* val_p;}"
defs["structs"]["ImGuiStyle"] = {}
defs["structs"]["ImGuiStyle"][1] = {}
defs["structs"]["ImGuiStyle"][1]["comment"] = " // Radius of window corners rounding. Set to 0.0f to have rectangular windows. Large values tend to lead to variety of artifacts and are not recommended."
defs["structs"]["ImGuiStyle"][1]["name"] = "Alpha"
defs["structs"]["ImGuiStyle"][1]["type"] = "float"
defs["structs"]["ImGuiStyle"][2] = {}
defs["structs"]["ImGuiStyle"][2]["comment"] = " // Thickness of border around windows. Generally set to 0.0f or 1.0f. (Other values are not well tested and more CPU/GPU costly)."
defs["structs"]["ImGuiStyle"][2]["name"] = "WindowPadding"
defs["structs"]["ImGuiStyle"][2]["type"] = "ImVec2"
defs["structs"]["ImGuiStyle"][3] = {}
defs["structs"]["ImGuiStyle"][3]["comment"] = " // Minimum window size. This is a global setting. If you want to constraint individual windows, use SetNextWindowSizeConstraints()."
defs["structs"]["ImGuiStyle"][3]["name"] = "WindowRounding"
defs["structs"]["ImGuiStyle"][3]["type"] = "float"
defs["structs"]["ImGuiStyle"][4] = {}
defs["structs"]["ImGuiStyle"][4]["comment"] = " // Alignment for title bar text. Defaults to (0.0f,0.5f) for left-aligned,vertically centered."
defs["structs"]["ImGuiStyle"][4]["name"] = "WindowBorderSize"
defs["structs"]["ImGuiStyle"][4]["type"] = "float"
defs["structs"]["ImGuiStyle"][5] = {}
defs["structs"]["ImGuiStyle"][5]["comment"] = " // Side of the collapsing/docking button in the title bar (None/Left/Right). Defaults to ImGuiDir_Left."
defs["structs"]["ImGuiStyle"][5]["name"] = "WindowMinSize"
defs["structs"]["ImGuiStyle"][5]["type"] = "ImVec2"
defs["structs"]["ImGuiStyle"][6] = {}
defs["structs"]["ImGuiStyle"][6]["comment"] = " // Radius of child window corners rounding. Set to 0.0f to have rectangular windows."
defs["structs"]["ImGuiStyle"][6]["name"] = "WindowTitleAlign"
defs["structs"]["ImGuiStyle"][6]["type"] = "ImVec2"
defs["structs"]["ImGuiStyle"][7] = {}
defs["structs"]["ImGuiStyle"][7]["comment"] = " // Thickness of border around child windows. Generally set to 0.0f or 1.0f. (Other values are not well tested and more CPU/GPU costly)."
defs["structs"]["ImGuiStyle"][7]["name"] = "WindowMenuButtonPosition"
defs["structs"]["ImGuiStyle"][7]["type"] = "ImGuiDir"
defs["structs"]["ImGuiStyle"][8] = {}
defs["structs"]["ImGuiStyle"][8]["comment"] = " // Radius of popup window corners rounding. (Note that tooltip windows use WindowRounding)"
defs["structs"]["ImGuiStyle"][8]["name"] = "ChildRounding"
defs["structs"]["ImGuiStyle"][8]["type"] = "float"
defs["structs"]["ImGuiStyle"][9] = {}
defs["structs"]["ImGuiStyle"][9]["comment"] = " // Thickness of border around popup/tooltip windows. Generally set to 0.0f or 1.0f. (Other values are not well tested and more CPU/GPU costly)."
defs["structs"]["ImGuiStyle"][9]["name"] = "ChildBorderSize"
defs["structs"]["ImGuiStyle"][9]["type"] = "float"
defs["structs"]["ImGuiStyle"][10] = {}
defs["structs"]["ImGuiStyle"][10]["comment"] = " // Padding within a framed rectangle (used by most widgets)."
defs["structs"]["ImGuiStyle"][10]["name"] = "PopupRounding"
defs["structs"]["ImGuiStyle"][10]["type"] = "float"
defs["structs"]["ImGuiStyle"][11] = {}
defs["structs"]["ImGuiStyle"][11]["comment"] = " // Radius of frame corners rounding. Set to 0.0f to have rectangular frame (used by most widgets)."
defs["structs"]["ImGuiStyle"][11]["name"] = "PopupBorderSize"
defs["structs"]["ImGuiStyle"][11]["type"] = "float"
defs["structs"]["ImGuiStyle"][12] = {}
defs["structs"]["ImGuiStyle"][12]["comment"] = " // Thickness of border around frames. Generally set to 0.0f or 1.0f. (Other values are not well tested and more CPU/GPU costly)."
defs["structs"]["ImGuiStyle"][12]["name"] = "FramePadding"
defs["structs"]["ImGuiStyle"][12]["type"] = "ImVec2"
defs["structs"]["ImGuiStyle"][13] = {}
defs["structs"]["ImGuiStyle"][13]["comment"] = " // Horizontal and vertical spacing between widgets/lines."
defs["structs"]["ImGuiStyle"][13]["name"] = "FrameRounding"
defs["structs"]["ImGuiStyle"][13]["type"] = "float"
defs["structs"]["ImGuiStyle"][14] = {}
defs["structs"]["ImGuiStyle"][14]["comment"] = " // Horizontal and vertical spacing between within elements of a composed widget (e.g. a slider and its label)."
defs["structs"]["ImGuiStyle"][14]["name"] = "FrameBorderSize"
defs["structs"]["ImGuiStyle"][14]["type"] = "float"
defs["structs"]["ImGuiStyle"][15] = {}
defs["structs"]["ImGuiStyle"][15]["comment"] = " // Expand reactive bounding box for touch-based system where touch position is not accurate enough. Unfortunately we don't sort widgets so priority on overlap will always be given to the first widget. So don't grow this too much!"
defs["structs"]["ImGuiStyle"][15]["name"] = "ItemSpacing"
defs["structs"]["ImGuiStyle"][15]["type"] = "ImVec2"
defs["structs"]["ImGuiStyle"][16] = {}
defs["structs"]["ImGuiStyle"][16]["comment"] = " // Horizontal indentation when e.g. entering a tree node. Generally == (FontSize + FramePadding.x*2)."
defs["structs"]["ImGuiStyle"][16]["name"] = "ItemInnerSpacing"
defs["structs"]["ImGuiStyle"][16]["type"] = "ImVec2"
defs["structs"]["ImGuiStyle"][17] = {}
defs["structs"]["ImGuiStyle"][17]["comment"] = " // Minimum horizontal spacing between two columns. Preferably > (FramePadding.x + 1)."
defs["structs"]["ImGuiStyle"][17]["name"] = "TouchExtraPadding"
defs["structs"]["ImGuiStyle"][17]["type"] = "ImVec2"
defs["structs"]["ImGuiStyle"][18] = {}
defs["structs"]["ImGuiStyle"][18]["comment"] = " // Width of the vertical scrollbar, Height of the horizontal scrollbar."
defs["structs"]["ImGuiStyle"][18]["name"] = "IndentSpacing"
defs["structs"]["ImGuiStyle"][18]["type"] = "float"
defs["structs"]["ImGuiStyle"][19] = {}
defs["structs"]["ImGuiStyle"][19]["comment"] = " // Radius of grab corners for scrollbar."
defs["structs"]["ImGuiStyle"][19]["name"] = "ColumnsMinSpacing"
defs["structs"]["ImGuiStyle"][19]["type"] = "float"
defs["structs"]["ImGuiStyle"][20] = {}
defs["structs"]["ImGuiStyle"][20]["comment"] = " // Minimum width/height of a grab box for slider/scrollbar."
defs["structs"]["ImGuiStyle"][20]["name"] = "ScrollbarSize"
defs["structs"]["ImGuiStyle"][20]["type"] = "float"
defs["structs"]["ImGuiStyle"][21] = {}
defs["structs"]["ImGuiStyle"][21]["comment"] = " // Radius of grabs corners rounding. Set to 0.0f to have rectangular slider grabs."
defs["structs"]["ImGuiStyle"][21]["name"] = "ScrollbarRounding"
defs["structs"]["ImGuiStyle"][21]["type"] = "float"
defs["structs"]["ImGuiStyle"][22] = {}
defs["structs"]["ImGuiStyle"][22]["comment"] = " // The size in pixels of the dead-zone around zero on logarithmic sliders that cross zero."
defs["structs"]["ImGuiStyle"][22]["name"] = "GrabMinSize"
defs["structs"]["ImGuiStyle"][22]["type"] = "float"
defs["structs"]["ImGuiStyle"][23] = {}
defs["structs"]["ImGuiStyle"][23]["comment"] = " // Radius of upper corners of a tab. Set to 0.0f to have rectangular tabs."
defs["structs"]["ImGuiStyle"][23]["name"] = "GrabRounding"
defs["structs"]["ImGuiStyle"][23]["type"] = "float"
defs["structs"]["ImGuiStyle"][24] = {}
defs["structs"]["ImGuiStyle"][24]["comment"] = " // Thickness of border around tabs."
defs["structs"]["ImGuiStyle"][24]["name"] = "LogSliderDeadzone"
defs["structs"]["ImGuiStyle"][24]["type"] = "float"
defs["structs"]["ImGuiStyle"][25] = {}
defs["structs"]["ImGuiStyle"][25]["comment"] = " // Minimum width for close button to appears on an unselected tab when hovered. Set to 0.0f to always show when hovering, set to FLT_MAX to never show close button unless selected."
defs["structs"]["ImGuiStyle"][25]["name"] = "TabRounding"
defs["structs"]["ImGuiStyle"][25]["type"] = "float"
defs["structs"]["ImGuiStyle"][26] = {}
defs["structs"]["ImGuiStyle"][26]["comment"] = " // Side of the color button in the ColorEdit4 widget (left/right). Defaults to ImGuiDir_Right."
defs["structs"]["ImGuiStyle"][26]["name"] = "TabBorderSize"
defs["structs"]["ImGuiStyle"][26]["type"] = "float"
defs["structs"]["ImGuiStyle"][27] = {}
defs["structs"]["ImGuiStyle"][27]["comment"] = " // Alignment of button text when button is larger than text. Defaults to (0.5f, 0.5f) (centered)."
defs["structs"]["ImGuiStyle"][27]["name"] = "TabMinWidthForUnselectedCloseButton"
defs["structs"]["ImGuiStyle"][27]["type"] = "float"
defs["structs"]["ImGuiStyle"][28] = {}
defs["structs"]["ImGuiStyle"][28]["comment"] = " // Alignment of selectable text. Defaults to (0.0f, 0.0f) (top-left aligned). It's generally important to keep this left-aligned if you want to lay multiple items on a same line."
defs["structs"]["ImGuiStyle"][28]["name"] = "ColorButtonPosition"
defs["structs"]["ImGuiStyle"][28]["type"] = "ImGuiDir"
defs["structs"]["ImGuiStyle"][29] = {}
defs["structs"]["ImGuiStyle"][29]["comment"] = " // Window position are clamped to be visible within the display area or monitors by at least this amount. Only applies to regular windows."
defs["structs"]["ImGuiStyle"][29]["name"] = "ButtonTextAlign"
defs["structs"]["ImGuiStyle"][29]["type"] = "ImVec2"
defs["structs"]["ImGuiStyle"][30] = {}
defs["structs"]["ImGuiStyle"][30]["comment"] = " // If you cannot see the edges of your screen (e.g. on a TV) increase the safe area padding. Apply to popups/tooltips as well regular windows. NB: Prefer configuring your TV sets correctly!"
defs["structs"]["ImGuiStyle"][30]["name"] = "SelectableTextAlign"
defs["structs"]["ImGuiStyle"][30]["type"] = "ImVec2"
defs["structs"]["ImGuiStyle"][31] = {}
defs["structs"]["ImGuiStyle"][31]["comment"] = " // Scale software rendered mouse cursor (when io.MouseDrawCursor is enabled). We apply per-monitor DPI scaling over this scale. May be removed later."
defs["structs"]["ImGuiStyle"][31]["name"] = "DisplayWindowPadding"
defs["structs"]["ImGuiStyle"][31]["type"] = "ImVec2"
defs["structs"]["ImGuiStyle"][32] = {}
defs["structs"]["ImGuiStyle"][32]["comment"] = " // Enable anti-aliased lines/borders. Disable if you are really tight on CPU/GPU. Latched at the beginning of the frame (copied to ImDrawList)."
defs["structs"]["ImGuiStyle"][32]["name"] = "DisplaySafeAreaPadding"
defs["structs"]["ImGuiStyle"][32]["type"] = "ImVec2"
defs["structs"]["ImGuiStyle"][33] = {}
defs["structs"]["ImGuiStyle"][33]["comment"] = " // Enable anti-aliased lines/borders using textures where possible. Require back-end to render with bilinear filtering. Latched at the beginning of the frame (copied to ImDrawList)."
defs["structs"]["ImGuiStyle"][33]["name"] = "MouseCursorScale"
defs["structs"]["ImGuiStyle"][33]["type"] = "float"
defs["structs"]["ImGuiStyle"][34] = {}
defs["structs"]["ImGuiStyle"][34]["comment"] = " // Enable anti-aliased edges around filled shapes (rounded rectangles, circles, etc.). Disable if you are really tight on CPU/GPU. Latched at the beginning of the frame (copied to ImDrawList)."
defs["structs"]["ImGuiStyle"][34]["name"] = "AntiAliasedLines"
defs["structs"]["ImGuiStyle"][34]["type"] = "bool"
defs["structs"]["ImGuiStyle"][35] = {}
defs["structs"]["ImGuiStyle"][35]["comment"] = " // Tessellation tolerance when using PathBezierCurveTo() without a specific number of segments. Decrease for highly tessellated curves (higher quality, more polygons), increase to reduce quality."
defs["structs"]["ImGuiStyle"][35]["name"] = "AntiAliasedLinesUseTex"
defs["structs"]["ImGuiStyle"][35]["type"] = "bool"
defs["structs"]["ImGuiStyle"][36] = {}
defs["structs"]["ImGuiStyle"][36]["comment"] = " // Maximum error (in pixels) allowed when using AddCircle()/AddCircleFilled() or drawing rounded corner rectangles with no explicit segment count specified. Decrease for higher quality but more geometry."
defs["structs"]["ImGuiStyle"][36]["name"] = "AntiAliasedFill"
defs["structs"]["ImGuiStyle"][36]["type"] = "bool"
defs["structs"]["ImGuiStyle"][37] = {}
defs["structs"]["ImGuiStyle"][37]["name"] = "CurveTessellationTol"
defs["structs"]["ImGuiStyle"][37]["type"] = "float"
defs["structs"]["ImGuiStyle"][38] = {}
defs["structs"]["ImGuiStyle"][38]["name"] = "CircleSegmentMaxError"
defs["structs"]["ImGuiStyle"][38]["type"] = "float"
defs["structs"]["ImGuiStyle"][39] = {}
defs["structs"]["ImGuiStyle"][39]["name"] = "Colors[ImGuiCol_COUNT]"
defs["structs"]["ImGuiStyle"][39]["size"] = 50
defs["structs"]["ImGuiStyle"][39]["type"] = "ImVec4"
defs["structs"]["ImGuiStyleMod"] = {}
defs["structs"]["ImGuiStyleMod"][1] = {}
defs["structs"]["ImGuiStyleMod"][1]["name"] = "VarIdx"
defs["structs"]["ImGuiStyleMod"][1]["type"] = "ImGuiStyleVar"
defs["structs"]["ImGuiStyleMod"][2] = {}
defs["structs"]["ImGuiStyleMod"][2]["name"] = ""
defs["structs"]["ImGuiStyleMod"][2]["type"] = "union { int BackupInt[2]; float BackupFloat[2];}"
defs["structs"]["ImGuiTabBar"] = {}
defs["structs"]["ImGuiTabBar"][1] = {}
defs["structs"]["ImGuiTabBar"][1]["comment"] = " // Can occasionally be != SelectedTabId (e.g. when previewing contents for CTRL+TAB preview)"
defs["structs"]["ImGuiTabBar"][1]["name"] = "Tabs"
defs["structs"]["ImGuiTabBar"][1]["template_type"] = "ImGuiTabItem"
defs["structs"]["ImGuiTabBar"][1]["type"] = "ImVector_ImGuiTabItem"
defs["structs"]["ImGuiTabBar"][2] = {}
defs["structs"]["ImGuiTabBar"][2]["comment"] = " // Record the height of contents submitted below the tab bar"
defs["structs"]["ImGuiTabBar"][2]["name"] = "ID"
defs["structs"]["ImGuiTabBar"][2]["type"] = "ImGuiID"
defs["structs"]["ImGuiTabBar"][3] = {}
defs["structs"]["ImGuiTabBar"][3]["comment"] = " // Distance from BarRect.Min.x, locked during layout"
defs["structs"]["ImGuiTabBar"][3]["name"] = "SelectedTabId"
defs["structs"]["ImGuiTabBar"][3]["type"] = "ImGuiID"
defs["structs"]["ImGuiTabBar"][4] = {}
defs["structs"]["ImGuiTabBar"][4]["comment"] = " // Ideal offset if all tabs were visible and not clipped"
defs["structs"]["ImGuiTabBar"][4]["name"] = "NextSelectedTabId"
defs["structs"]["ImGuiTabBar"][4]["type"] = "ImGuiID"
defs["structs"]["ImGuiTabBar"][5] = {}
defs["structs"]["ImGuiTabBar"][5]["comment"] = " // Distance from BarRect.Min.x, incremented with each BeginTabItem() call, not used if ImGuiTabBarFlags_Reorderable if set."
defs["structs"]["ImGuiTabBar"][5]["name"] = "VisibleTabId"
defs["structs"]["ImGuiTabBar"][5]["type"] = "ImGuiID"
defs["structs"]["ImGuiTabBar"][6] = {}
defs["structs"]["ImGuiTabBar"][6]["comment"] = " // For BeginTabItem()/EndTabItem()"
defs["structs"]["ImGuiTabBar"][6]["name"] = "CurrFrameVisible"
defs["structs"]["ImGuiTabBar"][6]["type"] = "int"
defs["structs"]["ImGuiTabBar"][7] = {}
defs["structs"]["ImGuiTabBar"][7]["comment"] = " // style.FramePadding locked at the time of BeginTabBar()"
defs["structs"]["ImGuiTabBar"][7]["name"] = "PrevFrameVisible"
defs["structs"]["ImGuiTabBar"][7]["type"] = "int"
defs["structs"]["ImGuiTabBar"][8] = {}
defs["structs"]["ImGuiTabBar"][8]["comment"] = " // For non-docking tab bar we re-append names in a contiguous buffer."
defs["structs"]["ImGuiTabBar"][8]["name"] = "BarRect"
defs["structs"]["ImGuiTabBar"][8]["type"] = "ImRect"
defs["structs"]["ImGuiTabBar"][9] = {}
defs["structs"]["ImGuiTabBar"][9]["name"] = "LastTabContentHeight"
defs["structs"]["ImGuiTabBar"][9]["type"] = "float"
defs["structs"]["ImGuiTabBar"][10] = {}
defs["structs"]["ImGuiTabBar"][10]["name"] = "OffsetMax"
defs["structs"]["ImGuiTabBar"][10]["type"] = "float"
defs["structs"]["ImGuiTabBar"][11] = {}
defs["structs"]["ImGuiTabBar"][11]["name"] = "OffsetMaxIdeal"
defs["structs"]["ImGuiTabBar"][11]["type"] = "float"
defs["structs"]["ImGuiTabBar"][12] = {}
defs["structs"]["ImGuiTabBar"][12]["name"] = "OffsetNextTab"
defs["structs"]["ImGuiTabBar"][12]["type"] = "float"
defs["structs"]["ImGuiTabBar"][13] = {}
defs["structs"]["ImGuiTabBar"][13]["name"] = "ScrollingAnim"
defs["structs"]["ImGuiTabBar"][13]["type"] = "float"
defs["structs"]["ImGuiTabBar"][14] = {}
defs["structs"]["ImGuiTabBar"][14]["name"] = "ScrollingTarget"
defs["structs"]["ImGuiTabBar"][14]["type"] = "float"
defs["structs"]["ImGuiTabBar"][15] = {}
defs["structs"]["ImGuiTabBar"][15]["name"] = "ScrollingTargetDistToVisibility"
defs["structs"]["ImGuiTabBar"][15]["type"] = "float"
defs["structs"]["ImGuiTabBar"][16] = {}
defs["structs"]["ImGuiTabBar"][16]["name"] = "ScrollingSpeed"
defs["structs"]["ImGuiTabBar"][16]["type"] = "float"
defs["structs"]["ImGuiTabBar"][17] = {}
defs["structs"]["ImGuiTabBar"][17]["name"] = "Flags"
defs["structs"]["ImGuiTabBar"][17]["type"] = "ImGuiTabBarFlags"
defs["structs"]["ImGuiTabBar"][18] = {}
defs["structs"]["ImGuiTabBar"][18]["name"] = "ReorderRequestTabId"
defs["structs"]["ImGuiTabBar"][18]["type"] = "ImGuiID"
defs["structs"]["ImGuiTabBar"][19] = {}
defs["structs"]["ImGuiTabBar"][19]["name"] = "ReorderRequestDir"
defs["structs"]["ImGuiTabBar"][19]["type"] = "ImS8"
defs["structs"]["ImGuiTabBar"][20] = {}
defs["structs"]["ImGuiTabBar"][20]["name"] = "WantLayout"
defs["structs"]["ImGuiTabBar"][20]["type"] = "bool"
defs["structs"]["ImGuiTabBar"][21] = {}
defs["structs"]["ImGuiTabBar"][21]["name"] = "VisibleTabWasSubmitted"
defs["structs"]["ImGuiTabBar"][21]["type"] = "bool"
defs["structs"]["ImGuiTabBar"][22] = {}
defs["structs"]["ImGuiTabBar"][22]["name"] = "LastTabItemIdx"
defs["structs"]["ImGuiTabBar"][22]["type"] = "short"
defs["structs"]["ImGuiTabBar"][23] = {}
defs["structs"]["ImGuiTabBar"][23]["name"] = "FramePadding"
defs["structs"]["ImGuiTabBar"][23]["type"] = "ImVec2"
defs["structs"]["ImGuiTabBar"][24] = {}
defs["structs"]["ImGuiTabBar"][24]["name"] = "TabsNames"
defs["structs"]["ImGuiTabBar"][24]["type"] = "ImGuiTextBuffer"
defs["structs"]["ImGuiTabItem"] = {}
defs["structs"]["ImGuiTabItem"][1] = {}
defs["structs"]["ImGuiTabItem"][1]["comment"] = " // Position relative to beginning of tab"
defs["structs"]["ImGuiTabItem"][1]["name"] = "ID"
defs["structs"]["ImGuiTabItem"][1]["type"] = "ImGuiID"
defs["structs"]["ImGuiTabItem"][2] = {}
defs["structs"]["ImGuiTabItem"][2]["comment"] = " // Width currently displayed"
defs["structs"]["ImGuiTabItem"][2]["name"] = "Flags"
defs["structs"]["ImGuiTabItem"][2]["type"] = "ImGuiTabItemFlags"
defs["structs"]["ImGuiTabItem"][3] = {}
defs["structs"]["ImGuiTabItem"][3]["comment"] = " // Width of actual contents, stored during BeginTabItem() call"
defs["structs"]["ImGuiTabItem"][3]["name"] = "Window"
defs["structs"]["ImGuiTabItem"][3]["type"] = "ImGuiWindow*"
defs["structs"]["ImGuiTabItem"][4] = {}
defs["structs"]["ImGuiTabItem"][4]["comment"] = " // When Window==NULL, offset to name within parent ImGuiTabBar::TabsNames"
defs["structs"]["ImGuiTabItem"][4]["name"] = "LastFrameVisible"
defs["structs"]["ImGuiTabItem"][4]["type"] = "int"
defs["structs"]["ImGuiTabItem"][5] = {}
defs["structs"]["ImGuiTabItem"][5]["comment"] = " // Marked as closed by SetTabItemClosed()"
defs["structs"]["ImGuiTabItem"][5]["name"] = "LastFrameSelected"
defs["structs"]["ImGuiTabItem"][5]["type"] = "int"
defs["structs"]["ImGuiTabItem"][6] = {}
defs["structs"]["ImGuiTabItem"][6]["name"] = "Offset"
defs["structs"]["ImGuiTabItem"][6]["type"] = "float"
defs["structs"]["ImGuiTabItem"][7] = {}
defs["structs"]["ImGuiTabItem"][7]["name"] = "Width"
defs["structs"]["ImGuiTabItem"][7]["type"] = "float"
defs["structs"]["ImGuiTabItem"][8] = {}
defs["structs"]["ImGuiTabItem"][8]["name"] = "ContentWidth"
defs["structs"]["ImGuiTabItem"][8]["type"] = "float"
defs["structs"]["ImGuiTabItem"][9] = {}
defs["structs"]["ImGuiTabItem"][9]["name"] = "NameOffset"
defs["structs"]["ImGuiTabItem"][9]["type"] = "ImS16"
defs["structs"]["ImGuiTabItem"][10] = {}
defs["structs"]["ImGuiTabItem"][10]["name"] = "WantClose"
defs["structs"]["ImGuiTabItem"][10]["type"] = "bool"
defs["structs"]["ImGuiTextBuffer"] = {}
defs["structs"]["ImGuiTextBuffer"][1] = {}
defs["structs"]["ImGuiTextBuffer"][1]["name"] = "Buf"
defs["structs"]["ImGuiTextBuffer"][1]["template_type"] = "char"
defs["structs"]["ImGuiTextBuffer"][1]["type"] = "ImVector_char"
defs["structs"]["ImGuiTextFilter"] = {}
defs["structs"]["ImGuiTextFilter"][1] = {}
defs["structs"]["ImGuiTextFilter"][1]["name"] = "InputBuf[256]"
defs["structs"]["ImGuiTextFilter"][1]["size"] = 256
defs["structs"]["ImGuiTextFilter"][1]["type"] = "char"
defs["structs"]["ImGuiTextFilter"][2] = {}
defs["structs"]["ImGuiTextFilter"][2]["name"] = "Filters"
defs["structs"]["ImGuiTextFilter"][2]["template_type"] = "ImGuiTextRange"
defs["structs"]["ImGuiTextFilter"][2]["type"] = "ImVector_ImGuiTextRange"
defs["structs"]["ImGuiTextFilter"][3] = {}
defs["structs"]["ImGuiTextFilter"][3]["name"] = "CountGrep"
defs["structs"]["ImGuiTextFilter"][3]["type"] = "int"
defs["structs"]["ImGuiTextRange"] = {}
defs["structs"]["ImGuiTextRange"][1] = {}
defs["structs"]["ImGuiTextRange"][1]["name"] = "b"
defs["structs"]["ImGuiTextRange"][1]["type"] = "const char*"
defs["structs"]["ImGuiTextRange"][2] = {}
defs["structs"]["ImGuiTextRange"][2]["name"] = "e"
defs["structs"]["ImGuiTextRange"][2]["type"] = "const char*"
defs["structs"]["ImGuiViewport"] = {}
defs["structs"]["ImGuiViewport"][1] = {}
defs["structs"]["ImGuiViewport"][1]["comment"] = " // Main Area: Position of the viewport (the imgui coordinates are the same as OS desktop/native coordinates)"
defs["structs"]["ImGuiViewport"][1]["name"] = "ID"
defs["structs"]["ImGuiViewport"][1]["type"] = "ImGuiID"
defs["structs"]["ImGuiViewport"][2] = {}
defs["structs"]["ImGuiViewport"][2]["comment"] = " // Main Area: Size of the viewport."
defs["structs"]["ImGuiViewport"][2]["name"] = "Flags"
defs["structs"]["ImGuiViewport"][2]["type"] = "ImGuiViewportFlags"
defs["structs"]["ImGuiViewport"][3] = {}
defs["structs"]["ImGuiViewport"][3]["comment"] = " // Work Area: Offset from Pos to top-left corner of Work Area. Generally (0,0) or (0,+main_menu_bar_height). Work Area is Full Area but without menu-bars/status-bars (so WorkArea always fit inside Pos/Size!)"
defs["structs"]["ImGuiViewport"][3]["name"] = "Pos"
defs["structs"]["ImGuiViewport"][3]["type"] = "ImVec2"
defs["structs"]["ImGuiViewport"][4] = {}
defs["structs"]["ImGuiViewport"][4]["comment"] = " // Work Area: Offset from Pos+Size to bottom-right corner of Work Area. Generally (0,0) or (0,-status_bar_height)."
defs["structs"]["ImGuiViewport"][4]["name"] = "Size"
defs["structs"]["ImGuiViewport"][4]["type"] = "ImVec2"
defs["structs"]["ImGuiViewport"][5] = {}
defs["structs"]["ImGuiViewport"][5]["comment"] = " // 1.0f = 96 DPI = No extra scale."
defs["structs"]["ImGuiViewport"][5]["name"] = "WorkOffsetMin"
defs["structs"]["ImGuiViewport"][5]["type"] = "ImVec2"
defs["structs"]["ImGuiViewport"][6] = {}
defs["structs"]["ImGuiViewport"][6]["comment"] = " // The ImDrawData corresponding to this viewport. Valid after Render() and until the next call to NewFrame()."
defs["structs"]["ImGuiViewport"][6]["name"] = "WorkOffsetMax"
defs["structs"]["ImGuiViewport"][6]["type"] = "ImVec2"
defs["structs"]["ImGuiViewport"][7] = {}
defs["structs"]["ImGuiViewport"][7]["comment"] = " // (Advanced) 0: no parent. Instruct the platform back-end to setup a parent/child relationship between platform windows."
defs["structs"]["ImGuiViewport"][7]["name"] = "DpiScale"
defs["structs"]["ImGuiViewport"][7]["type"] = "float"
defs["structs"]["ImGuiViewport"][8] = {}
defs["structs"]["ImGuiViewport"][8]["comment"] = " // void* to hold custom data structure for the renderer (e.g. swap chain, framebuffers etc.). generally set by your Renderer_CreateWindow function."
defs["structs"]["ImGuiViewport"][8]["name"] = "DrawData"
defs["structs"]["ImGuiViewport"][8]["type"] = "ImDrawData*"
defs["structs"]["ImGuiViewport"][9] = {}
defs["structs"]["ImGuiViewport"][9]["comment"] = " // void* to hold custom data structure for the OS / platform (e.g. windowing info, render context). generally set by your Platform_CreateWindow function."
defs["structs"]["ImGuiViewport"][9]["name"] = "ParentViewportId"
defs["structs"]["ImGuiViewport"][9]["type"] = "ImGuiID"
defs["structs"]["ImGuiViewport"][10] = {}
defs["structs"]["ImGuiViewport"][10]["comment"] = " // void* for FindViewportByPlatformHandle(). (e.g. suggested to use natural platform handle such as HWND, GLFWWindow*, SDL_Window*)"
defs["structs"]["ImGuiViewport"][10]["name"] = "RendererUserData"
defs["structs"]["ImGuiViewport"][10]["type"] = "void*"
defs["structs"]["ImGuiViewport"][11] = {}
defs["structs"]["ImGuiViewport"][11]["comment"] = " // void* to hold lower-level, platform-native window handle (e.g. the HWND) when using an abstraction layer like GLFW or SDL (where PlatformHandle would be a SDL_Window*)"
defs["structs"]["ImGuiViewport"][11]["name"] = "PlatformUserData"
defs["structs"]["ImGuiViewport"][11]["type"] = "void*"
defs["structs"]["ImGuiViewport"][12] = {}
defs["structs"]["ImGuiViewport"][12]["comment"] = " // Platform window requested move (e.g. window was moved by the OS / host window manager, authoritative position will be OS window position)"
defs["structs"]["ImGuiViewport"][12]["name"] = "PlatformHandle"
defs["structs"]["ImGuiViewport"][12]["type"] = "void*"
defs["structs"]["ImGuiViewport"][13] = {}
defs["structs"]["ImGuiViewport"][13]["comment"] = " // Platform window requested resize (e.g. window was resized by the OS / host window manager, authoritative size will be OS window size)"
defs["structs"]["ImGuiViewport"][13]["name"] = "PlatformHandleRaw"
defs["structs"]["ImGuiViewport"][13]["type"] = "void*"
defs["structs"]["ImGuiViewport"][14] = {}
defs["structs"]["ImGuiViewport"][14]["comment"] = " // Platform window requested closure (e.g. window was moved by the OS / host window manager, e.g. pressing ALT-F4)"
defs["structs"]["ImGuiViewport"][14]["name"] = "PlatformRequestMove"
defs["structs"]["ImGuiViewport"][14]["type"] = "bool"
defs["structs"]["ImGuiViewport"][15] = {}
defs["structs"]["ImGuiViewport"][15]["name"] = "PlatformRequestResize"
defs["structs"]["ImGuiViewport"][15]["type"] = "bool"
defs["structs"]["ImGuiViewport"][16] = {}
defs["structs"]["ImGuiViewport"][16]["name"] = "PlatformRequestClose"
defs["structs"]["ImGuiViewport"][16]["type"] = "bool"
defs["structs"]["ImGuiViewportP"] = {}
defs["structs"]["ImGuiViewportP"][1] = {}
defs["structs"]["ImGuiViewportP"][1]["comment"] = " // Last stamp number from when a window hosted by this viewport was made front-most (by comparing this value between two viewport we have an implicit viewport z-order"
defs["structs"]["ImGuiViewportP"][1]["name"] = "_ImGuiViewport"
defs["structs"]["ImGuiViewportP"][1]["type"] = "ImGuiViewport"
defs["structs"]["ImGuiViewportP"][2] = {}
defs["structs"]["ImGuiViewportP"][2]["comment"] = " // Window opacity (when dragging dockable windows/viewports we make them transparent)"
defs["structs"]["ImGuiViewportP"][2]["name"] = "Idx"
defs["structs"]["ImGuiViewportP"][2]["type"] = "int"
defs["structs"]["ImGuiViewportP"][3] = {}
defs["structs"]["ImGuiViewportP"][3]["comment"] = " // Set when the viewport is owned by a window (and ImGuiViewportFlags_CanHostOtherWindows is NOT set)"
defs["structs"]["ImGuiViewportP"][3]["name"] = "LastFrameActive"
defs["structs"]["ImGuiViewportP"][3]["type"] = "int"
defs["structs"]["ImGuiViewportP"][4] = {}
defs["structs"]["ImGuiViewportP"][4]["comment"] = " // Convenience background (0) and foreground (1) draw lists. We use them to draw software mouser cursor when io.MouseDrawCursor is set and to draw most debug overlays."
defs["structs"]["ImGuiViewportP"][4]["name"] = "LastFrameDrawLists[2]"
defs["structs"]["ImGuiViewportP"][4]["size"] = 2
defs["structs"]["ImGuiViewportP"][4]["type"] = "int"
defs["structs"]["ImGuiViewportP"][5] = {}
defs["structs"]["ImGuiViewportP"][5]["comment"] = " // Work area top-left offset being increased during the frame"
defs["structs"]["ImGuiViewportP"][5]["name"] = "LastFrontMostStampCount"
defs["structs"]["ImGuiViewportP"][5]["type"] = "int"
defs["structs"]["ImGuiViewportP"][6] = {}
defs["structs"]["ImGuiViewportP"][6]["comment"] = " // Work area bottom-right offset being decreased during the frame"
defs["structs"]["ImGuiViewportP"][6]["name"] = "LastNameHash"
defs["structs"]["ImGuiViewportP"][6]["type"] = "ImGuiID"
defs["structs"]["ImGuiViewportP"][7] = {}
defs["structs"]["ImGuiViewportP"][7]["name"] = "LastPos"
defs["structs"]["ImGuiViewportP"][7]["type"] = "ImVec2"
defs["structs"]["ImGuiViewportP"][8] = {}
defs["structs"]["ImGuiViewportP"][8]["name"] = "Alpha"
defs["structs"]["ImGuiViewportP"][8]["type"] = "float"
defs["structs"]["ImGuiViewportP"][9] = {}
defs["structs"]["ImGuiViewportP"][9]["name"] = "LastAlpha"
defs["structs"]["ImGuiViewportP"][9]["type"] = "float"
defs["structs"]["ImGuiViewportP"][10] = {}
defs["structs"]["ImGuiViewportP"][10]["name"] = "PlatformMonitor"
defs["structs"]["ImGuiViewportP"][10]["type"] = "short"
defs["structs"]["ImGuiViewportP"][11] = {}
defs["structs"]["ImGuiViewportP"][11]["name"] = "PlatformWindowCreated"
defs["structs"]["ImGuiViewportP"][11]["type"] = "bool"
defs["structs"]["ImGuiViewportP"][12] = {}
defs["structs"]["ImGuiViewportP"][12]["name"] = "Window"
defs["structs"]["ImGuiViewportP"][12]["type"] = "ImGuiWindow*"
defs["structs"]["ImGuiViewportP"][13] = {}
defs["structs"]["ImGuiViewportP"][13]["name"] = "DrawLists[2]"
defs["structs"]["ImGuiViewportP"][13]["size"] = 2
defs["structs"]["ImGuiViewportP"][13]["type"] = "ImDrawList*"
defs["structs"]["ImGuiViewportP"][14] = {}
defs["structs"]["ImGuiViewportP"][14]["name"] = "DrawDataP"
defs["structs"]["ImGuiViewportP"][14]["type"] = "ImDrawData"
defs["structs"]["ImGuiViewportP"][15] = {}
defs["structs"]["ImGuiViewportP"][15]["name"] = "DrawDataBuilder"
defs["structs"]["ImGuiViewportP"][15]["type"] = "ImDrawDataBuilder"
defs["structs"]["ImGuiViewportP"][16] = {}
defs["structs"]["ImGuiViewportP"][16]["name"] = "LastPlatformPos"
defs["structs"]["ImGuiViewportP"][16]["type"] = "ImVec2"
defs["structs"]["ImGuiViewportP"][17] = {}
defs["structs"]["ImGuiViewportP"][17]["name"] = "LastPlatformSize"
defs["structs"]["ImGuiViewportP"][17]["type"] = "ImVec2"
defs["structs"]["ImGuiViewportP"][18] = {}
defs["structs"]["ImGuiViewportP"][18]["name"] = "LastRendererSize"
defs["structs"]["ImGuiViewportP"][18]["type"] = "ImVec2"
defs["structs"]["ImGuiViewportP"][19] = {}
defs["structs"]["ImGuiViewportP"][19]["name"] = "CurrWorkOffsetMin"
defs["structs"]["ImGuiViewportP"][19]["type"] = "ImVec2"
defs["structs"]["ImGuiViewportP"][20] = {}
defs["structs"]["ImGuiViewportP"][20]["name"] = "CurrWorkOffsetMax"
defs["structs"]["ImGuiViewportP"][20]["type"] = "ImVec2"
defs["structs"]["ImGuiWindow"] = {}
defs["structs"]["ImGuiWindow"][1] = {}
defs["structs"]["ImGuiWindow"][1]["comment"] = " // See enum ImGuiWindowFlags_"
defs["structs"]["ImGuiWindow"][1]["name"] = "Name"
defs["structs"]["ImGuiWindow"][1]["type"] = "char*"
defs["structs"]["ImGuiWindow"][2] = {}
defs["structs"]["ImGuiWindow"][2]["comment"] = " // Advanced users only. Set with SetNextWindowClass()"
defs["structs"]["ImGuiWindow"][2]["name"] = "ID"
defs["structs"]["ImGuiWindow"][2]["type"] = "ImGuiID"
defs["structs"]["ImGuiWindow"][3] = {}
defs["structs"]["ImGuiWindow"][3]["comment"] = " // Always set in Begin(), only inactive windows may have a NULL value here"
defs["structs"]["ImGuiWindow"][3]["name"] = "Flags"
defs["structs"]["ImGuiWindow"][3]["type"] = "ImGuiWindowFlags"
defs["structs"]["ImGuiWindow"][4] = {}
defs["structs"]["ImGuiWindow"][4]["comment"] = " // Always set in Begin(), only inactive windows may have a NULL value here"
defs["structs"]["ImGuiWindow"][4]["name"] = "FlagsPreviousFrame"
defs["structs"]["ImGuiWindow"][4]["type"] = "ImGuiWindowFlags"
defs["structs"]["ImGuiWindow"][5] = {}
defs["structs"]["ImGuiWindow"][5]["comment"] = " // We backup the viewport id (since the viewport may disappear or never be created if the window is inactive)"
defs["structs"]["ImGuiWindow"][5]["name"] = "WindowClass"
defs["structs"]["ImGuiWindow"][5]["type"] = "ImGuiWindowClass"
defs["structs"]["ImGuiWindow"][6] = {}
defs["structs"]["ImGuiWindow"][6]["comment"] = " // We backup the viewport position (since the viewport may disappear or never be created if the window is inactive)"
defs["structs"]["ImGuiWindow"][6]["name"] = "Viewport"
defs["structs"]["ImGuiWindow"][6]["type"] = "ImGuiViewportP*"
defs["structs"]["ImGuiWindow"][7] = {}
defs["structs"]["ImGuiWindow"][7]["comment"] = " // Reset to -1 every frame (index is guaranteed to be valid between NewFrame..EndFrame), only used in the Appearing frame of a tooltip/popup to enforce clamping to a given monitor"
defs["structs"]["ImGuiWindow"][7]["name"] = "ViewportId"
defs["structs"]["ImGuiWindow"][7]["type"] = "ImGuiID"
defs["structs"]["ImGuiWindow"][8] = {}
defs["structs"]["ImGuiWindow"][8]["comment"] = " // Position (always rounded-up to nearest pixel)"
defs["structs"]["ImGuiWindow"][8]["name"] = "ViewportPos"
defs["structs"]["ImGuiWindow"][8]["type"] = "ImVec2"
defs["structs"]["ImGuiWindow"][9] = {}
defs["structs"]["ImGuiWindow"][9]["comment"] = " // Current size (==SizeFull or collapsed title bar size)"
defs["structs"]["ImGuiWindow"][9]["name"] = "ViewportAllowPlatformMonitorExtend"
defs["structs"]["ImGuiWindow"][9]["type"] = "int"
defs["structs"]["ImGuiWindow"][10] = {}
defs["structs"]["ImGuiWindow"][10]["comment"] = " // Size when non collapsed"
defs["structs"]["ImGuiWindow"][10]["name"] = "Pos"
defs["structs"]["ImGuiWindow"][10]["type"] = "ImVec2"
defs["structs"]["ImGuiWindow"][11] = {}
defs["structs"]["ImGuiWindow"][11]["comment"] = " // Size of contents/scrollable client area (calculated from the extents reach of the cursor) from previous frame. Does not include window decoration or window padding."
defs["structs"]["ImGuiWindow"][11]["name"] = "Size"
defs["structs"]["ImGuiWindow"][11]["type"] = "ImVec2"
defs["structs"]["ImGuiWindow"][12] = {}
defs["structs"]["ImGuiWindow"][12]["comment"] = " // Size of contents/scrollable client area explicitly request by the user via SetNextWindowContentSize()."
defs["structs"]["ImGuiWindow"][12]["name"] = "SizeFull"
defs["structs"]["ImGuiWindow"][12]["type"] = "ImVec2"
defs["structs"]["ImGuiWindow"][13] = {}
defs["structs"]["ImGuiWindow"][13]["comment"] = " // Window padding at the time of Begin()."
defs["structs"]["ImGuiWindow"][13]["name"] = "ContentSize"
defs["structs"]["ImGuiWindow"][13]["type"] = "ImVec2"
defs["structs"]["ImGuiWindow"][14] = {}
defs["structs"]["ImGuiWindow"][14]["comment"] = " // Window rounding at the time of Begin(). May be clamped lower to avoid rendering artifacts with title bar, menu bar etc."
defs["structs"]["ImGuiWindow"][14]["name"] = "ContentSizeExplicit"
defs["structs"]["ImGuiWindow"][14]["type"] = "ImVec2"
defs["structs"]["ImGuiWindow"][15] = {}
defs["structs"]["ImGuiWindow"][15]["comment"] = " // Window border size at the time of Begin()."
defs["structs"]["ImGuiWindow"][15]["name"] = "WindowPadding"
defs["structs"]["ImGuiWindow"][15]["type"] = "ImVec2"
defs["structs"]["ImGuiWindow"][16] = {}
defs["structs"]["ImGuiWindow"][16]["comment"] = " // Size of buffer storing Name. May be larger than strlen(Name)!"
defs["structs"]["ImGuiWindow"][16]["name"] = "WindowRounding"
defs["structs"]["ImGuiWindow"][16]["type"] = "float"
defs["structs"]["ImGuiWindow"][17] = {}
defs["structs"]["ImGuiWindow"][17]["comment"] = " // == window->GetID(\"#MOVE\")"
defs["structs"]["ImGuiWindow"][17]["name"] = "WindowBorderSize"
defs["structs"]["ImGuiWindow"][17]["type"] = "float"
defs["structs"]["ImGuiWindow"][18] = {}
defs["structs"]["ImGuiWindow"][18]["comment"] = " // ID of corresponding item in parent window (for navigation to return from child window to parent window)"
defs["structs"]["ImGuiWindow"][18]["name"] = "NameBufLen"
defs["structs"]["ImGuiWindow"][18]["type"] = "int"
defs["structs"]["ImGuiWindow"][19] = {}
defs["structs"]["ImGuiWindow"][19]["comment"] = " // target scroll position. stored as cursor position with scrolling canceled out, so the highest point is always 0.0f. (FLT_MAX for no change)"
defs["structs"]["ImGuiWindow"][19]["name"] = "MoveId"
defs["structs"]["ImGuiWindow"][19]["type"] = "ImGuiID"
defs["structs"]["ImGuiWindow"][20] = {}
defs["structs"]["ImGuiWindow"][20]["comment"] = " // 0.0f = scroll so that target position is at top, 0.5f = scroll so that target position is centered"
defs["structs"]["ImGuiWindow"][20]["name"] = "ChildId"
defs["structs"]["ImGuiWindow"][20]["type"] = "ImGuiID"
defs["structs"]["ImGuiWindow"][21] = {}
defs["structs"]["ImGuiWindow"][21]["comment"] = " // Size taken by each scrollbars on their smaller axis. Pay attention! ScrollbarSizes.x == width of the vertical scrollbar, ScrollbarSizes.y = height of the horizontal scrollbar."
defs["structs"]["ImGuiWindow"][21]["name"] = "Scroll"
defs["structs"]["ImGuiWindow"][21]["type"] = "ImVec2"
defs["structs"]["ImGuiWindow"][22] = {}
defs["structs"]["ImGuiWindow"][22]["comment"] = " // Are scrollbars visible?"
defs["structs"]["ImGuiWindow"][22]["name"] = "ScrollMax"
defs["structs"]["ImGuiWindow"][22]["type"] = "ImVec2"
defs["structs"]["ImGuiWindow"][23] = {}
defs["structs"]["ImGuiWindow"][23]["comment"] = " // Set to true on Begin(), unless Collapsed"
defs["structs"]["ImGuiWindow"][23]["name"] = "ScrollTarget"
defs["structs"]["ImGuiWindow"][23]["type"] = "ImVec2"
defs["structs"]["ImGuiWindow"][24] = {}
defs["structs"]["ImGuiWindow"][24]["comment"] = " // Set to true when any widget access the current window"
defs["structs"]["ImGuiWindow"][24]["name"] = "ScrollTargetCenterRatio"
defs["structs"]["ImGuiWindow"][24]["type"] = "ImVec2"
defs["structs"]["ImGuiWindow"][25] = {}
defs["structs"]["ImGuiWindow"][25]["comment"] = " // Set when collapsing window to become only title-bar"
defs["structs"]["ImGuiWindow"][25]["name"] = "ScrollbarSizes"
defs["structs"]["ImGuiWindow"][25]["type"] = "ImVec2"
defs["structs"]["ImGuiWindow"][26] = {}
defs["structs"]["ImGuiWindow"][26]["comment"] = " // Set when items can safely be all clipped (e.g. window not visible or collapsed)"
defs["structs"]["ImGuiWindow"][26]["name"] = "ScrollbarX"
defs["structs"]["ImGuiWindow"][26]["type"] = "bool"
defs["structs"]["ImGuiWindow"][27] = {}
defs["structs"]["ImGuiWindow"][27]["comment"] = " // Set when items can safely be all clipped (e.g. window not visible or collapsed)"
defs["structs"]["ImGuiWindow"][27]["name"] = "ScrollbarY"
defs["structs"]["ImGuiWindow"][27]["type"] = "bool"
defs["structs"]["ImGuiWindow"][28] = {}
defs["structs"]["ImGuiWindow"][28]["comment"] = " // Set during the frame where the window is appearing (or re-appearing)"
defs["structs"]["ImGuiWindow"][28]["name"] = "ViewportOwned"
defs["structs"]["ImGuiWindow"][28]["type"] = "bool"
defs["structs"]["ImGuiWindow"][29] = {}
defs["structs"]["ImGuiWindow"][29]["comment"] = " // Do not display (== HiddenFrames*** > 0)"
defs["structs"]["ImGuiWindow"][29]["name"] = "Active"
defs["structs"]["ImGuiWindow"][29]["type"] = "bool"
defs["structs"]["ImGuiWindow"][30] = {}
defs["structs"]["ImGuiWindow"][30]["comment"] = " // Set on the \"Debug##Default\" window."
defs["structs"]["ImGuiWindow"][30]["name"] = "WasActive"
defs["structs"]["ImGuiWindow"][30]["type"] = "bool"
defs["structs"]["ImGuiWindow"][31] = {}
defs["structs"]["ImGuiWindow"][31]["comment"] = " // Set when the window has a close button (p_open != NULL)"
defs["structs"]["ImGuiWindow"][31]["name"] = "WriteAccessed"
defs["structs"]["ImGuiWindow"][31]["type"] = "bool"
defs["structs"]["ImGuiWindow"][32] = {}
defs["structs"]["ImGuiWindow"][32]["comment"] = " // Current border being held for resize (-1: none, otherwise 0-3)"
defs["structs"]["ImGuiWindow"][32]["name"] = "Collapsed"
defs["structs"]["ImGuiWindow"][32]["type"] = "bool"
defs["structs"]["ImGuiWindow"][33] = {}
defs["structs"]["ImGuiWindow"][33]["comment"] = " // Number of Begin() during the current frame (generally 0 or 1, 1+ if appending via multiple Begin/End pairs)"
defs["structs"]["ImGuiWindow"][33]["name"] = "WantCollapseToggle"
defs["structs"]["ImGuiWindow"][33]["type"] = "bool"
defs["structs"]["ImGuiWindow"][34] = {}
defs["structs"]["ImGuiWindow"][34]["comment"] = " // Order within immediate parent window, if we are a child window. Otherwise 0."
defs["structs"]["ImGuiWindow"][34]["name"] = "SkipItems"
defs["structs"]["ImGuiWindow"][34]["type"] = "bool"
defs["structs"]["ImGuiWindow"][35] = {}
defs["structs"]["ImGuiWindow"][35]["comment"] = " // Order within entire imgui context. This is mostly used for debugging submission order related issues."
defs["structs"]["ImGuiWindow"][35]["name"] = "Appearing"
defs["structs"]["ImGuiWindow"][35]["type"] = "bool"
defs["structs"]["ImGuiWindow"][36] = {}
defs["structs"]["ImGuiWindow"][36]["comment"] = " // ID in the popup stack when this window is used as a popup/menu (because we use generic Name/ID for recycling)"
defs["structs"]["ImGuiWindow"][36]["name"] = "Hidden"
defs["structs"]["ImGuiWindow"][36]["type"] = "bool"
defs["structs"]["ImGuiWindow"][37] = {}
defs["structs"]["ImGuiWindow"][37]["comment"] = " // Hide the window for N frames"
defs["structs"]["ImGuiWindow"][37]["name"] = "IsFallbackWindow"
defs["structs"]["ImGuiWindow"][37]["type"] = "bool"
defs["structs"]["ImGuiWindow"][38] = {}
defs["structs"]["ImGuiWindow"][38]["comment"] = " // Hide the window for N frames while allowing items to be submitted so we can measure their size"
defs["structs"]["ImGuiWindow"][38]["name"] = "HasCloseButton"
defs["structs"]["ImGuiWindow"][38]["type"] = "bool"
defs["structs"]["ImGuiWindow"][39] = {}
defs["structs"]["ImGuiWindow"][39]["comment"] = " // store acceptable condition flags for SetNextWindowPos() use."
defs["structs"]["ImGuiWindow"][39]["name"] = "ResizeBorderHeld"
defs["structs"]["ImGuiWindow"][39]["type"] = "signed char"
defs["structs"]["ImGuiWindow"][40] = {}
defs["structs"]["ImGuiWindow"][40]["comment"] = " // store acceptable condition flags for SetNextWindowSize() use."
defs["structs"]["ImGuiWindow"][40]["name"] = "BeginCount"
defs["structs"]["ImGuiWindow"][40]["type"] = "short"
defs["structs"]["ImGuiWindow"][41] = {}
defs["structs"]["ImGuiWindow"][41]["comment"] = " // store acceptable condition flags for SetNextWindowCollapsed() use."
defs["structs"]["ImGuiWindow"][41]["name"] = "BeginOrderWithinParent"
defs["structs"]["ImGuiWindow"][41]["type"] = "short"
defs["structs"]["ImGuiWindow"][42] = {}
defs["structs"]["ImGuiWindow"][42]["comment"] = " // store acceptable condition flags for SetNextWindowDock() use."
defs["structs"]["ImGuiWindow"][42]["name"] = "BeginOrderWithinContext"
defs["structs"]["ImGuiWindow"][42]["type"] = "short"
defs["structs"]["ImGuiWindow"][43] = {}
defs["structs"]["ImGuiWindow"][43]["comment"] = " // store window position when using a non-zero Pivot (position set needs to be processed when we know the window size)"
defs["structs"]["ImGuiWindow"][43]["name"] = "PopupId"
defs["structs"]["ImGuiWindow"][43]["type"] = "ImGuiID"
defs["structs"]["ImGuiWindow"][44] = {}
defs["structs"]["ImGuiWindow"][44]["comment"] = " // store window pivot for positioning. ImVec2(0, 0) when positioning from top-left corner; ImVec2(0.5f, 0.5f) for centering; ImVec2(1, 1) for bottom right."
defs["structs"]["ImGuiWindow"][44]["name"] = "AutoFitFramesX"
defs["structs"]["ImGuiWindow"][44]["type"] = "ImS8"
defs["structs"]["ImGuiWindow"][45] = {}
defs["structs"]["ImGuiWindow"][45]["comment"] = " // store window pivot for positioning. ImVec2(0, 0) when positioning from top-left corner; ImVec2(0.5f, 0.5f) for centering; ImVec2(1, 1) for bottom right."
defs["structs"]["ImGuiWindow"][45]["name"] = "AutoFitFramesY"
defs["structs"]["ImGuiWindow"][45]["type"] = "ImS8"
defs["structs"]["ImGuiWindow"][46] = {}
defs["structs"]["ImGuiWindow"][46]["comment"] = " // ID stack. ID are hashes seeded with the value at the top of the stack. (In theory this should be in the TempData structure)"
defs["structs"]["ImGuiWindow"][46]["name"] = "AutoFitChildAxises"
defs["structs"]["ImGuiWindow"][46]["type"] = "ImS8"
defs["structs"]["ImGuiWindow"][47] = {}
defs["structs"]["ImGuiWindow"][47]["comment"] = " // Temporary per-window data, reset at the beginning of the frame. This used to be called ImGuiDrawContext, hence the \"DC\" variable name."
defs["structs"]["ImGuiWindow"][47]["name"] = "AutoFitOnlyGrows"
defs["structs"]["ImGuiWindow"][47]["type"] = "bool"
defs["structs"]["ImGuiWindow"][48] = {}
defs["structs"]["ImGuiWindow"][48]["comment"] = " // == Window->Rect() just after setup in Begin(). == window->Rect() for root window."
defs["structs"]["ImGuiWindow"][48]["name"] = "AutoPosLastDirection"
defs["structs"]["ImGuiWindow"][48]["type"] = "ImGuiDir"
defs["structs"]["ImGuiWindow"][49] = {}
defs["structs"]["ImGuiWindow"][49]["comment"] = " // Inner rectangle (omit title bar, menu bar, scroll bar)"
defs["structs"]["ImGuiWindow"][49]["name"] = "HiddenFramesCanSkipItems"
defs["structs"]["ImGuiWindow"][49]["type"] = "int"
defs["structs"]["ImGuiWindow"][50] = {}
defs["structs"]["ImGuiWindow"][50]["comment"] = " // == InnerRect shrunk by WindowPadding*0.5f on each side, clipped within viewport or parent clip rect."
defs["structs"]["ImGuiWindow"][50]["name"] = "HiddenFramesCannotSkipItems"
defs["structs"]["ImGuiWindow"][50]["type"] = "int"
defs["structs"]["ImGuiWindow"][51] = {}
defs["structs"]["ImGuiWindow"][51]["comment"] = " // Initially covers the whole scrolling region. Reduced by containers e.g columns/tables when active. Shrunk by WindowPadding*1.0f on each side. This is meant to replace ContentRegionRect over time (from 1.71+ onward)."
defs["structs"]["ImGuiWindow"][51]["name"] = "SetWindowPosAllowFlags"
defs["structs"]["ImGuiWindow"][51]["type"] = "ImGuiCond"
defs["structs"]["ImGuiWindow"][52] = {}
defs["structs"]["ImGuiWindow"][52]["comment"] = " // Backup of WorkRect before entering a container such as columns/tables. Used by e.g. SpanAllColumns functions to easily access. Stacked containers are responsible for maintaining this. // FIXME-WORKRECT: Could be a stack?"
defs["structs"]["ImGuiWindow"][52]["name"] = "SetWindowSizeAllowFlags"
defs["structs"]["ImGuiWindow"][52]["type"] = "ImGuiCond"
defs["structs"]["ImGuiWindow"][53] = {}
defs["structs"]["ImGuiWindow"][53]["comment"] = " // Current clipping/scissoring rectangle, evolve as we are using PushClipRect(), etc. == DrawList->clip_rect_stack.back()."
defs["structs"]["ImGuiWindow"][53]["name"] = "SetWindowCollapsedAllowFlags"
defs["structs"]["ImGuiWindow"][53]["type"] = "ImGuiCond"
defs["structs"]["ImGuiWindow"][54] = {}
defs["structs"]["ImGuiWindow"][54]["comment"] = " // FIXME: This is currently confusing/misleading. It is essentially WorkRect but not handling of scrolling. We currently rely on it as right/bottom aligned sizing operation need some size to rely on."
defs["structs"]["ImGuiWindow"][54]["name"] = "SetWindowDockAllowFlags"
defs["structs"]["ImGuiWindow"][54]["type"] = "ImGuiCond"
defs["structs"]["ImGuiWindow"][55] = {}
defs["structs"]["ImGuiWindow"][55]["comment"] = " // Define an optional rectangular hole where mouse will pass-through the window."
defs["structs"]["ImGuiWindow"][55]["name"] = "SetWindowPosVal"
defs["structs"]["ImGuiWindow"][55]["type"] = "ImVec2"
defs["structs"]["ImGuiWindow"][56] = {}
defs["structs"]["ImGuiWindow"][56]["comment"] = " // Last frame number the window was Active."
defs["structs"]["ImGuiWindow"][56]["name"] = "SetWindowPosPivot"
defs["structs"]["ImGuiWindow"][56]["type"] = "ImVec2"
defs["structs"]["ImGuiWindow"][57] = {}
defs["structs"]["ImGuiWindow"][57]["comment"] = " // Last frame number the window was made Focused."
defs["structs"]["ImGuiWindow"][57]["name"] = "IDStack"
defs["structs"]["ImGuiWindow"][57]["template_type"] = "ImGuiID"
defs["structs"]["ImGuiWindow"][57]["type"] = "ImVector_ImGuiID"
defs["structs"]["ImGuiWindow"][58] = {}
defs["structs"]["ImGuiWindow"][58]["comment"] = " // Last timestamp the window was Active (using float as we don't need high precision there)"
defs["structs"]["ImGuiWindow"][58]["name"] = "DC"
defs["structs"]["ImGuiWindow"][58]["type"] = "ImGuiWindowTempData"
defs["structs"]["ImGuiWindow"][59] = {}
defs["structs"]["ImGuiWindow"][59]["comment"] = " // User scale multiplier per-window, via SetWindowFontScale()"
defs["structs"]["ImGuiWindow"][59]["name"] = "OuterRectClipped"
defs["structs"]["ImGuiWindow"][59]["type"] = "ImRect"
defs["structs"]["ImGuiWindow"][60] = {}
defs["structs"]["ImGuiWindow"][60]["comment"] = " // Offset into SettingsWindows[] (offsets are always valid as we only grow the array from the back)"
defs["structs"]["ImGuiWindow"][60]["name"] = "InnerRect"
defs["structs"]["ImGuiWindow"][60]["type"] = "ImRect"
defs["structs"]["ImGuiWindow"][61] = {}
defs["structs"]["ImGuiWindow"][61]["comment"] = " // == &DrawListInst (for backward compatibility reason with code using imgui_internal.h we keep this a pointer)"
defs["structs"]["ImGuiWindow"][61]["name"] = "InnerClipRect"
defs["structs"]["ImGuiWindow"][61]["type"] = "ImRect"
defs["structs"]["ImGuiWindow"][62] = {}
defs["structs"]["ImGuiWindow"][62]["comment"] = " // If we are a child _or_ popup window, this is pointing to our parent. Otherwise NULL."
defs["structs"]["ImGuiWindow"][62]["name"] = "WorkRect"
defs["structs"]["ImGuiWindow"][62]["type"] = "ImRect"
defs["structs"]["ImGuiWindow"][63] = {}
defs["structs"]["ImGuiWindow"][63]["comment"] = " // Point to ourself or first ancestor that is not a child window == Top-level window."
defs["structs"]["ImGuiWindow"][63]["name"] = "ParentWorkRect"
defs["structs"]["ImGuiWindow"][63]["type"] = "ImRect"
defs["structs"]["ImGuiWindow"][64] = {}
defs["structs"]["ImGuiWindow"][64]["comment"] = " // Point to ourself or first ancestor that is not a child window. Doesn't cross through dock nodes. We use this so IsWindowFocused() can behave consistently regardless of docking state."
defs["structs"]["ImGuiWindow"][64]["name"] = "ClipRect"
defs["structs"]["ImGuiWindow"][64]["type"] = "ImRect"
defs["structs"]["ImGuiWindow"][65] = {}
defs["structs"]["ImGuiWindow"][65]["comment"] = " // Point to ourself or first ancestor which will display TitleBgActive color when this window is active."
defs["structs"]["ImGuiWindow"][65]["name"] = "ContentRegionRect"
defs["structs"]["ImGuiWindow"][65]["type"] = "ImRect"
defs["structs"]["ImGuiWindow"][66] = {}
defs["structs"]["ImGuiWindow"][66]["comment"] = " // Point to ourself or first ancestor which doesn't have the NavFlattened flag."
defs["structs"]["ImGuiWindow"][66]["name"] = "HitTestHoleSize"
defs["structs"]["ImGuiWindow"][66]["type"] = "ImVec2ih"
defs["structs"]["ImGuiWindow"][67] = {}
defs["structs"]["ImGuiWindow"][67]["comment"] = " // When going to the menu bar, we remember the child window we came from. (This could probably be made implicit if we kept g.Windows sorted by last focused including child window.)"
defs["structs"]["ImGuiWindow"][67]["name"] = "HitTestHoleOffset"
defs["structs"]["ImGuiWindow"][67]["type"] = "ImVec2ih"
defs["structs"]["ImGuiWindow"][68] = {}
defs["structs"]["ImGuiWindow"][68]["comment"] = " // Last known NavId for this window, per layer (0/1)"
defs["structs"]["ImGuiWindow"][68]["name"] = "LastFrameActive"
defs["structs"]["ImGuiWindow"][68]["type"] = "int"
defs["structs"]["ImGuiWindow"][69] = {}
defs["structs"]["ImGuiWindow"][69]["comment"] = " // Reference rectangle, in window relative space"
defs["structs"]["ImGuiWindow"][69]["name"] = "LastFrameJustFocused"
defs["structs"]["ImGuiWindow"][69]["type"] = "int"
defs["structs"]["ImGuiWindow"][70] = {}
defs["structs"]["ImGuiWindow"][70]["comment"] = " // Set when window extraneous data have been garbage collected"
defs["structs"]["ImGuiWindow"][70]["name"] = "LastTimeActive"
defs["structs"]["ImGuiWindow"][70]["type"] = "float"
defs["structs"]["ImGuiWindow"][71] = {}
defs["structs"]["ImGuiWindow"][71]["comment"] = " // Backup of last idx/vtx count, so when waking up the window we can preallocate and avoid iterative alloc/copy"
defs["structs"]["ImGuiWindow"][71]["name"] = "ItemWidthDefault"
defs["structs"]["ImGuiWindow"][71]["type"] = "float"
defs["structs"]["ImGuiWindow"][72] = {}
defs["structs"]["ImGuiWindow"][72]["comment"] = " // Which node are we docked into. Important: Prefer testing DockIsActive in many cases as this will still be set when the dock node is hidden."
defs["structs"]["ImGuiWindow"][72]["name"] = "StateStorage"
defs["structs"]["ImGuiWindow"][72]["type"] = "ImGuiStorage"
defs["structs"]["ImGuiWindow"][73] = {}
defs["structs"]["ImGuiWindow"][73]["comment"] = " // Which node are we owning (for parent windows)"
defs["structs"]["ImGuiWindow"][73]["name"] = "ColumnsStorage"
defs["structs"]["ImGuiWindow"][73]["template_type"] = "ImGuiColumns"
defs["structs"]["ImGuiWindow"][73]["type"] = "ImVector_ImGuiColumns"
defs["structs"]["ImGuiWindow"][74] = {}
defs["structs"]["ImGuiWindow"][74]["comment"] = " // Backup of last valid DockNode->ID, so single window remember their dock node id even when they are not bound any more"
defs["structs"]["ImGuiWindow"][74]["name"] = "FontWindowScale"
defs["structs"]["ImGuiWindow"][74]["type"] = "float"
defs["structs"]["ImGuiWindow"][75] = {}
defs["structs"]["ImGuiWindow"][75]["comment"] = " // Order of the last time the window was visible within its DockNode. This is used to reorder windows that are reappearing on the same frame. Same value between windows that were active and windows that were none are possible."
defs["structs"]["ImGuiWindow"][75]["name"] = "FontDpiScale"
defs["structs"]["ImGuiWindow"][75]["type"] = "float"
defs["structs"]["ImGuiWindow"][76] = {}
defs["structs"]["ImGuiWindow"][76]["comment"] = " // When docking artifacts are actually visible. When this is set, DockNode is guaranteed to be != NULL. ~~ (DockNode != NULL) && (DockNode->Windows.Size > 1)."
defs["structs"]["ImGuiWindow"][76]["name"] = "SettingsOffset"
defs["structs"]["ImGuiWindow"][76]["type"] = "int"
defs["structs"]["ImGuiWindow"][77] = {}
defs["structs"]["ImGuiWindow"][77]["comment"] = " // Is our window visible this frame? ~~ is the corresponding tab selected?"
defs["structs"]["ImGuiWindow"][77]["name"] = "DrawList"
defs["structs"]["ImGuiWindow"][77]["type"] = "ImDrawList*"
defs["structs"]["ImGuiWindow"][78] = {}
defs["structs"]["ImGuiWindow"][78]["name"] = "DrawListInst"
defs["structs"]["ImGuiWindow"][78]["type"] = "ImDrawList"
defs["structs"]["ImGuiWindow"][79] = {}
defs["structs"]["ImGuiWindow"][79]["name"] = "ParentWindow"
defs["structs"]["ImGuiWindow"][79]["type"] = "ImGuiWindow*"
defs["structs"]["ImGuiWindow"][80] = {}
defs["structs"]["ImGuiWindow"][80]["name"] = "RootWindow"
defs["structs"]["ImGuiWindow"][80]["type"] = "ImGuiWindow*"
defs["structs"]["ImGuiWindow"][81] = {}
defs["structs"]["ImGuiWindow"][81]["name"] = "RootWindowDockStop"
defs["structs"]["ImGuiWindow"][81]["type"] = "ImGuiWindow*"
defs["structs"]["ImGuiWindow"][82] = {}
defs["structs"]["ImGuiWindow"][82]["name"] = "RootWindowForTitleBarHighlight"
defs["structs"]["ImGuiWindow"][82]["type"] = "ImGuiWindow*"
defs["structs"]["ImGuiWindow"][83] = {}
defs["structs"]["ImGuiWindow"][83]["name"] = "RootWindowForNav"
defs["structs"]["ImGuiWindow"][83]["type"] = "ImGuiWindow*"
defs["structs"]["ImGuiWindow"][84] = {}
defs["structs"]["ImGuiWindow"][84]["name"] = "NavLastChildNavWindow"
defs["structs"]["ImGuiWindow"][84]["type"] = "ImGuiWindow*"
defs["structs"]["ImGuiWindow"][85] = {}
defs["structs"]["ImGuiWindow"][85]["name"] = "NavLastIds[ImGuiNavLayer_COUNT]"
defs["structs"]["ImGuiWindow"][85]["size"] = 2
defs["structs"]["ImGuiWindow"][85]["type"] = "ImGuiID"
defs["structs"]["ImGuiWindow"][86] = {}
defs["structs"]["ImGuiWindow"][86]["name"] = "NavRectRel[ImGuiNavLayer_COUNT]"
defs["structs"]["ImGuiWindow"][86]["size"] = 2
defs["structs"]["ImGuiWindow"][86]["type"] = "ImRect"
defs["structs"]["ImGuiWindow"][87] = {}
defs["structs"]["ImGuiWindow"][87]["name"] = "MemoryCompacted"
defs["structs"]["ImGuiWindow"][87]["type"] = "bool"
defs["structs"]["ImGuiWindow"][88] = {}
defs["structs"]["ImGuiWindow"][88]["name"] = "MemoryDrawListIdxCapacity"
defs["structs"]["ImGuiWindow"][88]["type"] = "int"
defs["structs"]["ImGuiWindow"][89] = {}
defs["structs"]["ImGuiWindow"][89]["name"] = "MemoryDrawListVtxCapacity"
defs["structs"]["ImGuiWindow"][89]["type"] = "int"
defs["structs"]["ImGuiWindow"][90] = {}
defs["structs"]["ImGuiWindow"][90]["name"] = "DockNode"
defs["structs"]["ImGuiWindow"][90]["type"] = "ImGuiDockNode*"
defs["structs"]["ImGuiWindow"][91] = {}
defs["structs"]["ImGuiWindow"][91]["name"] = "DockNodeAsHost"
defs["structs"]["ImGuiWindow"][91]["type"] = "ImGuiDockNode*"
defs["structs"]["ImGuiWindow"][92] = {}
defs["structs"]["ImGuiWindow"][92]["name"] = "DockId"
defs["structs"]["ImGuiWindow"][92]["type"] = "ImGuiID"
defs["structs"]["ImGuiWindow"][93] = {}
defs["structs"]["ImGuiWindow"][93]["name"] = "DockTabItemStatusFlags"
defs["structs"]["ImGuiWindow"][93]["type"] = "ImGuiItemStatusFlags"
defs["structs"]["ImGuiWindow"][94] = {}
defs["structs"]["ImGuiWindow"][94]["name"] = "DockTabItemRect"
defs["structs"]["ImGuiWindow"][94]["type"] = "ImRect"
defs["structs"]["ImGuiWindow"][95] = {}
defs["structs"]["ImGuiWindow"][95]["name"] = "DockOrder"
defs["structs"]["ImGuiWindow"][95]["type"] = "short"
defs["structs"]["ImGuiWindow"][96] = {}
defs["structs"]["ImGuiWindow"][96]["bitfield"] = "1"
defs["structs"]["ImGuiWindow"][96]["name"] = "DockIsActive"
defs["structs"]["ImGuiWindow"][96]["type"] = "bool"
defs["structs"]["ImGuiWindow"][97] = {}
defs["structs"]["ImGuiWindow"][97]["bitfield"] = "1"
defs["structs"]["ImGuiWindow"][97]["name"] = "DockTabIsVisible"
defs["structs"]["ImGuiWindow"][97]["type"] = "bool"
defs["structs"]["ImGuiWindow"][98] = {}
defs["structs"]["ImGuiWindow"][98]["bitfield"] = "1"
defs["structs"]["ImGuiWindow"][98]["name"] = "DockTabWantClose"
defs["structs"]["ImGuiWindow"][98]["type"] = "bool"
defs["structs"]["ImGuiWindowClass"] = {}
defs["structs"]["ImGuiWindowClass"][1] = {}
defs["structs"]["ImGuiWindowClass"][1]["comment"] = " // Viewport flags to set when a window of this class owns a viewport. This allows you to enforce OS decoration or task bar icon, override the defaults on a per-window basis."
defs["structs"]["ImGuiWindowClass"][1]["name"] = "ClassId"
defs["structs"]["ImGuiWindowClass"][1]["type"] = "ImGuiID"
defs["structs"]["ImGuiWindowClass"][2] = {}
defs["structs"]["ImGuiWindowClass"][2]["comment"] = " // Viewport flags to clear when a window of this class owns a viewport. This allows you to enforce OS decoration or task bar icon, override the defaults on a per-window basis."
defs["structs"]["ImGuiWindowClass"][2]["name"] = "ParentViewportId"
defs["structs"]["ImGuiWindowClass"][2]["type"] = "ImGuiID"
defs["structs"]["ImGuiWindowClass"][3] = {}
defs["structs"]["ImGuiWindowClass"][3]["comment"] = " // [EXPERIMENTAL] Dock node flags to set when a window of this class is hosted by a dock node (it doesn't have to be selected!)"
defs["structs"]["ImGuiWindowClass"][3]["name"] = "ViewportFlagsOverrideSet"
defs["structs"]["ImGuiWindowClass"][3]["type"] = "ImGuiViewportFlags"
defs["structs"]["ImGuiWindowClass"][4] = {}
defs["structs"]["ImGuiWindowClass"][4]["comment"] = " // [EXPERIMENTAL]"
defs["structs"]["ImGuiWindowClass"][4]["name"] = "ViewportFlagsOverrideClear"
defs["structs"]["ImGuiWindowClass"][4]["type"] = "ImGuiViewportFlags"
defs["structs"]["ImGuiWindowClass"][5] = {}
defs["structs"]["ImGuiWindowClass"][5]["comment"] = " // Set to true to enforce single floating windows of this class always having their own docking node (equivalent of setting the global io.ConfigDockingAlwaysTabBar)"
defs["structs"]["ImGuiWindowClass"][5]["name"] = "DockNodeFlagsOverrideSet"
defs["structs"]["ImGuiWindowClass"][5]["type"] = "ImGuiDockNodeFlags"
defs["structs"]["ImGuiWindowClass"][6] = {}
defs["structs"]["ImGuiWindowClass"][6]["comment"] = " // Set to true to allow windows of this class to be docked/merged with an unclassed window. // FIXME-DOCK: Move to DockNodeFlags override?"
defs["structs"]["ImGuiWindowClass"][6]["name"] = "DockNodeFlagsOverrideClear"
defs["structs"]["ImGuiWindowClass"][6]["type"] = "ImGuiDockNodeFlags"
defs["structs"]["ImGuiWindowClass"][7] = {}
defs["structs"]["ImGuiWindowClass"][7]["name"] = "DockingAlwaysTabBar"
defs["structs"]["ImGuiWindowClass"][7]["type"] = "bool"
defs["structs"]["ImGuiWindowClass"][8] = {}
defs["structs"]["ImGuiWindowClass"][8]["name"] = "DockingAllowUnclassed"
defs["structs"]["ImGuiWindowClass"][8]["type"] = "bool"
defs["structs"]["ImGuiWindowSettings"] = {}
defs["structs"]["ImGuiWindowSettings"][1] = {}
defs["structs"]["ImGuiWindowSettings"][1]["comment"] = " // ID of window class if specified"
defs["structs"]["ImGuiWindowSettings"][1]["name"] = "ID"
defs["structs"]["ImGuiWindowSettings"][1]["type"] = "ImGuiID"
defs["structs"]["ImGuiWindowSettings"][2] = {}
defs["structs"]["ImGuiWindowSettings"][2]["comment"] = " // Order of the last time the window was visible within its DockNode. This is used to reorder windows that are reappearing on the same frame. Same value between windows that were active and windows that were none are possible."
defs["structs"]["ImGuiWindowSettings"][2]["name"] = "Pos"
defs["structs"]["ImGuiWindowSettings"][2]["type"] = "ImVec2ih"
defs["structs"]["ImGuiWindowSettings"][3] = {}
defs["structs"]["ImGuiWindowSettings"][3]["comment"] = " // Set when loaded from .ini data (to enable merging/loading .ini data into an already running context)"
defs["structs"]["ImGuiWindowSettings"][3]["name"] = "Size"
defs["structs"]["ImGuiWindowSettings"][3]["type"] = "ImVec2ih"
defs["structs"]["ImGuiWindowSettings"][4] = {}
defs["structs"]["ImGuiWindowSettings"][4]["name"] = "ViewportPos"
defs["structs"]["ImGuiWindowSettings"][4]["type"] = "ImVec2ih"
defs["structs"]["ImGuiWindowSettings"][5] = {}
defs["structs"]["ImGuiWindowSettings"][5]["name"] = "ViewportId"
defs["structs"]["ImGuiWindowSettings"][5]["type"] = "ImGuiID"
defs["structs"]["ImGuiWindowSettings"][6] = {}
defs["structs"]["ImGuiWindowSettings"][6]["name"] = "DockId"
defs["structs"]["ImGuiWindowSettings"][6]["type"] = "ImGuiID"
defs["structs"]["ImGuiWindowSettings"][7] = {}
defs["structs"]["ImGuiWindowSettings"][7]["name"] = "ClassId"
defs["structs"]["ImGuiWindowSettings"][7]["type"] = "ImGuiID"
defs["structs"]["ImGuiWindowSettings"][8] = {}
defs["structs"]["ImGuiWindowSettings"][8]["name"] = "DockOrder"
defs["structs"]["ImGuiWindowSettings"][8]["type"] = "short"
defs["structs"]["ImGuiWindowSettings"][9] = {}
defs["structs"]["ImGuiWindowSettings"][9]["name"] = "Collapsed"
defs["structs"]["ImGuiWindowSettings"][9]["type"] = "bool"
defs["structs"]["ImGuiWindowSettings"][10] = {}
defs["structs"]["ImGuiWindowSettings"][10]["name"] = "WantApply"
defs["structs"]["ImGuiWindowSettings"][10]["type"] = "bool"
defs["structs"]["ImGuiWindowTempData"] = {}
defs["structs"]["ImGuiWindowTempData"][1] = {}
defs["structs"]["ImGuiWindowTempData"][1]["comment"] = " // Used to implicitly calculate the size of our contents, always growing during the frame. Used to calculate window->ContentSize at the beginning of next frame"
defs["structs"]["ImGuiWindowTempData"][1]["name"] = "CursorPos"
defs["structs"]["ImGuiWindowTempData"][1]["type"] = "ImVec2"
defs["structs"]["ImGuiWindowTempData"][2] = {}
defs["structs"]["ImGuiWindowTempData"][2]["comment"] = " // Baseline offset (0.0f by default on a new line, generally == style.FramePadding.y when a framed item has been added)."
defs["structs"]["ImGuiWindowTempData"][2]["name"] = "CursorPosPrevLine"
defs["structs"]["ImGuiWindowTempData"][2]["type"] = "ImVec2"
defs["structs"]["ImGuiWindowTempData"][3] = {}
defs["structs"]["ImGuiWindowTempData"][3]["comment"] = " // Indentation / start position from left of window (increased by TreePush/TreePop, etc.)"
defs["structs"]["ImGuiWindowTempData"][3]["name"] = "CursorStartPos"
defs["structs"]["ImGuiWindowTempData"][3]["type"] = "ImVec2"
defs["structs"]["ImGuiWindowTempData"][4] = {}
defs["structs"]["ImGuiWindowTempData"][4]["comment"] = " // Offset to the current column (if ColumnsCurrent > 0). FIXME: This and the above should be a stack to allow use cases like Tree->Column->Tree. Need revamp columns API."
defs["structs"]["ImGuiWindowTempData"][4]["name"] = "CursorMaxPos"
defs["structs"]["ImGuiWindowTempData"][4]["type"] = "ImVec2"
defs["structs"]["ImGuiWindowTempData"][5] = {}
defs["structs"]["ImGuiWindowTempData"][5]["comment"] = " // ID for last item"
defs["structs"]["ImGuiWindowTempData"][5]["name"] = "CurrLineSize"
defs["structs"]["ImGuiWindowTempData"][5]["type"] = "ImVec2"
defs["structs"]["ImGuiWindowTempData"][6] = {}
defs["structs"]["ImGuiWindowTempData"][6]["comment"] = " // Status flags for last item (see ImGuiItemStatusFlags_)"
defs["structs"]["ImGuiWindowTempData"][6]["name"] = "PrevLineSize"
defs["structs"]["ImGuiWindowTempData"][6]["type"] = "ImVec2"
defs["structs"]["ImGuiWindowTempData"][7] = {}
defs["structs"]["ImGuiWindowTempData"][7]["comment"] = " // Interaction rect for last item"
defs["structs"]["ImGuiWindowTempData"][7]["name"] = "CurrLineTextBaseOffset"
defs["structs"]["ImGuiWindowTempData"][7]["type"] = "float"
defs["structs"]["ImGuiWindowTempData"][8] = {}
defs["structs"]["ImGuiWindowTempData"][8]["comment"] = " // End-user display rect for last item (only valid if LastItemStatusFlags & ImGuiItemStatusFlags_HasDisplayRect)"
defs["structs"]["ImGuiWindowTempData"][8]["name"] = "PrevLineTextBaseOffset"
defs["structs"]["ImGuiWindowTempData"][8]["type"] = "float"
defs["structs"]["ImGuiWindowTempData"][9] = {}
defs["structs"]["ImGuiWindowTempData"][9]["comment"] = " // Current layer, 0..31 (we currently only use 0..1)"
defs["structs"]["ImGuiWindowTempData"][9]["name"] = "Indent"
defs["structs"]["ImGuiWindowTempData"][9]["type"] = "ImVec1"
defs["structs"]["ImGuiWindowTempData"][10] = {}
defs["structs"]["ImGuiWindowTempData"][10]["comment"] = " // = (1 << NavLayerCurrent) used by ItemAdd prior to clipping."
defs["structs"]["ImGuiWindowTempData"][10]["name"] = "ColumnsOffset"
defs["structs"]["ImGuiWindowTempData"][10]["type"] = "ImVec1"
defs["structs"]["ImGuiWindowTempData"][11] = {}
defs["structs"]["ImGuiWindowTempData"][11]["comment"] = " // Which layer have been written to (result from previous frame)"
defs["structs"]["ImGuiWindowTempData"][11]["name"] = "GroupOffset"
defs["structs"]["ImGuiWindowTempData"][11]["type"] = "ImVec1"
defs["structs"]["ImGuiWindowTempData"][12] = {}
defs["structs"]["ImGuiWindowTempData"][12]["comment"] = " // Which layer have been written to (buffer for current frame)"
defs["structs"]["ImGuiWindowTempData"][12]["name"] = "LastItemId"
defs["structs"]["ImGuiWindowTempData"][12]["type"] = "ImGuiID"
defs["structs"]["ImGuiWindowTempData"][13] = {}
defs["structs"]["ImGuiWindowTempData"][13]["comment"] = " // Current focus scope ID while appending"
defs["structs"]["ImGuiWindowTempData"][13]["name"] = "LastItemStatusFlags"
defs["structs"]["ImGuiWindowTempData"][13]["type"] = "ImGuiItemStatusFlags"
defs["structs"]["ImGuiWindowTempData"][14] = {}
defs["structs"]["ImGuiWindowTempData"][14]["comment"] = " // Set when scrolling can be used (ScrollMax > 0.0f)"
defs["structs"]["ImGuiWindowTempData"][14]["name"] = "LastItemRect"
defs["structs"]["ImGuiWindowTempData"][14]["type"] = "ImRect"
defs["structs"]["ImGuiWindowTempData"][15] = {}
defs["structs"]["ImGuiWindowTempData"][15]["comment"] = " // FIXME: Remove this"
defs["structs"]["ImGuiWindowTempData"][15]["name"] = "LastItemDisplayRect"
defs["structs"]["ImGuiWindowTempData"][15]["type"] = "ImRect"
defs["structs"]["ImGuiWindowTempData"][16] = {}
defs["structs"]["ImGuiWindowTempData"][16]["comment"] = " // MenuBarOffset.x is sort of equivalent of a per-layer CursorPos.x, saved/restored as we switch to the menu bar. The only situation when MenuBarOffset.y is > 0 if when (SafeAreaPadding.y > FramePadding.y), often used on TVs."
defs["structs"]["ImGuiWindowTempData"][16]["name"] = "NavLayerCurrent"
defs["structs"]["ImGuiWindowTempData"][16]["type"] = "ImGuiNavLayer"
defs["structs"]["ImGuiWindowTempData"][17] = {}
defs["structs"]["ImGuiWindowTempData"][17]["comment"] = " // Simplified columns storage for menu items measurement"
defs["structs"]["ImGuiWindowTempData"][17]["name"] = "NavLayerCurrentMask"
defs["structs"]["ImGuiWindowTempData"][17]["type"] = "int"
defs["structs"]["ImGuiWindowTempData"][18] = {}
defs["structs"]["ImGuiWindowTempData"][18]["comment"] = " // Current tree depth."
defs["structs"]["ImGuiWindowTempData"][18]["name"] = "NavLayerActiveMask"
defs["structs"]["ImGuiWindowTempData"][18]["type"] = "int"
defs["structs"]["ImGuiWindowTempData"][19] = {}
defs["structs"]["ImGuiWindowTempData"][19]["comment"] = " // Store a copy of !g.NavIdIsAlive for TreeDepth 0..31.. Could be turned into a ImU64 if necessary."
defs["structs"]["ImGuiWindowTempData"][19]["name"] = "NavLayerActiveMaskNext"
defs["structs"]["ImGuiWindowTempData"][19]["type"] = "int"
defs["structs"]["ImGuiWindowTempData"][20] = {}
defs["structs"]["ImGuiWindowTempData"][20]["comment"] = " // Current persistent per-window storage (store e.g. tree node open/close state)"
defs["structs"]["ImGuiWindowTempData"][20]["name"] = "NavFocusScopeIdCurrent"
defs["structs"]["ImGuiWindowTempData"][20]["type"] = "ImGuiID"
defs["structs"]["ImGuiWindowTempData"][21] = {}
defs["structs"]["ImGuiWindowTempData"][21]["comment"] = " // Current columns set"
defs["structs"]["ImGuiWindowTempData"][21]["name"] = "NavHideHighlightOneFrame"
defs["structs"]["ImGuiWindowTempData"][21]["type"] = "bool"
defs["structs"]["ImGuiWindowTempData"][22] = {}
defs["structs"]["ImGuiWindowTempData"][22]["comment"] = " // Layout type of parent window at the time of Begin()"
defs["structs"]["ImGuiWindowTempData"][22]["name"] = "NavHasScroll"
defs["structs"]["ImGuiWindowTempData"][22]["type"] = "bool"
defs["structs"]["ImGuiWindowTempData"][23] = {}
defs["structs"]["ImGuiWindowTempData"][23]["comment"] = " // (Legacy Focus/Tabbing system) Sequential counter, start at -1 and increase as assigned via FocusableItemRegister() (FIXME-NAV: Needs redesign)"
defs["structs"]["ImGuiWindowTempData"][23]["name"] = "MenuBarAppending"
defs["structs"]["ImGuiWindowTempData"][23]["type"] = "bool"
defs["structs"]["ImGuiWindowTempData"][24] = {}
defs["structs"]["ImGuiWindowTempData"][24]["comment"] = " // (Legacy Focus/Tabbing system) Same, but only count widgets which you can Tab through."
defs["structs"]["ImGuiWindowTempData"][24]["name"] = "MenuBarOffset"
defs["structs"]["ImGuiWindowTempData"][24]["type"] = "ImVec2"
defs["structs"]["ImGuiWindowTempData"][25] = {}
defs["structs"]["ImGuiWindowTempData"][25]["comment"] = " // == ItemFlagsStack.back() [empty == ImGuiItemFlags_Default]"
defs["structs"]["ImGuiWindowTempData"][25]["name"] = "MenuColumns"
defs["structs"]["ImGuiWindowTempData"][25]["type"] = "ImGuiMenuColumns"
defs["structs"]["ImGuiWindowTempData"][26] = {}
defs["structs"]["ImGuiWindowTempData"][26]["comment"] = " // == ItemWidthStack.back(). 0.0: default, >0.0: width in pixels, <0.0: align xx pixels to the right of window"
defs["structs"]["ImGuiWindowTempData"][26]["name"] = "TreeDepth"
defs["structs"]["ImGuiWindowTempData"][26]["type"] = "int"
defs["structs"]["ImGuiWindowTempData"][27] = {}
defs["structs"]["ImGuiWindowTempData"][27]["comment"] = " // == TextWrapPosStack.back() [empty == -1.0f]"
defs["structs"]["ImGuiWindowTempData"][27]["name"] = "TreeJumpToParentOnPopMask"
defs["structs"]["ImGuiWindowTempData"][27]["type"] = "ImU32"
defs["structs"]["ImGuiWindowTempData"][28] = {}
defs["structs"]["ImGuiWindowTempData"][28]["comment"] = " // Store size of various stacks for asserting"
defs["structs"]["ImGuiWindowTempData"][28]["name"] = "ChildWindows"
defs["structs"]["ImGuiWindowTempData"][28]["template_type"] = "ImGuiWindow*"
defs["structs"]["ImGuiWindowTempData"][28]["type"] = "ImVector_ImGuiWindowPtr"
defs["structs"]["ImGuiWindowTempData"][29] = {}
defs["structs"]["ImGuiWindowTempData"][29]["name"] = "StateStorage"
defs["structs"]["ImGuiWindowTempData"][29]["type"] = "ImGuiStorage*"
defs["structs"]["ImGuiWindowTempData"][30] = {}
defs["structs"]["ImGuiWindowTempData"][30]["name"] = "CurrentColumns"
defs["structs"]["ImGuiWindowTempData"][30]["type"] = "ImGuiColumns*"
defs["structs"]["ImGuiWindowTempData"][31] = {}
defs["structs"]["ImGuiWindowTempData"][31]["name"] = "LayoutType"
defs["structs"]["ImGuiWindowTempData"][31]["type"] = "ImGuiLayoutType"
defs["structs"]["ImGuiWindowTempData"][32] = {}
defs["structs"]["ImGuiWindowTempData"][32]["name"] = "ParentLayoutType"
defs["structs"]["ImGuiWindowTempData"][32]["type"] = "ImGuiLayoutType"
defs["structs"]["ImGuiWindowTempData"][33] = {}
defs["structs"]["ImGuiWindowTempData"][33]["name"] = "FocusCounterRegular"
defs["structs"]["ImGuiWindowTempData"][33]["type"] = "int"
defs["structs"]["ImGuiWindowTempData"][34] = {}
defs["structs"]["ImGuiWindowTempData"][34]["name"] = "FocusCounterTabStop"
defs["structs"]["ImGuiWindowTempData"][34]["type"] = "int"
defs["structs"]["ImGuiWindowTempData"][35] = {}
defs["structs"]["ImGuiWindowTempData"][35]["name"] = "ItemFlags"
defs["structs"]["ImGuiWindowTempData"][35]["type"] = "ImGuiItemFlags"
defs["structs"]["ImGuiWindowTempData"][36] = {}
defs["structs"]["ImGuiWindowTempData"][36]["name"] = "ItemWidth"
defs["structs"]["ImGuiWindowTempData"][36]["type"] = "float"
defs["structs"]["ImGuiWindowTempData"][37] = {}
defs["structs"]["ImGuiWindowTempData"][37]["name"] = "TextWrapPos"
defs["structs"]["ImGuiWindowTempData"][37]["type"] = "float"
defs["structs"]["ImGuiWindowTempData"][38] = {}
defs["structs"]["ImGuiWindowTempData"][38]["name"] = "ItemFlagsStack"
defs["structs"]["ImGuiWindowTempData"][38]["template_type"] = "ImGuiItemFlags"
defs["structs"]["ImGuiWindowTempData"][38]["type"] = "ImVector_ImGuiItemFlags"
defs["structs"]["ImGuiWindowTempData"][39] = {}
defs["structs"]["ImGuiWindowTempData"][39]["name"] = "ItemWidthStack"
defs["structs"]["ImGuiWindowTempData"][39]["template_type"] = "float"
defs["structs"]["ImGuiWindowTempData"][39]["type"] = "ImVector_float"
defs["structs"]["ImGuiWindowTempData"][40] = {}
defs["structs"]["ImGuiWindowTempData"][40]["name"] = "TextWrapPosStack"
defs["structs"]["ImGuiWindowTempData"][40]["template_type"] = "float"
defs["structs"]["ImGuiWindowTempData"][40]["type"] = "ImVector_float"
defs["structs"]["ImGuiWindowTempData"][41] = {}
defs["structs"]["ImGuiWindowTempData"][41]["name"] = "GroupStack"
defs["structs"]["ImGuiWindowTempData"][41]["template_type"] = "ImGuiGroupData"
defs["structs"]["ImGuiWindowTempData"][41]["type"] = "ImVector_ImGuiGroupData"
defs["structs"]["ImGuiWindowTempData"][42] = {}
defs["structs"]["ImGuiWindowTempData"][42]["name"] = "StackSizesBackup[6]"
defs["structs"]["ImGuiWindowTempData"][42]["size"] = 6
defs["structs"]["ImGuiWindowTempData"][42]["type"] = "short"
defs["structs"]["ImRect"] = {}
defs["structs"]["ImRect"][1] = {}
defs["structs"]["ImRect"][1]["name"] = "Min"
defs["structs"]["ImRect"][1]["type"] = "ImVec2"
defs["structs"]["ImRect"][2] = {}
defs["structs"]["ImRect"][2]["name"] = "Max"
defs["structs"]["ImRect"][2]["type"] = "ImVec2"
defs["structs"]["ImVec1"] = {}
defs["structs"]["ImVec1"][1] = {}
defs["structs"]["ImVec1"][1]["name"] = "x"
defs["structs"]["ImVec1"][1]["type"] = "float"
defs["structs"]["ImVec2"] = {}
defs["structs"]["ImVec2"][1] = {}
defs["structs"]["ImVec2"][1]["name"] = "x"
defs["structs"]["ImVec2"][1]["type"] = "float"
defs["structs"]["ImVec2"][2] = {}
defs["structs"]["ImVec2"][2]["name"] = "y"
defs["structs"]["ImVec2"][2]["type"] = "float"
defs["structs"]["ImVec2ih"] = {}
defs["structs"]["ImVec2ih"][1] = {}
defs["structs"]["ImVec2ih"][1]["name"] = "x"
defs["structs"]["ImVec2ih"][1]["type"] = "short"
defs["structs"]["ImVec2ih"][2] = {}
defs["structs"]["ImVec2ih"][2]["name"] = "y"
defs["structs"]["ImVec2ih"][2]["type"] = "short"
defs["structs"]["ImVec4"] = {}
defs["structs"]["ImVec4"][1] = {}
defs["structs"]["ImVec4"][1]["name"] = "x"
defs["structs"]["ImVec4"][1]["type"] = "float"
defs["structs"]["ImVec4"][2] = {}
defs["structs"]["ImVec4"][2]["name"] = "y"
defs["structs"]["ImVec4"][2]["type"] = "float"
defs["structs"]["ImVec4"][3] = {}
defs["structs"]["ImVec4"][3]["name"] = "z"
defs["structs"]["ImVec4"][3]["type"] = "float"
defs["structs"]["ImVec4"][4] = {}
defs["structs"]["ImVec4"][4]["name"] = "w"
defs["structs"]["ImVec4"][4]["type"] = "float"
defs["structs"]["STB_TexteditState"] = {}
defs["structs"]["STB_TexteditState"][1] = {}
defs["structs"]["STB_TexteditState"][1]["comment"] = " // this determines where the cursor up/down tries to seek to along x"
defs["structs"]["STB_TexteditState"][1]["name"] = "cursor"
defs["structs"]["STB_TexteditState"][1]["type"] = "int"
defs["structs"]["STB_TexteditState"][2] = {}
defs["structs"]["STB_TexteditState"][2]["name"] = "select_start"
defs["structs"]["STB_TexteditState"][2]["type"] = "int"
defs["structs"]["STB_TexteditState"][3] = {}
defs["structs"]["STB_TexteditState"][3]["name"] = "select_end"
defs["structs"]["STB_TexteditState"][3]["type"] = "int"
defs["structs"]["STB_TexteditState"][4] = {}
defs["structs"]["STB_TexteditState"][4]["name"] = "insert_mode"
defs["structs"]["STB_TexteditState"][4]["type"] = "unsigned char"
defs["structs"]["STB_TexteditState"][5] = {}
defs["structs"]["STB_TexteditState"][5]["name"] = "cursor_at_end_of_line"
defs["structs"]["STB_TexteditState"][5]["type"] = "unsigned char"
defs["structs"]["STB_TexteditState"][6] = {}
defs["structs"]["STB_TexteditState"][6]["name"] = "initialized"
defs["structs"]["STB_TexteditState"][6]["type"] = "unsigned char"
defs["structs"]["STB_TexteditState"][7] = {}
defs["structs"]["STB_TexteditState"][7]["name"] = "has_preferred_x"
defs["structs"]["STB_TexteditState"][7]["type"] = "unsigned char"
defs["structs"]["STB_TexteditState"][8] = {}
defs["structs"]["STB_TexteditState"][8]["name"] = "single_line"
defs["structs"]["STB_TexteditState"][8]["type"] = "unsigned char"
defs["structs"]["STB_TexteditState"][9] = {}
defs["structs"]["STB_TexteditState"][9]["name"] = "padding1"
defs["structs"]["STB_TexteditState"][9]["type"] = "unsigned char"
defs["structs"]["STB_TexteditState"][10] = {}
defs["structs"]["STB_TexteditState"][10]["name"] = "padding2"
defs["structs"]["STB_TexteditState"][10]["type"] = "unsigned char"
defs["structs"]["STB_TexteditState"][11] = {}
defs["structs"]["STB_TexteditState"][11]["name"] = "padding3"
defs["structs"]["STB_TexteditState"][11]["type"] = "unsigned char"
defs["structs"]["STB_TexteditState"][12] = {}
defs["structs"]["STB_TexteditState"][12]["name"] = "preferred_x"
defs["structs"]["STB_TexteditState"][12]["type"] = "float"
defs["structs"]["STB_TexteditState"][13] = {}
defs["structs"]["STB_TexteditState"][13]["name"] = "undostate"
defs["structs"]["STB_TexteditState"][13]["type"] = "StbUndoState"
defs["structs"]["StbTexteditRow"] = {}
defs["structs"]["StbTexteditRow"][1] = {}
defs["structs"]["StbTexteditRow"][1]["comment"] = " // height of row above and below baseline"
defs["structs"]["StbTexteditRow"][1]["name"] = "x0"
defs["structs"]["StbTexteditRow"][1]["type"] = "float"
defs["structs"]["StbTexteditRow"][2] = {}
defs["structs"]["StbTexteditRow"][2]["comment"] = " // height of row above and below baseline"
defs["structs"]["StbTexteditRow"][2]["name"] = "x1"
defs["structs"]["StbTexteditRow"][2]["type"] = "float"
defs["structs"]["StbTexteditRow"][3] = {}
defs["structs"]["StbTexteditRow"][3]["name"] = "baseline_y_delta"
defs["structs"]["StbTexteditRow"][3]["type"] = "float"
defs["structs"]["StbTexteditRow"][4] = {}
defs["structs"]["StbTexteditRow"][4]["name"] = "ymin"
defs["structs"]["StbTexteditRow"][4]["type"] = "float"
defs["structs"]["StbTexteditRow"][5] = {}
defs["structs"]["StbTexteditRow"][5]["name"] = "ymax"
defs["structs"]["StbTexteditRow"][5]["type"] = "float"
defs["structs"]["StbTexteditRow"][6] = {}
defs["structs"]["StbTexteditRow"][6]["name"] = "num_chars"
defs["structs"]["StbTexteditRow"][6]["type"] = "int"
defs["structs"]["StbUndoRecord"] = {}
defs["structs"]["StbUndoRecord"][1] = {}
defs["structs"]["StbUndoRecord"][1]["name"] = "where"
defs["structs"]["StbUndoRecord"][1]["type"] = "int"
defs["structs"]["StbUndoRecord"][2] = {}
defs["structs"]["StbUndoRecord"][2]["name"] = "insert_length"
defs["structs"]["StbUndoRecord"][2]["type"] = "int"
defs["structs"]["StbUndoRecord"][3] = {}
defs["structs"]["StbUndoRecord"][3]["name"] = "delete_length"
defs["structs"]["StbUndoRecord"][3]["type"] = "int"
defs["structs"]["StbUndoRecord"][4] = {}
defs["structs"]["StbUndoRecord"][4]["name"] = "char_storage"
defs["structs"]["StbUndoRecord"][4]["type"] = "int"
defs["structs"]["StbUndoState"] = {}
defs["structs"]["StbUndoState"][1] = {}
defs["structs"]["StbUndoState"][1]["name"] = "undo_rec[99]"
defs["structs"]["StbUndoState"][1]["size"] = 99
defs["structs"]["StbUndoState"][1]["type"] = "StbUndoRecord"
defs["structs"]["StbUndoState"][2] = {}
defs["structs"]["StbUndoState"][2]["name"] = "undo_char[999]"
defs["structs"]["StbUndoState"][2]["size"] = 999
defs["structs"]["StbUndoState"][2]["type"] = "ImWchar"
defs["structs"]["StbUndoState"][3] = {}
defs["structs"]["StbUndoState"][3]["name"] = "undo_point"
defs["structs"]["StbUndoState"][3]["type"] = "short"
defs["structs"]["StbUndoState"][4] = {}
defs["structs"]["StbUndoState"][4]["name"] = "redo_point"
defs["structs"]["StbUndoState"][4]["type"] = "short"
defs["structs"]["StbUndoState"][5] = {}
defs["structs"]["StbUndoState"][5]["name"] = "undo_char_point"
defs["structs"]["StbUndoState"][5]["type"] = "int"
defs["structs"]["StbUndoState"][6] = {}
defs["structs"]["StbUndoState"][6]["name"] = "redo_char_point"
defs["structs"]["StbUndoState"][6]["type"] = "int"

return defs